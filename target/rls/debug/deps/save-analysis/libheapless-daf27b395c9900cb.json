{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6","program":"/home/carl/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","heapless","--edition=2018","/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"cas\"","--cfg","feature=\"default\"","-C","metadata=daf27b395c9900cb","-C","extra-filename=-daf27b395c9900cb","--out-dir","/home/carl/Documents/git/github/davidcarl/oscore/target/rls/debug/deps","-L","dependency=/home/carl/Documents/git/github/davidcarl/oscore/target/rls/debug/deps","--extern","as_slice=/home/carl/Documents/git/github/davidcarl/oscore/target/rls/debug/deps/libas_slice-8ddb9c275bfe6197.rmeta","--extern","generic_array=/home/carl/Documents/git/github/davidcarl/oscore/target/rls/debug/deps/libgeneric_array-7c3ebbb22b964d1a.rmeta","--extern","hash32=/home/carl/Documents/git/github/davidcarl/oscore/target/rls/debug/deps/libhash32-fbcaf09d009e7e30.rmeta","--extern","stable_deref_trait=/home/carl/Documents/git/github/davidcarl/oscore/target/rls/debug/deps/libstable_deref_trait-57a76409e1fcc06f.rmeta","--cap-lints","allow","--cfg","has_cas","--cfg","has_atomics","--error-format=json","--sysroot","/home/carl/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/carl/Documents/git/github/davidcarl/oscore/target/rls/debug/deps/libheapless-daf27b395c9900cb.rmeta"},"prelude":{"crate_id":{"name":"heapless","disambiguator":[11524353682249336730,0]},"crate_root":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src","external_crates":[{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[8373705112501149482,0]}},{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[16909867051943430517,0]}},{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[11260902004430380252,0]}},{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","num":4,"id":{"name":"generic_array","disambiguator":[11259713453219118382,0]}},{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","num":5,"id":{"name":"typenum","disambiguator":[18190153633746893416,0]}},{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","num":6,"id":{"name":"hash32","disambiguator":[2121303662998828958,0]}},{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","num":7,"id":{"name":"byteorder","disambiguator":[17020381904938059266,0]}},{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","num":8,"id":{"name":"as_slice","disambiguator":[11150156933303888150,0]}},{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","num":9,"id":{"name":"generic_array","disambiguator":[15146910587246728671,0]}},{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","num":10,"id":{"name":"generic_array","disambiguator":[11317804297334370068,0]}},{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","num":11,"id":{"name":"stable_deref_trait","disambiguator":[16715788690229906953,0]}}],"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":0,"byte_end":4270,"line_start":1,"line_end":113,"column_start":1,"column_end":12}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1118},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":3523,"byte_end":3533,"line_start":78,"line_end":78,"column_start":22,"column_end":32},"alias_span":null,"name":"BinaryHeap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1119},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":3523,"byte_end":3533,"line_start":78,"line_end":78,"column_start":22,"column_end":32},"alias_span":null,"name":"BinaryHeap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":2827},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":3568,"byte_end":3574,"line_start":79,"line_end":79,"column_start":34,"column_end":40},"alias_span":null,"name":"consts","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":752},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":3576,"byte_end":3586,"line_start":79,"line_end":79,"column_start":42,"column_end":52},"alias_span":null,"name":"PowerOfTwo","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":4,"index":437},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":3612,"byte_end":3623,"line_start":80,"line_end":80,"column_start":24,"column_end":35},"alias_span":null,"name":"ArrayLength","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2024},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":3644,"byte_end":3650,"line_start":81,"line_end":81,"column_start":20,"column_end":26},"alias_span":null,"name":"Bucket","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":105},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":3652,"byte_end":3663,"line_start":81,"line_end":81,"column_start":28,"column_end":39},"alias_span":null,"name":"FnvIndexMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":150},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":3665,"byte_end":3673,"line_start":81,"line_end":81,"column_start":41,"column_end":49},"alias_span":null,"name":"IndexMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2034},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":3675,"byte_end":3678,"line_start":81,"line_end":81,"column_start":51,"column_end":54},"alias_span":null,"name":"Pos","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":370},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":3700,"byte_end":3711,"line_start":82,"line_end":82,"column_start":20,"column_end":31},"alias_span":null,"name":"FnvIndexSet","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":373},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":3713,"byte_end":3721,"line_start":82,"line_end":82,"column_start":33,"column_end":41},"alias_span":null,"name":"IndexSet","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":557},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":3744,"byte_end":3753,"line_start":83,"line_end":83,"column_start":21,"column_end":30},"alias_span":null,"name":"LinearMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":558},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":3744,"byte_end":3753,"line_start":83,"line_end":83,"column_start":21,"column_end":30},"alias_span":null,"name":"LinearMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":755},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":3771,"byte_end":3777,"line_start":84,"line_end":84,"column_start":17,"column_end":23},"alias_span":null,"name":"String","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":756},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":3771,"byte_end":3777,"line_start":84,"line_end":84,"column_start":17,"column_end":23},"alias_span":null,"name":"String","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":889},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":3792,"byte_end":3795,"line_start":85,"line_end":85,"column_start":14,"column_end":17},"alias_span":null,"name":"Vec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":890},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":3792,"byte_end":3795,"line_start":85,"line_end":85,"column_start":14,"column_end":17},"alias_span":null,"name":"Vec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2706},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":3814,"byte_end":3827,"line_start":86,"line_end":86,"column_start":18,"column_end":31},"alias_span":null,"name":"HistoryBuffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1570},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":167540,"byte_end":167544,"line_start":241,"line_end":241,"column_start":16,"column_end":20},"alias_span":null,"name":"Node","value":"","parent":{"krate":0,"index":1365}},{"kind":"Use","ref_id":{"krate":0,"index":1762},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":192363,"byte_end":192371,"line_start":92,"line_end":92,"column_start":17,"column_end":25},"alias_span":null,"name":"Consumer","value":"","parent":{"krate":0,"index":1693}},{"kind":"Use","ref_id":{"krate":0,"index":1776},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":192373,"byte_end":192381,"line_start":92,"line_end":92,"column_start":27,"column_end":35},"alias_span":null,"name":"Producer","value":"","parent":{"krate":0,"index":1693}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":0,"byte_end":4270,"line_start":1,"line_end":113,"column_start":1,"column_end":12},"name":"","qualname":"::","value":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":323},{"krate":0,"index":520},{"krate":0,"index":710},{"krate":0,"index":835},{"krate":0,"index":1033},{"krate":0,"index":1074},{"krate":0,"index":1218},{"krate":0,"index":1255},{"krate":0,"index":1365},{"krate":0,"index":1693},{"krate":0,"index":1931}],"decl_id":null,"docs":" `static` friendly data structures that don't require dynamic memory allocation","sig":null,"attributes":[{"value":"/ `static` friendly data structures that don't require dynamic memory allocation","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":0,"byte_end":82,"line_start":1,"line_end":1,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":83,"byte_end":86,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The core principle behind `heapless` is that its data structures are backed by a *static* memory","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":87,"byte_end":187,"line_start":3,"line_end":3,"column_start":1,"column_end":101}},{"value":"/ allocation. For example, you can think of `heapless::Vec` as an alternative version of","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":188,"byte_end":278,"line_start":4,"line_end":4,"column_start":1,"column_end":91}},{"value":"/ `std::Vec` with fixed capacity and that can't be re-allocated on the fly (e.g. via `push`).","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":279,"byte_end":374,"line_start":5,"line_end":5,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":375,"byte_end":378,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ All `heapless` data structures store their memory allocation *inline* and specify their capacity","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":379,"byte_end":479,"line_start":7,"line_end":7,"column_start":1,"column_end":101}},{"value":"/ via their type parameter `N`. This means that you can instantiate a `heapless` data structure on","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":480,"byte_end":580,"line_start":8,"line_end":8,"column_start":1,"column_end":101}},{"value":"/ the stack, in a `static` variable, or even in the heap.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":581,"byte_end":640,"line_start":9,"line_end":9,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":641,"byte_end":644,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":645,"byte_end":652,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"/ use heapless::Vec; // fixed capacity `std::Vec`","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":653,"byte_end":704,"line_start":12,"line_end":12,"column_start":1,"column_end":52}},{"value":"/ use heapless::consts::U8; // type level integer used to specify capacity","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":705,"byte_end":781,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":782,"byte_end":785,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ // on the stack","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":786,"byte_end":805,"line_start":15,"line_end":15,"column_start":1,"column_end":20}},{"value":"/ let mut xs: Vec<u8, U8> = Vec::new(); // can hold up to 8 elements","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":806,"byte_end":876,"line_start":16,"line_end":16,"column_start":1,"column_end":71}},{"value":"/ xs.push(42).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":877,"byte_end":902,"line_start":17,"line_end":17,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(xs.pop(), Some(42));","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":903,"byte_end":938,"line_start":18,"line_end":18,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":939,"byte_end":942,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ // in a `static` variable","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":943,"byte_end":972,"line_start":20,"line_end":20,"column_start":1,"column_end":30}},{"value":"/ // (because `const-fn` has not been fully stabilized you need to use the helper structs in","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":973,"byte_end":1067,"line_start":21,"line_end":21,"column_start":1,"column_end":95}},{"value":"/ // the `i` module, which must be wrapped in a tuple struct)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":1068,"byte_end":1131,"line_start":22,"line_end":22,"column_start":1,"column_end":64}},{"value":"/ static mut XS: Vec<u8, U8> = Vec(heapless::i::Vec::new());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":1132,"byte_end":1194,"line_start":23,"line_end":23,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":1195,"byte_end":1198,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ let xs = unsafe { &mut XS };","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":1199,"byte_end":1231,"line_start":25,"line_end":25,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":1232,"byte_end":1235,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ xs.push(42);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":1236,"byte_end":1252,"line_start":27,"line_end":27,"column_start":1,"column_end":17}},{"value":"/ assert_eq!(xs.pop(), Some(42));","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":1253,"byte_end":1288,"line_start":28,"line_end":28,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":1289,"byte_end":1292,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ // in the heap (though kind of pointless because no reallocation)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":1293,"byte_end":1362,"line_start":30,"line_end":30,"column_start":1,"column_end":70}},{"value":"/ let mut ys: Box<Vec<u8, U8>> = Box::new(Vec::new());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":1363,"byte_end":1419,"line_start":31,"line_end":31,"column_start":1,"column_end":57}},{"value":"/ ys.push(42).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":1420,"byte_end":1445,"line_start":32,"line_end":32,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(ys.pop(), Some(42));","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":1446,"byte_end":1481,"line_start":33,"line_end":33,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":1482,"byte_end":1489,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":1490,"byte_end":1493,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Because they have fixed capacity `heapless` data structures don't implicitly reallocate. This","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":1494,"byte_end":1591,"line_start":36,"line_end":36,"column_start":1,"column_end":98}},{"value":"/ means that operations like `heapless::Vec.push` are *truly* constant time rather than amortized","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":1592,"byte_end":1691,"line_start":37,"line_end":37,"column_start":1,"column_end":100}},{"value":"/ constant time with potentially unbounded (depends on the allocator) worst case execution time","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":1692,"byte_end":1789,"line_start":38,"line_end":38,"column_start":1,"column_end":98}},{"value":"/ (which is bad / unacceptable for hard real time applications).","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":1790,"byte_end":1856,"line_start":39,"line_end":39,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":1857,"byte_end":1860,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ `heapless` data structures don't use a memory allocator which means no risk of an uncatchable","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":1861,"byte_end":1958,"line_start":41,"line_end":41,"column_start":1,"column_end":98}},{"value":"/ Out Of Memory (OOM) condition while performing operations on them. It's certainly possible to","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":1959,"byte_end":2056,"line_start":42,"line_end":42,"column_start":1,"column_end":98}},{"value":"/ run out of capacity while growing `heapless` data structures, but the API lets you handle this","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":2057,"byte_end":2155,"line_start":43,"line_end":43,"column_start":1,"column_end":99}},{"value":"/ possibility by returning a `Result` on operations that may exhaust the capacity of the data","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":2156,"byte_end":2251,"line_start":44,"line_end":44,"column_start":1,"column_end":96}},{"value":"/ structure.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":2252,"byte_end":2266,"line_start":45,"line_end":45,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":2267,"byte_end":2270,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ List of currently implemented data structures:","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":2271,"byte_end":2321,"line_start":47,"line_end":47,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":2322,"byte_end":2325,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ - [`BinaryHeap`](binary_heap/struct.BinaryHeap.html) -- priority queue","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":2326,"byte_end":2400,"line_start":49,"line_end":49,"column_start":1,"column_end":75}},{"value":"/ - [`IndexMap`](struct.IndexMap.html) -- hash table","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":2401,"byte_end":2455,"line_start":50,"line_end":50,"column_start":1,"column_end":55}},{"value":"/ - [`IndexSet`](struct.IndexSet.html) -- hash set","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":2456,"byte_end":2508,"line_start":51,"line_end":51,"column_start":1,"column_end":53}},{"value":"/ - [`LinearMap`](struct.LinearMap.html)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":2509,"byte_end":2551,"line_start":52,"line_end":52,"column_start":1,"column_end":43}},{"value":"/ - [`Pool`](pool/struct.Pool.html) -- lock-free memory pool","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":2552,"byte_end":2614,"line_start":53,"line_end":53,"column_start":1,"column_end":63}},{"value":"/ - [`String`](struct.String.html)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":2615,"byte_end":2651,"line_start":54,"line_end":54,"column_start":1,"column_end":37}},{"value":"/ - [`Vec`](struct.Vec.html)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":2652,"byte_end":2682,"line_start":55,"line_end":55,"column_start":1,"column_end":31}},{"value":"/ - [`mpmc::Q*`](mpmc/index.html) -- multiple producer multiple consumer lock-free queue","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":2683,"byte_end":2773,"line_start":56,"line_end":56,"column_start":1,"column_end":91}},{"value":"/ - [`spsc::Queue`](spsc/struct.Queue.html) -- single producer single consumer lock-free queue","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":2774,"byte_end":2870,"line_start":57,"line_end":57,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":2871,"byte_end":2874,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ # Optional Features","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":2875,"byte_end":2898,"line_start":59,"line_end":59,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":2899,"byte_end":2902,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ The `heapless` crate provides the following optional Cargo features:","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":2903,"byte_end":2975,"line_start":61,"line_end":61,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":2976,"byte_end":2979,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ - `ufmt-impl`: Implement [`ufmt_write::uWrite`] for `String<N>` and `Vec<u8, N>`","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":2980,"byte_end":3064,"line_start":63,"line_end":63,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":3065,"byte_end":3068,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ [`ufmt_write::uWrite`]: https://docs.rs/ufmt-write/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":3069,"byte_end":3124,"line_start":65,"line_end":65,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":3125,"byte_end":3128,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ # Minimum Supported Rust Version (MSRV)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":3129,"byte_end":3172,"line_start":67,"line_end":67,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":3173,"byte_end":3176,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ This crate is guaranteed to compile on stable Rust 1.36 and up with its default set of features.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":3177,"byte_end":3277,"line_start":69,"line_end":69,"column_start":1,"column_end":101}},{"value":"/ It *might* compile on older versions but that may change in any new patch release.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":3278,"byte_end":3364,"line_start":70,"line_end":70,"column_start":1,"column_end":87}},{"value":"no_std","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":3389,"byte_end":3395,"line_start":72,"line_end":72,"column_start":24,"column_end":30}},{"value":"deny(missing_docs)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":3398,"byte_end":3420,"line_start":73,"line_end":73,"column_start":1,"column_end":23}},{"value":"deny(rust_2018_compatibility)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":3421,"byte_end":3454,"line_start":74,"line_end":74,"column_start":1,"column_end":34}},{"value":"deny(rust_2018_idioms)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":3455,"byte_end":3481,"line_start":75,"line_end":75,"column_start":1,"column_end":27}},{"value":"deny(warnings)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":3482,"byte_end":3500,"line_start":76,"line_end":76,"column_start":1,"column_end":19}}]},{"kind":"Type","id":{"krate":0,"index":105},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":4623,"byte_end":4634,"line_start":16,"line_end":16,"column_start":10,"column_end":21},"name":"FnvIndexMap","qualname":"::indexmap::FnvIndexMap","value":"IndexMap<K, V, N, BuildHasherDefault<FnvHasher>>","parent":null,"children":[],"decl_id":null,"docs":" An `IndexMap` using the default FNV hasher\n","sig":null,"attributes":[{"value":"/ An `IndexMap` using the default FNV hasher","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":4567,"byte_end":4613,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":2024},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":5058,"byte_end":5064,"line_start":33,"line_end":33,"column_start":12,"column_end":18},"name":"Bucket","qualname":"::indexmap::Bucket","value":"Bucket {  }","parent":null,"children":[{"krate":0,"index":2027},{"krate":0,"index":2028},{"krate":0,"index":2029}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2034},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":5183,"byte_end":5186,"line_start":41,"line_end":41,"column_start":12,"column_end":15},"name":"Pos","qualname":"::indexmap::Pos","value":"Pos {  }","parent":null,"children":[{"krate":0,"index":2035}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":150},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":14733,"byte_end":14741,"line_start":329,"line_end":329,"column_start":12,"column_end":20},"name":"IndexMap","qualname":"::indexmap::IndexMap","value":"IndexMap {  }","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156}],"decl_id":null,"docs":" Fixed capacity [`IndexMap`](https://docs.rs/indexmap/1/indexmap/map/struct.IndexMap.html)","sig":null,"attributes":[{"value":"/ Fixed capacity [`IndexMap`](https://docs.rs/indexmap/1/indexmap/map/struct.IndexMap.html)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":13109,"byte_end":13202,"line_start":287,"line_end":287,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":13203,"byte_end":13206,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/ Note that the capacity of the `IndexMap` must be a power of 2.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":13207,"byte_end":13273,"line_start":289,"line_end":289,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":13274,"byte_end":13277,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":13278,"byte_end":13292,"line_start":291,"line_end":291,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":13293,"byte_end":13296,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":13297,"byte_end":13304,"line_start":293,"line_end":293,"column_start":1,"column_end":8}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":13305,"byte_end":13335,"line_start":294,"line_end":294,"column_start":1,"column_end":31}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":13336,"byte_end":13364,"line_start":295,"line_end":295,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":13365,"byte_end":13368,"line_start":296,"line_end":296,"column_start":1,"column_end":4}},{"value":"/ // A hash map with a capacity of 16 key-value pairs allocated on the stack","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":13369,"byte_end":13447,"line_start":297,"line_end":297,"column_start":1,"column_end":79}},{"value":"/ let mut book_reviews = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":13448,"byte_end":13507,"line_start":298,"line_end":298,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":13508,"byte_end":13511,"line_start":299,"line_end":299,"column_start":1,"column_end":4}},{"value":"/ // review some books.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":13512,"byte_end":13537,"line_start":300,"line_end":300,"column_start":1,"column_end":26}},{"value":"/ book_reviews.insert(\"Adventures of Huckleberry Finn\",    \"My favorite book.\").unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":13538,"byte_end":13629,"line_start":301,"line_end":301,"column_start":1,"column_end":92}},{"value":"/ book_reviews.insert(\"Grimms' Fairy Tales\",               \"Masterpiece.\").unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":13630,"byte_end":13716,"line_start":302,"line_end":302,"column_start":1,"column_end":87}},{"value":"/ book_reviews.insert(\"Pride and Prejudice\",               \"Very enjoyable.\").unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":13717,"byte_end":13806,"line_start":303,"line_end":303,"column_start":1,"column_end":90}},{"value":"/ book_reviews.insert(\"The Adventures of Sherlock Holmes\", \"Eye lyked it alot.\").unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":13807,"byte_end":13899,"line_start":304,"line_end":304,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":13900,"byte_end":13903,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ // check for a specific one.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":13904,"byte_end":13936,"line_start":306,"line_end":306,"column_start":1,"column_end":33}},{"value":"/ if !book_reviews.contains_key(\"Les Misérables\") {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":13937,"byte_end":13991,"line_start":307,"line_end":307,"column_start":1,"column_end":54}},{"value":"/     println!(\"We've got {} reviews, but Les Misérables ain't one.\",","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":13992,"byte_end":14064,"line_start":308,"line_end":308,"column_start":1,"column_end":72}},{"value":"/              book_reviews.len());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":14065,"byte_end":14102,"line_start":309,"line_end":309,"column_start":1,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":14103,"byte_end":14108,"line_start":310,"line_end":310,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":14109,"byte_end":14112,"line_start":311,"line_end":311,"column_start":1,"column_end":4}},{"value":"/ // oops, this review has a lot of spelling mistakes, let's delete it.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":14113,"byte_end":14186,"line_start":312,"line_end":312,"column_start":1,"column_end":74}},{"value":"/ book_reviews.remove(\"The Adventures of Sherlock Holmes\");","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":14187,"byte_end":14248,"line_start":313,"line_end":313,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":14249,"byte_end":14252,"line_start":314,"line_end":314,"column_start":1,"column_end":4}},{"value":"/ // look up the values associated with some keys.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":14253,"byte_end":14305,"line_start":315,"line_end":315,"column_start":1,"column_end":53}},{"value":"/ let to_find = [\"Pride and Prejudice\", \"Alice's Adventure in Wonderland\"];","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":14306,"byte_end":14383,"line_start":316,"line_end":316,"column_start":1,"column_end":78}},{"value":"/ for book in &to_find {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":14384,"byte_end":14410,"line_start":317,"line_end":317,"column_start":1,"column_end":27}},{"value":"/     match book_reviews.get(book) {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":14411,"byte_end":14449,"line_start":318,"line_end":318,"column_start":1,"column_end":39}},{"value":"/         Some(review) => println!(\"{}: {}\", book, review),","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":14450,"byte_end":14511,"line_start":319,"line_end":319,"column_start":1,"column_end":62}},{"value":"/         None => println!(\"{} is unreviewed.\", book)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":14512,"byte_end":14567,"line_start":320,"line_end":320,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":14568,"byte_end":14577,"line_start":321,"line_end":321,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":14578,"byte_end":14583,"line_start":322,"line_end":322,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":14584,"byte_end":14587,"line_start":323,"line_end":323,"column_start":1,"column_end":4}},{"value":"/ // iterate over everything.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":14588,"byte_end":14619,"line_start":324,"line_end":324,"column_start":1,"column_end":32}},{"value":"/ for (book, review) in &book_reviews {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":14620,"byte_end":14661,"line_start":325,"line_end":325,"column_start":1,"column_end":42}},{"value":"/     println!(\"{}: \\\"{}\\\"\", book, review);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":14662,"byte_end":14707,"line_start":326,"line_end":326,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":14708,"byte_end":14713,"line_start":327,"line_end":327,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":14714,"byte_end":14721,"line_start":328,"line_end":328,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":15280,"byte_end":15283,"line_start":348,"line_end":348,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexMap<K, V, N, BuildHasherDefault<S>>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `IndexMap`.","sig":null,"attributes":[{"value":"/ Creates an empty `IndexMap`.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":15155,"byte_end":15187,"line_start":345,"line_end":345,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":15192,"byte_end":15195,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ **NOTE** This constructor will become a `const fn` in the future","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":15200,"byte_end":15268,"line_start":347,"line_end":347,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":15658,"byte_end":15666,"line_start":364,"line_end":364,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexMap<K, V, N, S>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the map can hold\n","sig":null,"attributes":[{"value":"/ Returns the number of elements the map can hold","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":15595,"byte_end":15646,"line_start":363,"line_end":363,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":16150,"byte_end":16154,"line_start":383,"line_end":383,"column_start":12,"column_end":16},"name":"keys","qualname":"<IndexMap<K, V, N, S>>::keys","value":"pub fn keys(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the keys of the map, in their order","sig":null,"attributes":[{"value":"/ Return an iterator over the keys of the map, in their order","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":15718,"byte_end":15781,"line_start":368,"line_end":368,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":15786,"byte_end":15789,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":15794,"byte_end":15801,"line_start":370,"line_end":370,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":15806,"byte_end":15836,"line_start":371,"line_end":371,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":15841,"byte_end":15869,"line_start":372,"line_end":372,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":15874,"byte_end":15877,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":15882,"byte_end":15932,"line_start":374,"line_end":374,"column_start":5,"column_end":55}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":15937,"byte_end":15969,"line_start":375,"line_end":375,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":15974,"byte_end":16006,"line_start":376,"line_end":376,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":16011,"byte_end":16043,"line_start":377,"line_end":377,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":16048,"byte_end":16051,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ for key in map.keys() {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":16056,"byte_end":16083,"line_start":379,"line_end":379,"column_start":5,"column_end":32}},{"value":"/     println!(\"{}\", key);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":16088,"byte_end":16116,"line_start":380,"line_end":380,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":16121,"byte_end":16126,"line_start":381,"line_end":381,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":16131,"byte_end":16138,"line_start":382,"line_end":382,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":16698,"byte_end":16704,"line_start":402,"line_end":402,"column_start":12,"column_end":18},"name":"values","qualname":"<IndexMap<K, V, N, S>>::values","value":"pub fn values(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the map, in their order","sig":null,"attributes":[{"value":"/ Return an iterator over the values of the map, in their order","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":16262,"byte_end":16327,"line_start":387,"line_end":387,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":16332,"byte_end":16335,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":16340,"byte_end":16347,"line_start":389,"line_end":389,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":16352,"byte_end":16382,"line_start":390,"line_end":390,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":16387,"byte_end":16415,"line_start":391,"line_end":391,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":16420,"byte_end":16423,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":16428,"byte_end":16478,"line_start":393,"line_end":393,"column_start":5,"column_end":55}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":16483,"byte_end":16515,"line_start":394,"line_end":394,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":16520,"byte_end":16552,"line_start":395,"line_end":395,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":16557,"byte_end":16589,"line_start":396,"line_end":396,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":16594,"byte_end":16597,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":16602,"byte_end":16631,"line_start":398,"line_end":398,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":16636,"byte_end":16664,"line_start":399,"line_end":399,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":16669,"byte_end":16674,"line_start":400,"line_end":400,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":16679,"byte_end":16686,"line_start":401,"line_end":401,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":17356,"byte_end":17366,"line_start":425,"line_end":425,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<IndexMap<K, V, N, S>>::values_mut","value":"pub fn values_mut(&mut Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over mutable references to the the values of the map, in their order","sig":null,"attributes":[{"value":"/ Return an iterator over mutable references to the the values of the map, in their order","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":16814,"byte_end":16905,"line_start":406,"line_end":406,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":16910,"byte_end":16913,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":16918,"byte_end":16925,"line_start":408,"line_end":408,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":16930,"byte_end":16960,"line_start":409,"line_end":409,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":16965,"byte_end":16993,"line_start":410,"line_end":410,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":16998,"byte_end":17001,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":17006,"byte_end":17056,"line_start":412,"line_end":412,"column_start":5,"column_end":55}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":17061,"byte_end":17093,"line_start":413,"line_end":413,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":17098,"byte_end":17130,"line_start":414,"line_end":414,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":17135,"byte_end":17167,"line_start":415,"line_end":415,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":17172,"byte_end":17175,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ for val in map.values_mut() {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":17180,"byte_end":17213,"line_start":417,"line_end":417,"column_start":5,"column_end":38}},{"value":"/     *val += 10;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":17218,"byte_end":17237,"line_start":418,"line_end":418,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":17242,"byte_end":17247,"line_start":419,"line_end":419,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":17252,"byte_end":17255,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":17260,"byte_end":17289,"line_start":421,"line_end":421,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":17294,"byte_end":17322,"line_start":422,"line_end":422,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":17327,"byte_end":17332,"line_start":423,"line_end":423,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":17337,"byte_end":17344,"line_start":424,"line_end":424,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":17960,"byte_end":17964,"line_start":444,"line_end":444,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexMap<K, V, N, S>>::iter","value":"pub fn iter(&Self) -> Iter<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order","sig":null,"attributes":[{"value":"/ Return an iterator over the key-value pairs of the map, in their order","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":17492,"byte_end":17566,"line_start":429,"line_end":429,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":17571,"byte_end":17574,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":17579,"byte_end":17586,"line_start":431,"line_end":431,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":17591,"byte_end":17621,"line_start":432,"line_end":432,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":17626,"byte_end":17654,"line_start":433,"line_end":433,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":17659,"byte_end":17662,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":17667,"byte_end":17717,"line_start":435,"line_end":435,"column_start":5,"column_end":55}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":17722,"byte_end":17754,"line_start":436,"line_end":436,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":17759,"byte_end":17791,"line_start":437,"line_end":437,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":17796,"byte_end":17828,"line_start":438,"line_end":438,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":17833,"byte_end":17836,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in map.iter() {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":17841,"byte_end":17875,"line_start":440,"line_end":440,"column_start":5,"column_end":39}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":17880,"byte_end":17926,"line_start":441,"line_end":441,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":17931,"byte_end":17936,"line_start":442,"line_end":442,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":17941,"byte_end":17948,"line_start":443,"line_end":443,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":18615,"byte_end":18623,"line_start":469,"line_end":469,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<IndexMap<K, V, N, S>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order","sig":null,"attributes":[{"value":"/ Return an iterator over the key-value pairs of the map, in their order","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":18072,"byte_end":18146,"line_start":450,"line_end":450,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":18151,"byte_end":18154,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":18159,"byte_end":18166,"line_start":452,"line_end":452,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":18171,"byte_end":18201,"line_start":453,"line_end":453,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":18206,"byte_end":18234,"line_start":454,"line_end":454,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":18239,"byte_end":18242,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":18247,"byte_end":18297,"line_start":456,"line_end":456,"column_start":5,"column_end":55}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":18302,"byte_end":18334,"line_start":457,"line_end":457,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":18339,"byte_end":18371,"line_start":458,"line_end":458,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":18376,"byte_end":18408,"line_start":459,"line_end":459,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":18413,"byte_end":18416,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ for (_, val) in map.iter_mut() {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":18421,"byte_end":18457,"line_start":461,"line_end":461,"column_start":5,"column_end":41}},{"value":"/     *val = 2;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":18462,"byte_end":18479,"line_start":462,"line_end":462,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":18484,"byte_end":18489,"line_start":463,"line_end":463,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":18494,"byte_end":18497,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in &map {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":18502,"byte_end":18530,"line_start":465,"line_end":465,"column_start":5,"column_end":33}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":18535,"byte_end":18581,"line_start":466,"line_end":466,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":18586,"byte_end":18591,"line_start":467,"line_end":467,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":18596,"byte_end":18603,"line_start":468,"line_end":468,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19186,"byte_end":19189,"line_start":491,"line_end":491,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexMap<K, V, N, S>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of key-value pairs in the map.","sig":null,"attributes":[{"value":"/ Return the number of key-value pairs in the map.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":18819,"byte_end":18871,"line_start":478,"line_end":478,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":18876,"byte_end":18879,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":18884,"byte_end":18914,"line_start":480,"line_end":480,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":18919,"byte_end":18922,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":18927,"byte_end":18934,"line_start":482,"line_end":482,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":18939,"byte_end":18969,"line_start":483,"line_end":483,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":18974,"byte_end":19002,"line_start":484,"line_end":484,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19007,"byte_end":19010,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ let mut a = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19015,"byte_end":19063,"line_start":486,"line_end":486,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(a.len(), 0);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19068,"byte_end":19095,"line_start":487,"line_end":487,"column_start":5,"column_end":32}},{"value":"/ a.insert(1, \"a\").unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19100,"byte_end":19130,"line_start":488,"line_end":488,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(a.len(), 1);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19135,"byte_end":19162,"line_start":489,"line_end":489,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19167,"byte_end":19174,"line_start":490,"line_end":490,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19605,"byte_end":19613,"line_start":508,"line_end":508,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexMap<K, V, N, S>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains no elements.","sig":null,"attributes":[{"value":"/ Returns true if the map contains no elements.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19251,"byte_end":19300,"line_start":495,"line_end":495,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19305,"byte_end":19308,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19313,"byte_end":19343,"line_start":497,"line_end":497,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19348,"byte_end":19351,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19356,"byte_end":19363,"line_start":499,"line_end":499,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19368,"byte_end":19398,"line_start":500,"line_end":500,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19403,"byte_end":19431,"line_start":501,"line_end":501,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19436,"byte_end":19439,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ let mut a = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19444,"byte_end":19492,"line_start":503,"line_end":503,"column_start":5,"column_end":53}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19497,"byte_end":19523,"line_start":504,"line_end":504,"column_start":5,"column_end":31}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19528,"byte_end":19549,"line_start":505,"line_end":505,"column_start":5,"column_end":26}},{"value":"/ assert!(!a.is_empty());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19554,"byte_end":19581,"line_start":506,"line_end":506,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19586,"byte_end":19593,"line_start":507,"line_end":507,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":20031,"byte_end":20036,"line_start":525,"line_end":525,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexMap<K, V, N, S>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all key-value pairs in the map, while preserving its capacity.","sig":null,"attributes":[{"value":"/ Remove all key-value pairs in the map, while preserving its capacity.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19666,"byte_end":19739,"line_start":512,"line_end":512,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19744,"byte_end":19747,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19752,"byte_end":19782,"line_start":514,"line_end":514,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19787,"byte_end":19790,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19795,"byte_end":19802,"line_start":516,"line_end":516,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19807,"byte_end":19837,"line_start":517,"line_end":517,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19842,"byte_end":19870,"line_start":518,"line_end":518,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19875,"byte_end":19878,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ let mut a = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19883,"byte_end":19931,"line_start":520,"line_end":520,"column_start":5,"column_end":53}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19936,"byte_end":19957,"line_start":521,"line_end":521,"column_start":5,"column_end":26}},{"value":"/ a.clear();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19962,"byte_end":19976,"line_start":522,"line_end":522,"column_start":5,"column_end":19}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":19981,"byte_end":20007,"line_start":523,"line_end":523,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":20012,"byte_end":20019,"line_start":524,"line_end":524,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":20750,"byte_end":20753,"line_start":548,"line_end":548,"column_start":12,"column_end":15},"name":"get","qualname":"<IndexMap<K, V, N, S>>::get","value":"pub fn get<Q>(&Self, &Q) -> Option<&V> where K: Borrow<Q>, Q: ?Sized + Hash +\nEq","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a reference to the value corresponding to the key.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":20181,"byte_end":20243,"line_start":532,"line_end":532,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":20248,"byte_end":20251,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but `Hash` and `Eq` on the borrowed","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":20256,"byte_end":20351,"line_start":534,"line_end":534,"column_start":5,"column_end":100}},{"value":"/ form *must* match those for the key type.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":20356,"byte_end":20401,"line_start":535,"line_end":535,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":20406,"byte_end":20409,"line_start":536,"line_end":536,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":20414,"byte_end":20454,"line_start":537,"line_end":537,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":20459,"byte_end":20462,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":20467,"byte_end":20474,"line_start":539,"line_end":539,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":20479,"byte_end":20509,"line_start":540,"line_end":540,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":20514,"byte_end":20542,"line_start":541,"line_end":541,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":20547,"byte_end":20550,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":20555,"byte_end":20605,"line_start":543,"line_end":543,"column_start":5,"column_end":55}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":20610,"byte_end":20642,"line_start":544,"line_end":544,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(map.get(&1), Some(&\"a\"));","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":20647,"byte_end":20687,"line_start":545,"line_end":545,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map.get(&2), None);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":20692,"byte_end":20726,"line_start":546,"line_end":546,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":20731,"byte_end":20738,"line_start":547,"line_end":547,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":21591,"byte_end":21603,"line_start":575,"line_end":575,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<IndexMap<K, V, N, S>>::contains_key","value":"pub fn contains_key<Q>(&Self, &Q) -> bool where K: Borrow<Q>, Q: ?Sized + Eq +\nHash","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains a value for the specified key.","sig":null,"attributes":[{"value":"/ Returns true if the map contains a value for the specified key.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":20978,"byte_end":21045,"line_start":557,"line_end":557,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":21050,"byte_end":21053,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but `Hash` and `Eq` on the borrowed","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":21058,"byte_end":21153,"line_start":559,"line_end":559,"column_start":5,"column_end":100}},{"value":"/ form *must* match those for the key type.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":21158,"byte_end":21203,"line_start":560,"line_end":560,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":21208,"byte_end":21211,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":21216,"byte_end":21256,"line_start":562,"line_end":562,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":21261,"byte_end":21264,"line_start":563,"line_end":563,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":21269,"byte_end":21283,"line_start":564,"line_end":564,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":21288,"byte_end":21291,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":21296,"byte_end":21303,"line_start":566,"line_end":566,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":21308,"byte_end":21338,"line_start":567,"line_end":567,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":21343,"byte_end":21371,"line_start":568,"line_end":568,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":21376,"byte_end":21379,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, U8>::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":21384,"byte_end":21433,"line_start":570,"line_end":570,"column_start":5,"column_end":54}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":21438,"byte_end":21470,"line_start":571,"line_end":571,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(map.contains_key(&1), true);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":21475,"byte_end":21518,"line_start":572,"line_end":572,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(map.contains_key(&2), false);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":21523,"byte_end":21567,"line_start":573,"line_end":573,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":21572,"byte_end":21579,"line_start":574,"line_end":574,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":22372,"byte_end":22379,"line_start":603,"line_end":603,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<IndexMap<K, V, N, S>>::get_mut","value":"pub fn get_mut<'v, Q>(&'v mut Self, &Q) -> Option<&'v mut V> where\nK: Borrow<Q>, Q: ?Sized + Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the value corresponding to the key.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":21744,"byte_end":21814,"line_start":583,"line_end":583,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":21819,"byte_end":21822,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but `Hash` and `Eq` on the borrowed","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":21827,"byte_end":21922,"line_start":585,"line_end":585,"column_start":5,"column_end":100}},{"value":"/ form *must* match those for the key type.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":21927,"byte_end":21972,"line_start":586,"line_end":586,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":21977,"byte_end":21980,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":21985,"byte_end":22025,"line_start":588,"line_end":588,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":22030,"byte_end":22033,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":22038,"byte_end":22052,"line_start":590,"line_end":590,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":22057,"byte_end":22060,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":22065,"byte_end":22072,"line_start":592,"line_end":592,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":22077,"byte_end":22107,"line_start":593,"line_end":593,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":22112,"byte_end":22140,"line_start":594,"line_end":594,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":22145,"byte_end":22148,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, U8>::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":22153,"byte_end":22202,"line_start":596,"line_end":596,"column_start":5,"column_end":54}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":22207,"byte_end":22239,"line_start":597,"line_end":597,"column_start":5,"column_end":37}},{"value":"/ if let Some(x) = map.get_mut(&1) {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":22244,"byte_end":22282,"line_start":598,"line_end":598,"column_start":5,"column_end":43}},{"value":"/     *x = \"b\";","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":22287,"byte_end":22304,"line_start":599,"line_end":599,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":22309,"byte_end":22314,"line_start":600,"line_end":600,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[&1], \"b\");","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":22319,"byte_end":22348,"line_start":601,"line_end":601,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":22353,"byte_end":22360,"line_start":602,"line_end":602,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":23724,"byte_end":23730,"line_start":643,"line_end":643,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexMap<K, V, N, S>>::insert","value":"pub fn insert(&mut Self, K, V) -> Result<Option<V>, (K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.","sig":null,"attributes":[{"value":"/ Inserts a key-value pair into the map.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":22689,"byte_end":22731,"line_start":615,"line_end":615,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":22736,"byte_end":22739,"line_start":616,"line_end":616,"column_start":5,"column_end":8}},{"value":"/ If an equivalent key already exists in the map: the key remains and retains in its place in","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":22744,"byte_end":22839,"line_start":617,"line_end":617,"column_start":5,"column_end":100}},{"value":"/ the order, its corresponding value is updated with `value` and the older value is returned","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":22844,"byte_end":22938,"line_start":618,"line_end":618,"column_start":5,"column_end":99}},{"value":"/ inside `Some(_)`.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":22943,"byte_end":22964,"line_start":619,"line_end":619,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":22969,"byte_end":22972,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ If no equivalent key existed in the map: the new key-value pair is inserted, last in order,","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":22977,"byte_end":23072,"line_start":621,"line_end":621,"column_start":5,"column_end":100}},{"value":"/ and `None` is returned.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":23077,"byte_end":23104,"line_start":622,"line_end":622,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":23109,"byte_end":23112,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":23117,"byte_end":23157,"line_start":624,"line_end":624,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":23162,"byte_end":23165,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ See also entry if you you want to insert or modify or if you need to get the index of the","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":23170,"byte_end":23263,"line_start":626,"line_end":626,"column_start":5,"column_end":98}},{"value":"/ corresponding key-value pair.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":23268,"byte_end":23301,"line_start":627,"line_end":627,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":23306,"byte_end":23309,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":23314,"byte_end":23328,"line_start":629,"line_end":629,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":23333,"byte_end":23336,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":23341,"byte_end":23348,"line_start":631,"line_end":631,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":23353,"byte_end":23383,"line_start":632,"line_end":632,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":23388,"byte_end":23416,"line_start":633,"line_end":633,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":23421,"byte_end":23424,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, U8>::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":23429,"byte_end":23478,"line_start":635,"line_end":635,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(map.insert(37, \"a\"), Ok(None));","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":23483,"byte_end":23529,"line_start":636,"line_end":636,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(map.is_empty(), false);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":23534,"byte_end":23572,"line_start":637,"line_end":637,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":23577,"byte_end":23580,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ map.insert(37, \"b\");","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":23585,"byte_end":23609,"line_start":639,"line_end":639,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(map.insert(37, \"c\"), Ok(Some(\"b\")));","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":23614,"byte_end":23665,"line_start":640,"line_end":640,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(map[&37], \"c\");","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":23670,"byte_end":23700,"line_start":641,"line_end":641,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":23705,"byte_end":23712,"line_start":642,"line_end":642,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":24693,"byte_end":24699,"line_start":673,"line_end":673,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexMap<K, V, N, S>>::remove","value":"pub fn remove<Q>(&mut Self, &Q) -> Option<V> where K: Borrow<Q>, Q: ?Sized +\nHash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Same as [`swap_remove`](struct.IndexMap.html#method.swap_remove)","sig":null,"attributes":[{"value":"/ Same as [`swap_remove`](struct.IndexMap.html#method.swap_remove)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":24245,"byte_end":24313,"line_start":658,"line_end":658,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":24318,"byte_end":24321,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":24326,"byte_end":24366,"line_start":660,"line_end":660,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":24371,"byte_end":24374,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":24379,"byte_end":24393,"line_start":662,"line_end":662,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":24398,"byte_end":24401,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":24406,"byte_end":24413,"line_start":664,"line_end":664,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":24418,"byte_end":24448,"line_start":665,"line_end":665,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":24453,"byte_end":24481,"line_start":666,"line_end":666,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":24486,"byte_end":24489,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, U8>::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":24494,"byte_end":24543,"line_start":668,"line_end":668,"column_start":5,"column_end":54}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":24548,"byte_end":24580,"line_start":669,"line_end":669,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(map.remove(&1), Some(\"a\"));","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":24585,"byte_end":24627,"line_start":670,"line_end":670,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":24632,"byte_end":24669,"line_start":671,"line_end":671,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":24674,"byte_end":24681,"line_start":672,"line_end":672,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":25240,"byte_end":25251,"line_start":689,"line_end":689,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<IndexMap<K, V, N, S>>::swap_remove","value":"pub fn swap_remove<Q>(&mut Self, &Q) -> Option<V> where K: Borrow<Q>,\nQ: ?Sized + Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return its value.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return its value.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":24846,"byte_end":24917,"line_start":681,"line_end":681,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":24922,"byte_end":24925,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the last element of the map","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":24930,"byte_end":25026,"line_start":683,"line_end":683,"column_start":5,"column_end":101}},{"value":"/ and popping it off. **This perturbs the postion of what used to be the last element!**","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":25031,"byte_end":25121,"line_start":684,"line_end":684,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":25126,"byte_end":25129,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":25134,"byte_end":25175,"line_start":686,"line_end":686,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":25180,"byte_end":25183,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":25188,"byte_end":25228,"line_start":688,"line_end":688,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":291},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":30046,"byte_end":30050,"line_start":886,"line_end":886,"column_start":12,"column_end":16},"name":"Iter","qualname":"::indexmap::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":295}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":308},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":30463,"byte_end":30470,"line_start":906,"line_end":906,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::indexmap::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":312}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":370},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":32631,"byte_end":32642,"line_start":9,"line_end":9,"column_start":10,"column_end":21},"name":"FnvIndexSet","qualname":"::indexset::FnvIndexSet","value":"IndexSet<T, N, BuildHasherDefault<FnvHasher>>","parent":null,"children":[],"decl_id":null,"docs":" An `IndexSet` using the default FNV hasher\n","sig":null,"attributes":[{"value":"/ An `IndexSet` using the default FNV hasher","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":32575,"byte_end":32621,"line_start":8,"line_end":8,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":373},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":33670,"byte_end":33678,"line_start":44,"line_end":44,"column_start":12,"column_end":20},"name":"IndexSet","qualname":"::indexset::IndexSet","value":"IndexSet {  }","parent":null,"children":[{"krate":0,"index":377}],"decl_id":null,"docs":" Fixed capacity [`IndexSet`](https://docs.rs/indexmap/1/indexmap/set/struct.IndexSet.html)","sig":null,"attributes":[{"value":"/ Fixed capacity [`IndexSet`](https://docs.rs/indexmap/1/indexmap/set/struct.IndexSet.html)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":32699,"byte_end":32792,"line_start":11,"line_end":11,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":32793,"byte_end":32796,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Note that the capacity of the `IndexSet` must be a power of 2.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":32797,"byte_end":32863,"line_start":13,"line_end":13,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":32864,"byte_end":32867,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":32868,"byte_end":32882,"line_start":15,"line_end":15,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":32883,"byte_end":32886,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":32887,"byte_end":32894,"line_start":17,"line_end":17,"column_start":1,"column_end":8}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":32895,"byte_end":32925,"line_start":18,"line_end":18,"column_start":1,"column_end":31}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":32926,"byte_end":32954,"line_start":19,"line_end":19,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":32955,"byte_end":32958,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ // A hash set with a capacity of 16 elements allocated on the stack","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":32959,"byte_end":33030,"line_start":21,"line_end":21,"column_start":1,"column_end":72}},{"value":"/ let mut books = FnvIndexSet::<_, U16>::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":33031,"byte_end":33080,"line_start":22,"line_end":22,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":33081,"byte_end":33084,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ // Add some books.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":33085,"byte_end":33107,"line_start":24,"line_end":24,"column_start":1,"column_end":23}},{"value":"/ books.insert(\"A Dance With Dragons\").unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":33108,"byte_end":33158,"line_start":25,"line_end":25,"column_start":1,"column_end":51}},{"value":"/ books.insert(\"To Kill a Mockingbird\").unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":33159,"byte_end":33210,"line_start":26,"line_end":26,"column_start":1,"column_end":52}},{"value":"/ books.insert(\"The Odyssey\").unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":33211,"byte_end":33252,"line_start":27,"line_end":27,"column_start":1,"column_end":42}},{"value":"/ books.insert(\"The Great Gatsby\").unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":33253,"byte_end":33299,"line_start":28,"line_end":28,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":33300,"byte_end":33303,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ // Check for a specific one.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":33304,"byte_end":33336,"line_start":30,"line_end":30,"column_start":1,"column_end":33}},{"value":"/ if !books.contains(\"The Winds of Winter\") {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":33337,"byte_end":33384,"line_start":31,"line_end":31,"column_start":1,"column_end":48}},{"value":"/     println!(\"We have {} books, but The Winds of Winter ain't one.\",","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":33385,"byte_end":33457,"line_start":32,"line_end":32,"column_start":1,"column_end":73}},{"value":"/              books.len());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":33458,"byte_end":33488,"line_start":33,"line_end":33,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":33489,"byte_end":33494,"line_start":34,"line_end":34,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":33495,"byte_end":33498,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ // Remove a book.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":33499,"byte_end":33520,"line_start":36,"line_end":36,"column_start":1,"column_end":22}},{"value":"/ books.remove(\"The Odyssey\");","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":33521,"byte_end":33553,"line_start":37,"line_end":37,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":33554,"byte_end":33557,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ // Iterate over everything.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":33558,"byte_end":33589,"line_start":39,"line_end":39,"column_start":1,"column_end":32}},{"value":"/ for book in &books {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":33590,"byte_end":33614,"line_start":40,"line_end":40,"column_start":1,"column_end":25}},{"value":"/     println!(\"{}\", book);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":33615,"byte_end":33644,"line_start":41,"line_end":41,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":33645,"byte_end":33650,"line_start":42,"line_end":42,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":33651,"byte_end":33658,"line_start":43,"line_end":43,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":34036,"byte_end":34039,"line_start":59,"line_end":59,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexSet<T, N, BuildHasherDefault<S>>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `IndexSet`\n","sig":null,"attributes":[{"value":"/ Creates an empty `IndexSet`","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":33993,"byte_end":34024,"line_start":58,"line_end":58,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":34556,"byte_end":34564,"line_start":83,"line_end":83,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexSet<T, N, S>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the set can hold","sig":null,"attributes":[{"value":"/ Returns the number of elements the set can hold","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":34268,"byte_end":34319,"line_start":72,"line_end":72,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":34324,"byte_end":34327,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":34332,"byte_end":34346,"line_start":74,"line_end":74,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":34351,"byte_end":34354,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":34359,"byte_end":34366,"line_start":76,"line_end":76,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":34371,"byte_end":34401,"line_start":77,"line_end":77,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":34406,"byte_end":34434,"line_start":78,"line_end":78,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":34439,"byte_end":34442,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ let set = FnvIndexSet::<i32, U16>::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":34447,"byte_end":34492,"line_start":80,"line_end":80,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(set.capacity(), 16);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":34497,"byte_end":34532,"line_start":81,"line_end":81,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":34537,"byte_end":34544,"line_start":82,"line_end":82,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":35078,"byte_end":35082,"line_start":104,"line_end":104,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexSet<T, N, S>>::iter","value":"pub fn iter(&Self) -> Iter<, T>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the set, in their order","sig":null,"attributes":[{"value":"/ Return an iterator over the values of the set, in their order","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":34622,"byte_end":34687,"line_start":87,"line_end":87,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":34692,"byte_end":34695,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":34700,"byte_end":34714,"line_start":89,"line_end":89,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":34719,"byte_end":34722,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":34727,"byte_end":34734,"line_start":91,"line_end":91,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":34739,"byte_end":34769,"line_start":92,"line_end":92,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":34774,"byte_end":34802,"line_start":93,"line_end":93,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":34807,"byte_end":34810,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ let mut set = FnvIndexSet::<_, U16>::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":34815,"byte_end":34862,"line_start":95,"line_end":95,"column_start":5,"column_end":52}},{"value":"/ set.insert(\"a\").unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":34867,"byte_end":34896,"line_start":96,"line_end":96,"column_start":5,"column_end":34}},{"value":"/ set.insert(\"b\").unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":34901,"byte_end":34930,"line_start":97,"line_end":97,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":34935,"byte_end":34938,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ // Will print in an arbitrary order.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":34943,"byte_end":34983,"line_start":99,"line_end":99,"column_start":5,"column_end":45}},{"value":"/ for x in set.iter() {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":34988,"byte_end":35013,"line_start":100,"line_end":100,"column_start":5,"column_end":30}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":35018,"byte_end":35044,"line_start":101,"line_end":101,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":35049,"byte_end":35054,"line_start":102,"line_end":102,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":35059,"byte_end":35066,"line_start":103,"line_end":103,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":36117,"byte_end":36127,"line_start":135,"line_end":135,"column_start":12,"column_end":22},"name":"difference","qualname":"<IndexSet<T, N, S>>::difference","value":"pub fn difference<'a, N2, S2>(&'a Self, &'a IndexSet<T, N2, S2>) -> Difference\nwhere N2: ArrayLength<Bucket<T, ()>> + ArrayLength<Option<Pos>>,\nS2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the difference, i.e. the values that are in `self` but not in\n `other`.","sig":null,"attributes":[{"value":"/ Visits the values representing the difference, i.e. the values that are in `self` but not in","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":35178,"byte_end":35274,"line_start":110,"line_end":110,"column_start":5,"column_end":101}},{"value":"/ `other`.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":35279,"byte_end":35291,"line_start":111,"line_end":111,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":35296,"byte_end":35299,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":35304,"byte_end":35318,"line_start":113,"line_end":113,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":35323,"byte_end":35326,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":35331,"byte_end":35338,"line_start":115,"line_end":115,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":35343,"byte_end":35373,"line_start":116,"line_end":116,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":35378,"byte_end":35406,"line_start":117,"line_end":117,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":35411,"byte_end":35414,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ let mut a: FnvIndexSet<_, U16> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":35419,"byte_end":35492,"line_start":119,"line_end":119,"column_start":5,"column_end":78}},{"value":"/ let mut b: FnvIndexSet<_, U16> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":35497,"byte_end":35573,"line_start":120,"line_end":120,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":35578,"byte_end":35581,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ // Can be seen as `a - b`.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":35586,"byte_end":35616,"line_start":122,"line_end":122,"column_start":5,"column_end":35}},{"value":"/ for x in a.difference(&b) {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":35621,"byte_end":35652,"line_start":123,"line_end":123,"column_start":5,"column_end":36}},{"value":"/     println!(\"{}\", x); // Print 1","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":35657,"byte_end":35694,"line_start":124,"line_end":124,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":35699,"byte_end":35704,"line_start":125,"line_end":125,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":35709,"byte_end":35712,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ let diff: FnvIndexSet<_, U16> = a.difference(&b).collect();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":35717,"byte_end":35780,"line_start":127,"line_end":127,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(diff, [1].iter().collect::<FnvIndexSet<_, U16>>());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":35785,"byte_end":35851,"line_start":128,"line_end":128,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":35856,"byte_end":35859,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ // Note that difference is not symmetric,","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":35864,"byte_end":35909,"line_start":130,"line_end":130,"column_start":5,"column_end":50}},{"value":"/ // and `b - a` means something else:","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":35914,"byte_end":35954,"line_start":131,"line_end":131,"column_start":5,"column_end":45}},{"value":"/ let diff: FnvIndexSet<_, U16> = b.difference(&a).collect();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":35959,"byte_end":36022,"line_start":132,"line_end":132,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(diff, [4].iter().collect::<FnvIndexSet<_, U16>>());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":36027,"byte_end":36093,"line_start":133,"line_end":133,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":36098,"byte_end":36105,"line_start":134,"line_end":134,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":37295,"byte_end":37315,"line_start":172,"line_end":172,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<IndexSet<T, N, S>>::symmetric_difference","value":"pub fn symmetric_difference<'a, N2, S2>(&'a Self, &'a IndexSet<T, N2, S2>)\n-> /*impl Trait*/ where N2: ArrayLength<Bucket<T, ()>> +\nArrayLength<Option<Pos>>, S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the symmetric difference, i.e. the values that are in `self`\n or in `other` but not in both.","sig":null,"attributes":[{"value":"/ Visits the values representing the symmetric difference, i.e. the values that are in `self`","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":36434,"byte_end":36529,"line_start":149,"line_end":149,"column_start":5,"column_end":100}},{"value":"/ or in `other` but not in both.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":36534,"byte_end":36568,"line_start":150,"line_end":150,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":36573,"byte_end":36576,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":36581,"byte_end":36595,"line_start":152,"line_end":152,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":36600,"byte_end":36603,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":36608,"byte_end":36615,"line_start":154,"line_end":154,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":36620,"byte_end":36650,"line_start":155,"line_end":155,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":36655,"byte_end":36683,"line_start":156,"line_end":156,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":36688,"byte_end":36691,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ let mut a: FnvIndexSet<_, U16> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":36696,"byte_end":36769,"line_start":158,"line_end":158,"column_start":5,"column_end":78}},{"value":"/ let mut b: FnvIndexSet<_, U16> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":36774,"byte_end":36850,"line_start":159,"line_end":159,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":36855,"byte_end":36858,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 4 in that order order.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":36863,"byte_end":36901,"line_start":161,"line_end":161,"column_start":5,"column_end":43}},{"value":"/ for x in a.symmetric_difference(&b) {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":36906,"byte_end":36947,"line_start":162,"line_end":162,"column_start":5,"column_end":46}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":36952,"byte_end":36978,"line_start":163,"line_end":163,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":36983,"byte_end":36988,"line_start":164,"line_end":164,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":36993,"byte_end":36996,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ let diff1: FnvIndexSet<_, U16> = a.symmetric_difference(&b).collect();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":37001,"byte_end":37075,"line_start":166,"line_end":166,"column_start":5,"column_end":79}},{"value":"/ let diff2: FnvIndexSet<_, U16> = b.symmetric_difference(&a).collect();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":37080,"byte_end":37154,"line_start":167,"line_end":167,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":37159,"byte_end":37162,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(diff1, diff2);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":37167,"byte_end":37196,"line_start":169,"line_end":169,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(diff1, [1, 4].iter().collect::<FnvIndexSet<_, U16>>());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":37201,"byte_end":37271,"line_start":170,"line_end":170,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":37276,"byte_end":37283,"line_start":171,"line_end":171,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":38315,"byte_end":38327,"line_start":203,"line_end":203,"column_start":12,"column_end":24},"name":"intersection","qualname":"<IndexSet<T, N, S>>::intersection","value":"pub fn intersection<'a, N2, S2>(&'a Self, &'a IndexSet<T, N2, S2>)\n-> Intersection where N2: ArrayLength<Bucket<T, ()>> +\nArrayLength<Option<Pos>>, S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the intersection, i.e. the values that are both in `self` and\n `other`.","sig":null,"attributes":[{"value":"/ Visits the values representing the intersection, i.e. the values that are both in `self` and","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":37604,"byte_end":37700,"line_start":183,"line_end":183,"column_start":5,"column_end":101}},{"value":"/ `other`.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":37705,"byte_end":37717,"line_start":184,"line_end":184,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":37722,"byte_end":37725,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":37730,"byte_end":37744,"line_start":186,"line_end":186,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":37749,"byte_end":37752,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":37757,"byte_end":37764,"line_start":188,"line_end":188,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":37769,"byte_end":37799,"line_start":189,"line_end":189,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":37804,"byte_end":37832,"line_start":190,"line_end":190,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":37837,"byte_end":37840,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ let mut a: FnvIndexSet<_, U16> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":37845,"byte_end":37918,"line_start":192,"line_end":192,"column_start":5,"column_end":78}},{"value":"/ let mut b: FnvIndexSet<_, U16> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":37923,"byte_end":37999,"line_start":193,"line_end":193,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":38004,"byte_end":38007,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ // Print 2, 3 in that order.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":38012,"byte_end":38044,"line_start":195,"line_end":195,"column_start":5,"column_end":37}},{"value":"/ for x in a.intersection(&b) {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":38049,"byte_end":38082,"line_start":196,"line_end":196,"column_start":5,"column_end":38}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":38087,"byte_end":38113,"line_start":197,"line_end":197,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":38118,"byte_end":38123,"line_start":198,"line_end":198,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":38128,"byte_end":38131,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ let intersection: FnvIndexSet<_, U16> = a.intersection(&b).collect();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":38136,"byte_end":38209,"line_start":200,"line_end":200,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(intersection, [2, 3].iter().collect::<FnvIndexSet<_, U16>>());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":38214,"byte_end":38291,"line_start":201,"line_end":201,"column_start":5,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":38296,"byte_end":38303,"line_start":202,"line_end":202,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":39335,"byte_end":39340,"line_start":237,"line_end":237,"column_start":12,"column_end":17},"name":"union","qualname":"<IndexSet<T, N, S>>::union","value":"pub fn union<'a, N2, S2>(&'a Self, &'a IndexSet<T, N2, S2>) -> /*impl Trait*/\nwhere N2: ArrayLength<Bucket<T, ()>> + ArrayLength<Option<Pos>>,\nS2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the union, i.e. all the values in `self` or `other`, without\n duplicates.","sig":null,"attributes":[{"value":"/ Visits the values representing the union, i.e. all the values in `self` or `other`, without","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":38638,"byte_end":38733,"line_start":217,"line_end":217,"column_start":5,"column_end":100}},{"value":"/ duplicates.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":38738,"byte_end":38753,"line_start":218,"line_end":218,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":38758,"byte_end":38761,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":38766,"byte_end":38780,"line_start":220,"line_end":220,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":38785,"byte_end":38788,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":38793,"byte_end":38800,"line_start":222,"line_end":222,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":38805,"byte_end":38835,"line_start":223,"line_end":223,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":38840,"byte_end":38868,"line_start":224,"line_end":224,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":38873,"byte_end":38876,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ let mut a: FnvIndexSet<_, U16> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":38881,"byte_end":38954,"line_start":226,"line_end":226,"column_start":5,"column_end":78}},{"value":"/ let mut b: FnvIndexSet<_, U16> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":38959,"byte_end":39035,"line_start":227,"line_end":227,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":39040,"byte_end":39043,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 2, 3, 4 in that order.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":39048,"byte_end":39086,"line_start":229,"line_end":229,"column_start":5,"column_end":43}},{"value":"/ for x in a.union(&b) {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":39091,"byte_end":39117,"line_start":230,"line_end":230,"column_start":5,"column_end":31}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":39122,"byte_end":39148,"line_start":231,"line_end":231,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":39153,"byte_end":39158,"line_start":232,"line_end":232,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":39163,"byte_end":39166,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ let union: FnvIndexSet<_, U16> = a.union(&b).collect();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":39171,"byte_end":39230,"line_start":234,"line_end":234,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(union, [1, 2, 3, 4].iter().collect::<FnvIndexSet<_, U16>>());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":39235,"byte_end":39311,"line_start":235,"line_end":235,"column_start":5,"column_end":81}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":39316,"byte_end":39323,"line_start":236,"line_end":236,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":39966,"byte_end":39969,"line_start":261,"line_end":261,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexSet<T, N, S>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the set.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the set.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":39618,"byte_end":39664,"line_start":248,"line_end":248,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":39669,"byte_end":39672,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":39677,"byte_end":39691,"line_start":250,"line_end":250,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":39696,"byte_end":39699,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":39704,"byte_end":39711,"line_start":252,"line_end":252,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":39716,"byte_end":39746,"line_start":253,"line_end":253,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":39751,"byte_end":39779,"line_start":254,"line_end":254,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":39784,"byte_end":39787,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ let mut v: FnvIndexSet<_, U16> = FnvIndexSet::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":39792,"byte_end":39848,"line_start":256,"line_end":256,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(v.len(), 0);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":39853,"byte_end":39880,"line_start":257,"line_end":257,"column_start":5,"column_end":32}},{"value":"/ v.insert(1).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":39885,"byte_end":39910,"line_start":258,"line_end":258,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(v.len(), 1);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":39915,"byte_end":39942,"line_start":259,"line_end":259,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":39947,"byte_end":39954,"line_start":260,"line_end":260,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40374,"byte_end":40382,"line_start":278,"line_end":278,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexSet<T, N, S>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains no elements.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains no elements.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40022,"byte_end":40073,"line_start":265,"line_end":265,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40078,"byte_end":40081,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40086,"byte_end":40100,"line_start":267,"line_end":267,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40105,"byte_end":40108,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40113,"byte_end":40120,"line_start":269,"line_end":269,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40125,"byte_end":40155,"line_start":270,"line_end":270,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40160,"byte_end":40188,"line_start":271,"line_end":271,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40193,"byte_end":40196,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ let mut v: FnvIndexSet<_, U16> = FnvIndexSet::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40201,"byte_end":40257,"line_start":273,"line_end":273,"column_start":5,"column_end":61}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40262,"byte_end":40288,"line_start":274,"line_end":274,"column_start":5,"column_end":31}},{"value":"/ v.insert(1).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40293,"byte_end":40318,"line_start":275,"line_end":275,"column_start":5,"column_end":30}},{"value":"/ assert!(!v.is_empty());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40323,"byte_end":40350,"line_start":276,"line_end":276,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40355,"byte_end":40362,"line_start":277,"line_end":277,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40767,"byte_end":40772,"line_start":295,"line_end":295,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexSet<T, N, S>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, removing all values.","sig":null,"attributes":[{"value":"/ Clears the set, removing all values.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40439,"byte_end":40479,"line_start":282,"line_end":282,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40484,"byte_end":40487,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40492,"byte_end":40506,"line_start":284,"line_end":284,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40511,"byte_end":40514,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40519,"byte_end":40526,"line_start":286,"line_end":286,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40531,"byte_end":40561,"line_start":287,"line_end":287,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40566,"byte_end":40594,"line_start":288,"line_end":288,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40599,"byte_end":40602,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ let mut v: FnvIndexSet<_, U16> = FnvIndexSet::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40607,"byte_end":40663,"line_start":290,"line_end":290,"column_start":5,"column_end":61}},{"value":"/ v.insert(1).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40668,"byte_end":40693,"line_start":291,"line_end":291,"column_start":5,"column_end":30}},{"value":"/ v.clear();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40698,"byte_end":40712,"line_start":292,"line_end":292,"column_start":5,"column_end":19}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40717,"byte_end":40743,"line_start":293,"line_end":293,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40748,"byte_end":40755,"line_start":294,"line_end":294,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":41343,"byte_end":41351,"line_start":314,"line_end":314,"column_start":12,"column_end":20},"name":"contains","qualname":"<IndexSet<T, N, S>>::contains","value":"pub fn contains<Q>(&Self, &Q) -> bool where T: Borrow<Q>, Q: ?Sized + Eq +\nHash","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains a value.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains a value.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40822,"byte_end":40869,"line_start":299,"line_end":299,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40874,"byte_end":40877,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but `Hash` and `Eq` on the","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40882,"byte_end":40972,"line_start":301,"line_end":301,"column_start":5,"column_end":95}},{"value":"/ borrowed form must match those for the value type.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":40977,"byte_end":41031,"line_start":302,"line_end":302,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":41036,"byte_end":41039,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":41044,"byte_end":41058,"line_start":304,"line_end":304,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":41063,"byte_end":41066,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":41071,"byte_end":41078,"line_start":306,"line_end":306,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":41083,"byte_end":41113,"line_start":307,"line_end":307,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":41118,"byte_end":41146,"line_start":308,"line_end":308,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":41151,"byte_end":41154,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ let set: FnvIndexSet<_, U16> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":41159,"byte_end":41230,"line_start":310,"line_end":310,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(set.contains(&1), true);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":41235,"byte_end":41274,"line_start":311,"line_end":311,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(set.contains(&4), false);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":41279,"byte_end":41319,"line_start":312,"line_end":312,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":41324,"byte_end":41331,"line_start":313,"line_end":313,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":42107,"byte_end":42118,"line_start":340,"line_end":340,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<IndexSet<T, N, S>>::is_disjoint","value":"pub fn is_disjoint<N2, S2>(&Self, &IndexSet<T, N2, S2>) -> bool where\nN2: ArrayLength<Bucket<T, ()>> + ArrayLength<Option<Pos>>, S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`. This is equivalent to\n checking for an empty intersection.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` has no elements in common with `other`. This is equivalent to","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":41498,"byte_end":41588,"line_start":322,"line_end":322,"column_start":5,"column_end":95}},{"value":"/ checking for an empty intersection.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":41593,"byte_end":41632,"line_start":323,"line_end":323,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":41637,"byte_end":41640,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":41645,"byte_end":41659,"line_start":325,"line_end":325,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":41664,"byte_end":41667,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":41672,"byte_end":41679,"line_start":327,"line_end":327,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":41684,"byte_end":41714,"line_start":328,"line_end":328,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":41719,"byte_end":41747,"line_start":329,"line_end":329,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":41752,"byte_end":41755,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ let a: FnvIndexSet<_, U16> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":41760,"byte_end":41829,"line_start":331,"line_end":331,"column_start":5,"column_end":74}},{"value":"/ let mut b = FnvIndexSet::<_, U16>::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":41834,"byte_end":41879,"line_start":332,"line_end":332,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":41884,"byte_end":41887,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":41892,"byte_end":41932,"line_start":334,"line_end":334,"column_start":5,"column_end":45}},{"value":"/ b.insert(4).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":41937,"byte_end":41962,"line_start":335,"line_end":335,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":41967,"byte_end":42007,"line_start":336,"line_end":336,"column_start":5,"column_end":45}},{"value":"/ b.insert(1).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":42012,"byte_end":42037,"line_start":337,"line_end":337,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.is_disjoint(&b), false);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":42042,"byte_end":42083,"line_start":338,"line_end":338,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":42088,"byte_end":42095,"line_start":339,"line_end":339,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":42945,"byte_end":42954,"line_start":366,"line_end":366,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<IndexSet<T, N, S>>::is_subset","value":"pub fn is_subset<N2, S2>(&Self, &IndexSet<T, N2, S2>) -> bool where\nN2: ArrayLength<Bucket<T, ()>> + ArrayLength<Option<Pos>>, S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a subset of another, i.e. `other` contains at least all the\n values in `self`.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a subset of another, i.e. `other` contains at least all the","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":42338,"byte_end":42430,"line_start":348,"line_end":348,"column_start":5,"column_end":97}},{"value":"/ values in `self`.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":42435,"byte_end":42456,"line_start":349,"line_end":349,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":42461,"byte_end":42464,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":42469,"byte_end":42483,"line_start":351,"line_end":351,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":42488,"byte_end":42491,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":42496,"byte_end":42503,"line_start":353,"line_end":353,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":42508,"byte_end":42538,"line_start":354,"line_end":354,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":42543,"byte_end":42571,"line_start":355,"line_end":355,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":42576,"byte_end":42579,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ let sup: FnvIndexSet<_, U16> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":42584,"byte_end":42655,"line_start":357,"line_end":357,"column_start":5,"column_end":76}},{"value":"/ let mut set = FnvIndexSet::<_, U16>::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":42660,"byte_end":42707,"line_start":358,"line_end":358,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":42712,"byte_end":42715,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":42720,"byte_end":42762,"line_start":360,"line_end":360,"column_start":5,"column_end":47}},{"value":"/ set.insert(2).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":42767,"byte_end":42794,"line_start":361,"line_end":361,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":42799,"byte_end":42841,"line_start":362,"line_end":362,"column_start":5,"column_end":47}},{"value":"/ set.insert(4).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":42846,"byte_end":42873,"line_start":363,"line_end":363,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(set.is_subset(&sup), false);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":42878,"byte_end":42921,"line_start":364,"line_end":364,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":42926,"byte_end":42933,"line_start":365,"line_end":365,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":43832,"byte_end":43843,"line_start":395,"line_end":395,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<IndexSet<T, N, S>>::is_superset","value":"pub fn is_superset<N2, S2>(&Self, &IndexSet<T, N2, S2>) -> bool where\nN2: ArrayLength<Bucket<T, ()>> + ArrayLength<Option<Pos>>, S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":"\n # Examples","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":43296,"byte_end":43299,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":43304,"byte_end":43318,"line_start":377,"line_end":377,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":43323,"byte_end":43326,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":43331,"byte_end":43338,"line_start":379,"line_end":379,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":43343,"byte_end":43373,"line_start":380,"line_end":380,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":43378,"byte_end":43406,"line_start":381,"line_end":381,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":43411,"byte_end":43414,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ let sub: FnvIndexSet<_, U16> = [1, 2].iter().cloned().collect();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":43419,"byte_end":43487,"line_start":383,"line_end":383,"column_start":5,"column_end":73}},{"value":"/ let mut set = FnvIndexSet::<_, U16>::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":43492,"byte_end":43539,"line_start":384,"line_end":384,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":43544,"byte_end":43547,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":43552,"byte_end":43597,"line_start":386,"line_end":386,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":43602,"byte_end":43605,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ set.insert(0).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":43610,"byte_end":43637,"line_start":388,"line_end":388,"column_start":5,"column_end":32}},{"value":"/ set.insert(1).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":43642,"byte_end":43669,"line_start":389,"line_end":389,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":43674,"byte_end":43719,"line_start":390,"line_end":390,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":43724,"byte_end":43727,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ set.insert(2).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":43732,"byte_end":43759,"line_start":392,"line_end":392,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(set.is_superset(&sub), true);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":43764,"byte_end":43808,"line_start":393,"line_end":393,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":43813,"byte_end":43820,"line_start":394,"line_end":394,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":44572,"byte_end":44578,"line_start":421,"line_end":421,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexSet<T, N, S>>::insert","value":"pub fn insert(&mut Self, T) -> Result<bool, T>","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set.","sig":null,"attributes":[{"value":"/ Adds a value to the set.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":44045,"byte_end":44073,"line_start":403,"line_end":403,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":44078,"byte_end":44081,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ If the set did not have this value present, `true` is returned.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":44086,"byte_end":44153,"line_start":405,"line_end":405,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":44158,"byte_end":44161,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ If the set did have this value present, `false` is returned.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":44166,"byte_end":44230,"line_start":407,"line_end":407,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":44235,"byte_end":44238,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":44243,"byte_end":44257,"line_start":409,"line_end":409,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":44262,"byte_end":44265,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":44270,"byte_end":44277,"line_start":411,"line_end":411,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":44282,"byte_end":44312,"line_start":412,"line_end":412,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":44317,"byte_end":44345,"line_start":413,"line_end":413,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":44350,"byte_end":44353,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ let mut set = FnvIndexSet::<_, U16>::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":44358,"byte_end":44405,"line_start":415,"line_end":415,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":44410,"byte_end":44413,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.insert(2).unwrap(), true);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":44418,"byte_end":44463,"line_start":417,"line_end":417,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(set.insert(2).unwrap(), false);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":44468,"byte_end":44514,"line_start":418,"line_end":418,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(set.len(), 1);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":44519,"byte_end":44548,"line_start":419,"line_end":419,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":44553,"byte_end":44560,"line_start":420,"line_end":420,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":45322,"byte_end":45328,"line_start":445,"line_end":445,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexSet<T, N, S>>::remove","value":"pub fn remove<Q>(&mut Self, &Q) -> bool where T: Borrow<Q>, Q: ?Sized + Eq +\nHash","parent":null,"children":[],"decl_id":null,"docs":" Removes a value from the set. Returns `true` if the value was present in the set.","sig":null,"attributes":[{"value":"/ Removes a value from the set. Returns `true` if the value was present in the set.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":44751,"byte_end":44836,"line_start":428,"line_end":428,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":44841,"byte_end":44844,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but `Hash` and `Eq` on the","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":44849,"byte_end":44939,"line_start":430,"line_end":430,"column_start":5,"column_end":95}},{"value":"/ borrowed form must match those for the value type.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":44944,"byte_end":44998,"line_start":431,"line_end":431,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":45003,"byte_end":45006,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":45011,"byte_end":45025,"line_start":433,"line_end":433,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":45030,"byte_end":45033,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":45038,"byte_end":45045,"line_start":435,"line_end":435,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":45050,"byte_end":45080,"line_start":436,"line_end":436,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":45085,"byte_end":45113,"line_start":437,"line_end":437,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":45118,"byte_end":45121,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ let mut set = FnvIndexSet::<_, U16>::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":45126,"byte_end":45173,"line_start":439,"line_end":439,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":45178,"byte_end":45181,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ set.insert(2).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":45186,"byte_end":45213,"line_start":441,"line_end":441,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(set.remove(&2), true);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":45218,"byte_end":45255,"line_start":442,"line_end":442,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(set.remove(&2), false);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":45260,"byte_end":45298,"line_start":443,"line_end":443,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":45303,"byte_end":45310,"line_start":444,"line_end":444,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":478},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":47982,"byte_end":47986,"line_start":562,"line_end":562,"column_start":12,"column_end":16},"name":"Iter","qualname":"::indexset::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":481}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":492},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":48344,"byte_end":48354,"line_start":582,"line_end":582,"column_start":12,"column_end":22},"name":"Difference","qualname":"::indexset::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":497},{"krate":0,"index":498}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":506},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":48947,"byte_end":48959,"line_start":610,"line_end":610,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::indexset::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":511},{"krate":0,"index":512}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":557},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":49915,"byte_end":49924,"line_start":16,"line_end":16,"column_start":12,"column_end":21},"name":"LinearMap","qualname":"::linear_map::LinearMap","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed capacity map / dictionary that performs lookups via linear search","sig":null,"attributes":[{"value":"/ A fixed capacity map / dictionary that performs lookups via linear search","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":49728,"byte_end":49805,"line_start":13,"line_end":13,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":49806,"byte_end":49809,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Note that as this map doesn't use hashing so most operations are **O(N)** instead of O(1)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":49810,"byte_end":49903,"line_start":15,"line_end":15,"column_start":1,"column_end":94}}]},{"kind":"Field","id":{"krate":0,"index":562},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":49949,"byte_end":49997,"line_start":16,"line_end":16,"column_start":46,"column_end":94},"name":"0","qualname":"::linear_map::LinearMap::0","value":"i::LinearMap<generic_array::GenericArray<(K, V), N>>","parent":{"krate":0,"index":557},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":565},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":50211,"byte_end":50214,"line_start":24,"line_end":24,"column_start":18,"column_end":21},"name":"new","qualname":"<crate::i::LinearMap<A>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" `LinearMap` `const` constructor; wrap the returned value in\n [`LinearMap`](../struct.LinearMap.html)\n","sig":null,"attributes":[{"value":"/ `LinearMap` `const` constructor; wrap the returned value in","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":50082,"byte_end":50145,"line_start":22,"line_end":22,"column_start":5,"column_end":68}},{"value":"/ [`LinearMap`](../struct.LinearMap.html)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":50150,"byte_end":50193,"line_start":23,"line_end":23,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":50825,"byte_end":50828,"line_start":50,"line_end":50,"column_start":12,"column_end":15},"name":"new","qualname":"<LinearMap<K, V, N>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `LinearMap`","sig":null,"attributes":[{"value":"/ Creates an empty `LinearMap`","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":50387,"byte_end":50419,"line_start":36,"line_end":36,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":50424,"byte_end":50427,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":50432,"byte_end":50446,"line_start":38,"line_end":38,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":50451,"byte_end":50454,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":50459,"byte_end":50466,"line_start":40,"line_end":40,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":50471,"byte_end":50499,"line_start":41,"line_end":41,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":50504,"byte_end":50532,"line_start":42,"line_end":42,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":50537,"byte_end":50540,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ // allocate the map on the stack","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":50545,"byte_end":50581,"line_start":44,"line_end":44,"column_start":5,"column_end":41}},{"value":"/ let mut map: LinearMap<&str, isize, U8> = LinearMap::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":50586,"byte_end":50649,"line_start":45,"line_end":45,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":50654,"byte_end":50657,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ // allocate the map in a static variable","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":50662,"byte_end":50706,"line_start":47,"line_end":47,"column_start":5,"column_end":49}},{"value":"/ static mut MAP: LinearMap<&str, isize, U8> = LinearMap(heapless::i::LinearMap::new());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":50711,"byte_end":50801,"line_start":48,"line_end":48,"column_start":5,"column_end":95}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":50806,"byte_end":50813,"line_start":49,"line_end":49,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51244,"byte_end":51252,"line_start":67,"line_end":67,"column_start":12,"column_end":20},"name":"capacity","qualname":"<LinearMap<K, V, N>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements that the map can hold","sig":null,"attributes":[{"value":"/ Returns the number of elements that the map can hold","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":50898,"byte_end":50954,"line_start":54,"line_end":54,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":50959,"byte_end":50962,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":50967,"byte_end":50996,"line_start":56,"line_end":56,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51001,"byte_end":51004,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51009,"byte_end":51023,"line_start":58,"line_end":58,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51028,"byte_end":51031,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51036,"byte_end":51043,"line_start":60,"line_end":60,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51048,"byte_end":51076,"line_start":61,"line_end":61,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51081,"byte_end":51109,"line_start":62,"line_end":62,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51114,"byte_end":51117,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ let map: LinearMap<&str, isize, U8> = LinearMap::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51122,"byte_end":51181,"line_start":64,"line_end":64,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(map.capacity(), 8);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51186,"byte_end":51220,"line_start":65,"line_end":65,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51225,"byte_end":51232,"line_start":66,"line_end":66,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51691,"byte_end":51696,"line_start":86,"line_end":86,"column_start":12,"column_end":17},"name":"clear","qualname":"<LinearMap<K, V, N>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, removing all key-value pairs","sig":null,"attributes":[{"value":"/ Clears the map, removing all key-value pairs","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51304,"byte_end":51352,"line_start":71,"line_end":71,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51357,"byte_end":51360,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51365,"byte_end":51394,"line_start":73,"line_end":73,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51399,"byte_end":51402,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51407,"byte_end":51421,"line_start":75,"line_end":75,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51426,"byte_end":51429,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51434,"byte_end":51441,"line_start":77,"line_end":77,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51446,"byte_end":51474,"line_start":78,"line_end":78,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51479,"byte_end":51507,"line_start":79,"line_end":79,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51512,"byte_end":51515,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51520,"byte_end":51576,"line_start":81,"line_end":81,"column_start":5,"column_end":61}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51581,"byte_end":51613,"line_start":82,"line_end":82,"column_start":5,"column_end":37}},{"value":"/ map.clear();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51618,"byte_end":51634,"line_start":83,"line_end":83,"column_start":5,"column_end":21}},{"value":"/ assert!(map.is_empty());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51639,"byte_end":51667,"line_start":84,"line_end":84,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51672,"byte_end":51679,"line_start":85,"line_end":85,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":52200,"byte_end":52212,"line_start":105,"line_end":105,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<LinearMap<K, V, N>>::contains_key","value":"pub fn contains_key(&Self, &K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains a value for the specified key.","sig":null,"attributes":[{"value":"/ Returns true if the map contains a value for the specified key.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51751,"byte_end":51818,"line_start":90,"line_end":90,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51823,"byte_end":51826,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(N)** time","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51831,"byte_end":51860,"line_start":92,"line_end":92,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51865,"byte_end":51868,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51873,"byte_end":51887,"line_start":94,"line_end":94,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51892,"byte_end":51895,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51900,"byte_end":51907,"line_start":96,"line_end":96,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51912,"byte_end":51940,"line_start":97,"line_end":97,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51945,"byte_end":51973,"line_start":98,"line_end":98,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51978,"byte_end":51981,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":51986,"byte_end":52042,"line_start":100,"line_end":100,"column_start":5,"column_end":61}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":52047,"byte_end":52079,"line_start":101,"line_end":101,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(map.contains_key(&1), true);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":52084,"byte_end":52127,"line_start":102,"line_end":102,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(map.contains_key(&2), false);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":52132,"byte_end":52176,"line_start":103,"line_end":103,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":52181,"byte_end":52188,"line_start":104,"line_end":104,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":52712,"byte_end":52715,"line_start":124,"line_end":124,"column_start":12,"column_end":15},"name":"get","qualname":"<LinearMap<K, V, N>>::get","value":"pub fn get<Q>(&Self, &Q) -> Option<&V> where K: Borrow<Q>, Q: Eq + ?Sized","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key","sig":null,"attributes":[{"value":"/ Returns a reference to the value corresponding to the key","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":52282,"byte_end":52343,"line_start":109,"line_end":109,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":52348,"byte_end":52351,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(N)** time","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":52356,"byte_end":52385,"line_start":111,"line_end":111,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":52390,"byte_end":52393,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":52398,"byte_end":52412,"line_start":113,"line_end":113,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":52417,"byte_end":52420,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":52425,"byte_end":52432,"line_start":115,"line_end":115,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":52437,"byte_end":52465,"line_start":116,"line_end":116,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":52470,"byte_end":52498,"line_start":117,"line_end":117,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":52503,"byte_end":52506,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":52511,"byte_end":52567,"line_start":119,"line_end":119,"column_start":5,"column_end":61}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":52572,"byte_end":52604,"line_start":120,"line_end":120,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(map.get(&1), Some(&\"a\"));","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":52609,"byte_end":52649,"line_start":121,"line_end":121,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map.get(&2), None);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":52654,"byte_end":52688,"line_start":122,"line_end":122,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":52693,"byte_end":52700,"line_start":123,"line_end":123,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53381,"byte_end":53388,"line_start":151,"line_end":151,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<LinearMap<K, V, N>>::get_mut","value":"pub fn get_mut<Q>(&mut Self, &Q) -> Option<&mut V> where K: Borrow<Q>, Q: Eq +\n?Sized","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the value corresponding to the key","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":52918,"byte_end":52987,"line_start":134,"line_end":134,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":52992,"byte_end":52995,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(N)** time","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53000,"byte_end":53029,"line_start":136,"line_end":136,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53034,"byte_end":53037,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53042,"byte_end":53056,"line_start":138,"line_end":138,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53061,"byte_end":53064,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53069,"byte_end":53076,"line_start":140,"line_end":140,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53081,"byte_end":53109,"line_start":141,"line_end":141,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53114,"byte_end":53142,"line_start":142,"line_end":142,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53147,"byte_end":53150,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53155,"byte_end":53211,"line_start":144,"line_end":144,"column_start":5,"column_end":61}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53216,"byte_end":53248,"line_start":145,"line_end":145,"column_start":5,"column_end":37}},{"value":"/ if let Some(x) = map.get_mut(&1) {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53253,"byte_end":53291,"line_start":146,"line_end":146,"column_start":5,"column_end":43}},{"value":"/     *x = \"b\";","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53296,"byte_end":53313,"line_start":147,"line_end":147,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53318,"byte_end":53323,"line_start":148,"line_end":148,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[&1], \"b\");","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53328,"byte_end":53357,"line_start":149,"line_end":149,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53362,"byte_end":53369,"line_start":150,"line_end":150,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53994,"byte_end":53997,"line_start":176,"line_end":176,"column_start":12,"column_end":15},"name":"len","qualname":"<LinearMap<K, V, N>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in this map","sig":null,"attributes":[{"value":"/ Returns the number of elements in this map","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53603,"byte_end":53649,"line_start":161,"line_end":161,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53654,"byte_end":53657,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53662,"byte_end":53691,"line_start":163,"line_end":163,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53696,"byte_end":53699,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53704,"byte_end":53718,"line_start":165,"line_end":165,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53723,"byte_end":53726,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53731,"byte_end":53738,"line_start":167,"line_end":167,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53743,"byte_end":53771,"line_start":168,"line_end":168,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53776,"byte_end":53804,"line_start":169,"line_end":169,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53809,"byte_end":53812,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ let mut a: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53817,"byte_end":53871,"line_start":171,"line_end":171,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(a.len(), 0);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53876,"byte_end":53903,"line_start":172,"line_end":172,"column_start":5,"column_end":32}},{"value":"/ a.insert(1, \"a\").unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53908,"byte_end":53938,"line_start":173,"line_end":173,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(a.len(), 1);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53943,"byte_end":53970,"line_start":174,"line_end":174,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":53975,"byte_end":53982,"line_start":175,"line_end":175,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":54769,"byte_end":54775,"line_start":202,"line_end":202,"column_start":12,"column_end":18},"name":"insert","qualname":"<LinearMap<K, V, N>>::insert","value":"pub fn insert(&mut Self, K, V) -> Result<Option<V>, (K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.","sig":null,"attributes":[{"value":"/ Inserts a key-value pair into the map.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":54053,"byte_end":54095,"line_start":180,"line_end":180,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":54100,"byte_end":54103,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ If the map did not have this key present, `None` is returned.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":54108,"byte_end":54173,"line_start":182,"line_end":182,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":54178,"byte_end":54181,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ If the map did have this key present, the value is updated, and the old value is returned.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":54186,"byte_end":54280,"line_start":184,"line_end":184,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":54285,"byte_end":54288,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(N)** time","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":54293,"byte_end":54322,"line_start":186,"line_end":186,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":54327,"byte_end":54330,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":54335,"byte_end":54349,"line_start":188,"line_end":188,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":54354,"byte_end":54357,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":54362,"byte_end":54369,"line_start":190,"line_end":190,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":54374,"byte_end":54402,"line_start":191,"line_end":191,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":54407,"byte_end":54435,"line_start":192,"line_end":192,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":54440,"byte_end":54443,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":54448,"byte_end":54504,"line_start":194,"line_end":194,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(map.insert(37, \"a\").unwrap(), None);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":54509,"byte_end":54560,"line_start":195,"line_end":195,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(map.is_empty(), false);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":54565,"byte_end":54603,"line_start":196,"line_end":196,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":54608,"byte_end":54611,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ map.insert(37, \"b\").unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":54616,"byte_end":54649,"line_start":198,"line_end":198,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(map.insert(37, \"c\").unwrap(), Some(\"b\"));","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":54654,"byte_end":54710,"line_start":199,"line_end":199,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(map[&37], \"c\");","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":54715,"byte_end":54745,"line_start":200,"line_end":200,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":54750,"byte_end":54757,"line_start":201,"line_end":201,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55462,"byte_end":55470,"line_start":227,"line_end":227,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<LinearMap<K, V, N>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains no elements","sig":null,"attributes":[{"value":"/ Returns true if the map contains no elements","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55070,"byte_end":55118,"line_start":212,"line_end":212,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55123,"byte_end":55126,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55131,"byte_end":55160,"line_start":214,"line_end":214,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55165,"byte_end":55168,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55173,"byte_end":55187,"line_start":216,"line_end":216,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55192,"byte_end":55195,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55200,"byte_end":55207,"line_start":218,"line_end":218,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55212,"byte_end":55240,"line_start":219,"line_end":219,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55245,"byte_end":55273,"line_start":220,"line_end":220,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55278,"byte_end":55281,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ let mut a: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55286,"byte_end":55340,"line_start":222,"line_end":222,"column_start":5,"column_end":59}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55345,"byte_end":55371,"line_start":223,"line_end":223,"column_start":5,"column_end":31}},{"value":"/ a.insert(1, \"a\").unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55376,"byte_end":55406,"line_start":224,"line_end":224,"column_start":5,"column_end":35}},{"value":"/ assert!(!a.is_empty());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55411,"byte_end":55438,"line_start":225,"line_end":225,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55443,"byte_end":55450,"line_start":226,"line_end":226,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":56012,"byte_end":56016,"line_start":248,"line_end":248,"column_start":12,"column_end":16},"name":"iter","qualname":"<LinearMap<K, V, N>>::iter","value":"pub fn iter(&Self) -> Iter<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order.","sig":null,"attributes":[{"value":"/ An iterator visiting all key-value pairs in arbitrary order.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55523,"byte_end":55587,"line_start":231,"line_end":231,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55592,"byte_end":55595,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55600,"byte_end":55614,"line_start":233,"line_end":233,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55619,"byte_end":55622,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55627,"byte_end":55634,"line_start":235,"line_end":235,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55639,"byte_end":55667,"line_start":236,"line_end":236,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55672,"byte_end":55700,"line_start":237,"line_end":237,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55705,"byte_end":55708,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55713,"byte_end":55769,"line_start":239,"line_end":239,"column_start":5,"column_end":61}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55774,"byte_end":55806,"line_start":240,"line_end":240,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55811,"byte_end":55843,"line_start":241,"line_end":241,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55848,"byte_end":55880,"line_start":242,"line_end":242,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55885,"byte_end":55888,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in map.iter() {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55893,"byte_end":55927,"line_start":244,"line_end":244,"column_start":5,"column_end":39}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55932,"byte_end":55978,"line_start":245,"line_end":245,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55983,"byte_end":55988,"line_start":246,"line_end":246,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":55993,"byte_end":56000,"line_start":247,"line_end":247,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":56770,"byte_end":56778,"line_start":277,"line_end":277,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<LinearMap<K, V, N>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order, with mutable references to the\n values","sig":null,"attributes":[{"value":"/ An iterator visiting all key-value pairs in arbitrary order, with mutable references to the","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":56131,"byte_end":56226,"line_start":254,"line_end":254,"column_start":5,"column_end":100}},{"value":"/ values","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":56231,"byte_end":56241,"line_start":255,"line_end":255,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":56246,"byte_end":56249,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":56254,"byte_end":56268,"line_start":257,"line_end":257,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":56273,"byte_end":56276,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":56281,"byte_end":56288,"line_start":259,"line_end":259,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":56293,"byte_end":56321,"line_start":260,"line_end":260,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":56326,"byte_end":56354,"line_start":261,"line_end":261,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":56359,"byte_end":56362,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":56367,"byte_end":56423,"line_start":263,"line_end":263,"column_start":5,"column_end":61}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":56428,"byte_end":56460,"line_start":264,"line_end":264,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":56465,"byte_end":56497,"line_start":265,"line_end":265,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":56502,"byte_end":56534,"line_start":266,"line_end":266,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":56539,"byte_end":56542,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ // Update all values","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":56547,"byte_end":56571,"line_start":268,"line_end":268,"column_start":5,"column_end":29}},{"value":"/ for (_, val) in map.iter_mut() {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":56576,"byte_end":56612,"line_start":269,"line_end":269,"column_start":5,"column_end":41}},{"value":"/     *val = 2;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":56617,"byte_end":56634,"line_start":270,"line_end":270,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":56639,"byte_end":56644,"line_start":271,"line_end":271,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":56649,"byte_end":56652,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in &map {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":56657,"byte_end":56685,"line_start":273,"line_end":273,"column_start":5,"column_end":33}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":56690,"byte_end":56736,"line_start":274,"line_end":274,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":56741,"byte_end":56746,"line_start":275,"line_end":275,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":56751,"byte_end":56758,"line_start":276,"line_end":276,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57363,"byte_end":57367,"line_start":300,"line_end":300,"column_start":12,"column_end":16},"name":"keys","qualname":"<LinearMap<K, V, N>>::keys","value":"pub fn keys(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all keys in arbitrary order","sig":null,"attributes":[{"value":"/ An iterator visiting all keys in arbitrary order","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":56911,"byte_end":56963,"line_start":283,"line_end":283,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":56968,"byte_end":56971,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":56976,"byte_end":56990,"line_start":285,"line_end":285,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":56995,"byte_end":56998,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57003,"byte_end":57010,"line_start":287,"line_end":287,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57015,"byte_end":57043,"line_start":288,"line_end":288,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57048,"byte_end":57076,"line_start":289,"line_end":289,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57081,"byte_end":57084,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57089,"byte_end":57145,"line_start":291,"line_end":291,"column_start":5,"column_end":61}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57150,"byte_end":57182,"line_start":292,"line_end":292,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57187,"byte_end":57219,"line_start":293,"line_end":293,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57224,"byte_end":57256,"line_start":294,"line_end":294,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57261,"byte_end":57264,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ for key in map.keys() {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57269,"byte_end":57296,"line_start":296,"line_end":296,"column_start":5,"column_end":32}},{"value":"/     println!(\"{}\", key);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57301,"byte_end":57329,"line_start":297,"line_end":297,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57334,"byte_end":57339,"line_start":298,"line_end":298,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57344,"byte_end":57351,"line_start":299,"line_end":299,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57933,"byte_end":57939,"line_start":320,"line_end":320,"column_start":12,"column_end":18},"name":"remove","qualname":"<LinearMap<K, V, N>>::remove","value":"pub fn remove<Q>(&mut Self, &Q) -> Option<V> where K: Borrow<Q>, Q: Eq +\n?Sized","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the value at the key if the key was previously in the\n map","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the value at the key if the key was previously in the","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57452,"byte_end":57547,"line_start":304,"line_end":304,"column_start":5,"column_end":100}},{"value":"/ map","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57552,"byte_end":57559,"line_start":305,"line_end":305,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57564,"byte_end":57567,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(N)** time","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57572,"byte_end":57601,"line_start":307,"line_end":307,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57606,"byte_end":57609,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57614,"byte_end":57628,"line_start":309,"line_end":309,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57633,"byte_end":57636,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57641,"byte_end":57648,"line_start":311,"line_end":311,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57653,"byte_end":57681,"line_start":312,"line_end":312,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57686,"byte_end":57714,"line_start":313,"line_end":313,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57719,"byte_end":57722,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57727,"byte_end":57783,"line_start":315,"line_end":315,"column_start":5,"column_end":61}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57788,"byte_end":57820,"line_start":316,"line_end":316,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(map.remove(&1), Some(\"a\"));","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57825,"byte_end":57867,"line_start":317,"line_end":317,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57872,"byte_end":57909,"line_start":318,"line_end":318,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":57914,"byte_end":57921,"line_start":319,"line_end":319,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":58711,"byte_end":58717,"line_start":351,"line_end":351,"column_start":12,"column_end":18},"name":"values","qualname":"<LinearMap<K, V, N>>::values","value":"pub fn values(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values in arbitrary order","sig":null,"attributes":[{"value":"/ An iterator visiting all values in arbitrary order","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":58255,"byte_end":58309,"line_start":334,"line_end":334,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":58314,"byte_end":58317,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":58322,"byte_end":58336,"line_start":336,"line_end":336,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":58341,"byte_end":58344,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":58349,"byte_end":58356,"line_start":338,"line_end":338,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":58361,"byte_end":58389,"line_start":339,"line_end":339,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":58394,"byte_end":58422,"line_start":340,"line_end":340,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":58427,"byte_end":58430,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":58435,"byte_end":58491,"line_start":342,"line_end":342,"column_start":5,"column_end":61}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":58496,"byte_end":58528,"line_start":343,"line_end":343,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":58533,"byte_end":58565,"line_start":344,"line_end":344,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":58570,"byte_end":58602,"line_start":345,"line_end":345,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":58607,"byte_end":58610,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":58615,"byte_end":58644,"line_start":347,"line_end":347,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":58649,"byte_end":58677,"line_start":348,"line_end":348,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":58682,"byte_end":58687,"line_start":349,"line_end":349,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":58692,"byte_end":58699,"line_start":350,"line_end":350,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":59346,"byte_end":59356,"line_start":376,"line_end":376,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<LinearMap<K, V, N>>::values_mut","value":"pub fn values_mut(&mut Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values mutably in arbitrary order","sig":null,"attributes":[{"value":"/ An iterator visiting all values mutably in arbitrary order","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":58802,"byte_end":58864,"line_start":355,"line_end":355,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":58869,"byte_end":58872,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":58877,"byte_end":58891,"line_start":357,"line_end":357,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":58896,"byte_end":58899,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":58904,"byte_end":58911,"line_start":359,"line_end":359,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":58916,"byte_end":58944,"line_start":360,"line_end":360,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":58949,"byte_end":58977,"line_start":361,"line_end":361,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":58982,"byte_end":58985,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":58990,"byte_end":59046,"line_start":363,"line_end":363,"column_start":5,"column_end":61}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":59051,"byte_end":59083,"line_start":364,"line_end":364,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":59088,"byte_end":59120,"line_start":365,"line_end":365,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":59125,"byte_end":59157,"line_start":366,"line_end":366,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":59162,"byte_end":59165,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ for val in map.values_mut() {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":59170,"byte_end":59203,"line_start":368,"line_end":368,"column_start":5,"column_end":38}},{"value":"/     *val += 10;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":59208,"byte_end":59227,"line_start":369,"line_end":369,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":59232,"byte_end":59237,"line_start":370,"line_end":370,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":59242,"byte_end":59245,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":59250,"byte_end":59279,"line_start":372,"line_end":372,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":59284,"byte_end":59312,"line_start":373,"line_end":373,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":59317,"byte_end":59322,"line_start":374,"line_end":374,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":59327,"byte_end":59334,"line_start":375,"line_end":375,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":638},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":60915,"byte_end":60923,"line_start":454,"line_end":454,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::linear_map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":642}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":664},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":61975,"byte_end":61979,"line_start":505,"line_end":505,"column_start":12,"column_end":16},"name":"Iter","qualname":"::linear_map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":668}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":686},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":62564,"byte_end":62571,"line_start":535,"line_end":535,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::linear_map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":690}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":755},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":64561,"byte_end":64567,"line_start":19,"line_end":19,"column_start":12,"column_end":18},"name":"String","qualname":"::string::String","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed capacity [`String`](https://doc.rust-lang.org/std/string/struct.String.html)\n","sig":null,"attributes":[{"value":"/ A fixed capacity [`String`](https://doc.rust-lang.org/std/string/struct.String.html)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":64461,"byte_end":64549,"line_start":18,"line_end":18,"column_start":1,"column_end":89}}]},{"kind":"Field","id":{"krate":0,"index":758},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":64586,"byte_end":64627,"line_start":19,"line_end":19,"column_start":37,"column_end":78},"name":"0","qualname":"::string::String::0","value":"i::String<generic_array::GenericArray<u8, N>>","parent":{"krate":0,"index":755},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":761},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":64806,"byte_end":64809,"line_start":25,"line_end":25,"column_start":18,"column_end":21},"name":"new","qualname":"<crate::i::String<A>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" `String` `const` constructor; wrap the returned value in [`String`](../struct.String.html)\n","sig":null,"attributes":[{"value":"/ `String` `const` constructor; wrap the returned value in [`String`](../struct.String.html)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":64694,"byte_end":64788,"line_start":24,"line_end":24,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":65421,"byte_end":65424,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"new","qualname":"<String<N>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty `String` with a fixed capacity of `N`","sig":null,"attributes":[{"value":"/ Constructs a new, empty `String` with a fixed capacity of `N`","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":64949,"byte_end":65014,"line_start":36,"line_end":36,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":65019,"byte_end":65022,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":65027,"byte_end":65041,"line_start":38,"line_end":38,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":65046,"byte_end":65049,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":65054,"byte_end":65070,"line_start":40,"line_end":40,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":65075,"byte_end":65078,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":65083,"byte_end":65090,"line_start":42,"line_end":42,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":65095,"byte_end":65120,"line_start":43,"line_end":43,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":65125,"byte_end":65153,"line_start":44,"line_end":44,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":65158,"byte_end":65161,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ // allocate the string on the stack","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":65166,"byte_end":65205,"line_start":46,"line_end":46,"column_start":5,"column_end":44}},{"value":"/ let mut s: String<U4> = String::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":65210,"byte_end":65252,"line_start":47,"line_end":47,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":65257,"byte_end":65260,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ // allocate the string in a static variable","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":65265,"byte_end":65312,"line_start":49,"line_end":49,"column_start":5,"column_end":52}},{"value":"/ static mut S: String<U4> = String(heapless::i::String::new());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":65317,"byte_end":65383,"line_start":50,"line_end":50,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":65388,"byte_end":65395,"line_start":51,"line_end":51,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":65400,"byte_end":65409,"line_start":52,"line_end":52,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":765},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66775,"byte_end":66784,"line_start":99,"line_end":99,"column_start":12,"column_end":21},"name":"from_utf8","qualname":"<String<N>>::from_utf8","value":"pub fn from_utf8(Vec<u8, N>) -> Result<String<N>, Utf8Error>","parent":null,"children":[],"decl_id":null,"docs":" Converts a vector of bytes into a `String`.","sig":null,"attributes":[{"value":"/ Converts a vector of bytes into a `String`.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":65488,"byte_end":65535,"line_start":57,"line_end":57,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":65540,"byte_end":65543,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ A string slice ([`&str`]) is made of bytes ([`u8`]), and a vector of bytes","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":65548,"byte_end":65626,"line_start":59,"line_end":59,"column_start":5,"column_end":83}},{"value":"/ ([`Vec<u8>`]) is made of bytes, so this function converts between the","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":65631,"byte_end":65704,"line_start":60,"line_end":60,"column_start":5,"column_end":78}},{"value":"/ two. Not all byte slices are valid `String`s, however: `String`","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":65709,"byte_end":65776,"line_start":61,"line_end":61,"column_start":5,"column_end":72}},{"value":"/ requires that it is valid UTF-8. `from_utf8()` checks to ensure that","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":65781,"byte_end":65853,"line_start":62,"line_end":62,"column_start":5,"column_end":77}},{"value":"/ the bytes are valid UTF-8, and then does the conversion.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":65858,"byte_end":65918,"line_start":63,"line_end":63,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":65923,"byte_end":65926,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ See std::String for further information.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":65931,"byte_end":65975,"line_start":65,"line_end":65,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":65980,"byte_end":65983,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":65988,"byte_end":66002,"line_start":67,"line_end":67,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66007,"byte_end":66010,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66015,"byte_end":66031,"line_start":69,"line_end":69,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66036,"byte_end":66039,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66044,"byte_end":66051,"line_start":71,"line_end":71,"column_start":5,"column_end":12}},{"value":"/ use heapless::{String, Vec};","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66056,"byte_end":66088,"line_start":72,"line_end":72,"column_start":5,"column_end":37}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66093,"byte_end":66121,"line_start":73,"line_end":73,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66126,"byte_end":66129,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ let mut v: Vec<u8, U8> = Vec::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66134,"byte_end":66174,"line_start":75,"line_end":75,"column_start":5,"column_end":45}},{"value":"/ v.push('a' as u8).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66179,"byte_end":66210,"line_start":76,"line_end":76,"column_start":5,"column_end":36}},{"value":"/ v.push('b' as u8).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66215,"byte_end":66246,"line_start":77,"line_end":77,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66251,"byte_end":66254,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ let s = String::from_utf8(v).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66259,"byte_end":66301,"line_start":79,"line_end":79,"column_start":5,"column_end":47}},{"value":"/ assert!(s.len() == 2);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66306,"byte_end":66332,"line_start":80,"line_end":80,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66337,"byte_end":66344,"line_start":81,"line_end":81,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66349,"byte_end":66352,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ Incorrect bytes:","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66357,"byte_end":66377,"line_start":83,"line_end":83,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66382,"byte_end":66385,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66390,"byte_end":66397,"line_start":85,"line_end":85,"column_start":5,"column_end":12}},{"value":"/ use heapless::{String, Vec};","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66402,"byte_end":66434,"line_start":86,"line_end":86,"column_start":5,"column_end":37}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66439,"byte_end":66467,"line_start":87,"line_end":87,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66472,"byte_end":66475,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ // some invalid bytes, in a vector","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66480,"byte_end":66518,"line_start":89,"line_end":89,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66523,"byte_end":66526,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ let mut v: Vec<u8, U8> = Vec::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66531,"byte_end":66571,"line_start":91,"line_end":91,"column_start":5,"column_end":45}},{"value":"/ v.push(0).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66576,"byte_end":66599,"line_start":92,"line_end":92,"column_start":5,"column_end":28}},{"value":"/ v.push(159).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66604,"byte_end":66629,"line_start":93,"line_end":93,"column_start":5,"column_end":30}},{"value":"/ v.push(146).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66634,"byte_end":66659,"line_start":94,"line_end":94,"column_start":5,"column_end":30}},{"value":"/ v.push(150).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66664,"byte_end":66689,"line_start":95,"line_end":95,"column_start":5,"column_end":30}},{"value":"/ assert!(String::from_utf8(v).is_err());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66694,"byte_end":66737,"line_start":96,"line_end":96,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66742,"byte_end":66749,"line_start":97,"line_end":97,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66754,"byte_end":66763,"line_start":98,"line_end":98,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":67171,"byte_end":67190,"line_start":111,"line_end":111,"column_start":19,"column_end":38},"name":"from_utf8_unchecked","qualname":"<String<N>>::from_utf8_unchecked","value":"pub unsafe fn from_utf8_unchecked(Vec<u8, N>) -> String<N>","parent":null,"children":[],"decl_id":null,"docs":" Converts a vector of bytes to a `String` without checking that the\n string contains valid UTF-8.","sig":null,"attributes":[{"value":"/ Converts a vector of bytes to a `String` without checking that the","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":66962,"byte_end":67032,"line_start":106,"line_end":106,"column_start":5,"column_end":75}},{"value":"/ string contains valid UTF-8.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":67037,"byte_end":67069,"line_start":107,"line_end":107,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":67074,"byte_end":67077,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ See the safe version, `from_utf8`, for more details.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":67082,"byte_end":67138,"line_start":109,"line_end":109,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":67143,"byte_end":67152,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":767},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":67933,"byte_end":67943,"line_start":137,"line_end":137,"column_start":12,"column_end":22},"name":"into_bytes","qualname":"<String<N>>::into_bytes","value":"pub fn into_bytes(Self) -> Vec<u8, N>","parent":null,"children":[],"decl_id":null,"docs":" Converts a `String` into a byte vector.","sig":null,"attributes":[{"value":"/ Converts a `String` into a byte vector.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":67449,"byte_end":67492,"line_start":118,"line_end":118,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":67497,"byte_end":67500,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ This consumes the `String`, so we do not need to copy its contents.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":67505,"byte_end":67576,"line_start":120,"line_end":120,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":67581,"byte_end":67584,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":67589,"byte_end":67603,"line_start":122,"line_end":122,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":67608,"byte_end":67611,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":67616,"byte_end":67632,"line_start":124,"line_end":124,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":67637,"byte_end":67640,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":67645,"byte_end":67652,"line_start":126,"line_end":126,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":67657,"byte_end":67682,"line_start":127,"line_end":127,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":67687,"byte_end":67715,"line_start":128,"line_end":128,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":67720,"byte_end":67723,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ let s: String<U4> = String::from(\"ab\");","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":67728,"byte_end":67771,"line_start":130,"line_end":130,"column_start":5,"column_end":48}},{"value":"/ let b = s.into_bytes();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":67776,"byte_end":67803,"line_start":131,"line_end":131,"column_start":5,"column_end":32}},{"value":"/ assert!(b.len() == 2);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":67808,"byte_end":67834,"line_start":132,"line_end":132,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":67839,"byte_end":67842,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&['a' as u8, 'b' as u8], &b[..]);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":67847,"byte_end":67895,"line_start":134,"line_end":134,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":67900,"byte_end":67907,"line_start":135,"line_end":135,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":67912,"byte_end":67921,"line_start":136,"line_end":136,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68469,"byte_end":68475,"line_start":158,"line_end":158,"column_start":12,"column_end":18},"name":"as_str","qualname":"<String<N>>::as_str","value":"pub fn as_str(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Extracts a string slice containing the entire string.","sig":null,"attributes":[{"value":"/ Extracts a string slice containing the entire string.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68001,"byte_end":68058,"line_start":141,"line_end":141,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68063,"byte_end":68066,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68071,"byte_end":68085,"line_start":143,"line_end":143,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68090,"byte_end":68093,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68098,"byte_end":68114,"line_start":145,"line_end":145,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68119,"byte_end":68122,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68127,"byte_end":68134,"line_start":147,"line_end":147,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68139,"byte_end":68164,"line_start":148,"line_end":148,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68169,"byte_end":68197,"line_start":149,"line_end":149,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68202,"byte_end":68205,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<U4> = String::from(\"ab\");","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68210,"byte_end":68257,"line_start":151,"line_end":151,"column_start":5,"column_end":52}},{"value":"/ assert!(s.as_str() == \"ab\");","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68262,"byte_end":68294,"line_start":152,"line_end":152,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68299,"byte_end":68302,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ let _s = s.as_str();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68307,"byte_end":68331,"line_start":154,"line_end":154,"column_start":5,"column_end":29}},{"value":"/ // s.push('c'); // <- cannot borrow `s` as mutable because it is also borrowed as immutable","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68336,"byte_end":68431,"line_start":155,"line_end":155,"column_start":5,"column_end":100}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68436,"byte_end":68443,"line_start":156,"line_end":156,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68448,"byte_end":68457,"line_start":157,"line_end":157,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":769},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68926,"byte_end":68936,"line_start":177,"line_end":177,"column_start":12,"column_end":22},"name":"as_mut_str","qualname":"<String<N>>::as_mut_str","value":"pub fn as_mut_str(&mut Self) -> &mut str","parent":null,"children":[],"decl_id":null,"docs":" Converts a `String` into a mutable string slice.","sig":null,"attributes":[{"value":"/ Converts a `String` into a mutable string slice.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68571,"byte_end":68623,"line_start":162,"line_end":162,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68628,"byte_end":68631,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68636,"byte_end":68650,"line_start":164,"line_end":164,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68655,"byte_end":68658,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68663,"byte_end":68679,"line_start":166,"line_end":166,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68684,"byte_end":68687,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68692,"byte_end":68699,"line_start":168,"line_end":168,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68704,"byte_end":68729,"line_start":169,"line_end":169,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68734,"byte_end":68762,"line_start":170,"line_end":170,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68767,"byte_end":68770,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<U4> = String::from(\"ab\");","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68775,"byte_end":68822,"line_start":172,"line_end":172,"column_start":5,"column_end":52}},{"value":"/ let s = s.as_mut_str();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68827,"byte_end":68854,"line_start":173,"line_end":173,"column_start":5,"column_end":32}},{"value":"/ s.make_ascii_uppercase();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68859,"byte_end":68888,"line_start":174,"line_end":174,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68893,"byte_end":68900,"line_start":175,"line_end":175,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":68905,"byte_end":68914,"line_start":176,"line_end":176,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":69799,"byte_end":69809,"line_start":205,"line_end":205,"column_start":19,"column_end":29},"name":"as_mut_vec","qualname":"<String<N>>::as_mut_vec","value":"pub unsafe fn as_mut_vec(&mut Self) -> &mut Vec<u8, N>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the contents of this `String`.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the contents of this `String`.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":69048,"byte_end":69113,"line_start":181,"line_end":181,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":69118,"byte_end":69121,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":69126,"byte_end":69138,"line_start":183,"line_end":183,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":69143,"byte_end":69146,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe because it does not check that the bytes passed","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":69151,"byte_end":69226,"line_start":185,"line_end":185,"column_start":5,"column_end":80}},{"value":"/ to it are valid UTF-8. If this constraint is violated, it may cause","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":69231,"byte_end":69302,"line_start":186,"line_end":186,"column_start":5,"column_end":76}},{"value":"/ memory unsafety issues with future users of the `String`, as the rest of","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":69307,"byte_end":69383,"line_start":187,"line_end":187,"column_start":5,"column_end":81}},{"value":"/ the library assumes that `String`s are valid UTF-8.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":69388,"byte_end":69443,"line_start":188,"line_end":188,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":69448,"byte_end":69451,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":69456,"byte_end":69470,"line_start":190,"line_end":190,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":69475,"byte_end":69478,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":69483,"byte_end":69499,"line_start":192,"line_end":192,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":69504,"byte_end":69507,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":69512,"byte_end":69519,"line_start":194,"line_end":194,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"hello\");","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":69524,"byte_end":69562,"line_start":195,"line_end":195,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":69567,"byte_end":69570,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ unsafe {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":69575,"byte_end":69587,"line_start":197,"line_end":197,"column_start":5,"column_end":17}},{"value":"/     let vec = s.as_mut_vec();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":69592,"byte_end":69625,"line_start":198,"line_end":198,"column_start":5,"column_end":38}},{"value":"/     assert_eq!(&[104, 101, 108, 108, 111][..], &vec[..]);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":69630,"byte_end":69691,"line_start":199,"line_end":199,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":69696,"byte_end":69699,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/     vec.reverse();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":69704,"byte_end":69726,"line_start":201,"line_end":201,"column_start":5,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":69731,"byte_end":69736,"line_start":202,"line_end":202,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(s, \"olleh\");","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":69741,"byte_end":69768,"line_start":203,"line_end":203,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":69773,"byte_end":69780,"line_start":204,"line_end":204,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":771},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70397,"byte_end":70405,"line_start":228,"line_end":228,"column_start":12,"column_end":20},"name":"push_str","qualname":"<String<N>>::push_str","value":"pub fn push_str(&mut Self, &str) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Appends a given string slice onto the end of this `String`.","sig":null,"attributes":[{"value":"/ Appends a given string slice onto the end of this `String`.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":69947,"byte_end":70010,"line_start":209,"line_end":209,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70015,"byte_end":70018,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70023,"byte_end":70037,"line_start":211,"line_end":211,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70042,"byte_end":70045,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70050,"byte_end":70066,"line_start":213,"line_end":213,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70071,"byte_end":70074,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70079,"byte_end":70086,"line_start":215,"line_end":215,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70091,"byte_end":70116,"line_start":216,"line_end":216,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70121,"byte_end":70149,"line_start":217,"line_end":217,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70154,"byte_end":70157,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<U8> = String::from(\"foo\");","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70162,"byte_end":70210,"line_start":219,"line_end":219,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70215,"byte_end":70218,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ assert!(s.push_str(\"bar\").is_ok());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70223,"byte_end":70262,"line_start":221,"line_end":221,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70267,"byte_end":70270,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"foobar\", s);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70275,"byte_end":70303,"line_start":223,"line_end":223,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70308,"byte_end":70311,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ assert!(s.push_str(\"tender\").is_err());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70316,"byte_end":70359,"line_start":225,"line_end":225,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70364,"byte_end":70371,"line_start":226,"line_end":226,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70376,"byte_end":70385,"line_start":227,"line_end":227,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70848,"byte_end":70856,"line_start":246,"line_end":246,"column_start":12,"column_end":20},"name":"capacity","qualname":"<String<N>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum number of elements the String can hold","sig":null,"attributes":[{"value":"/ Returns the maximum number of elements the String can hold","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70518,"byte_end":70580,"line_start":232,"line_end":232,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70585,"byte_end":70588,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70593,"byte_end":70607,"line_start":234,"line_end":234,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70612,"byte_end":70615,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70620,"byte_end":70636,"line_start":236,"line_end":236,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70641,"byte_end":70644,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70649,"byte_end":70656,"line_start":238,"line_end":238,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70661,"byte_end":70686,"line_start":239,"line_end":239,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70691,"byte_end":70719,"line_start":240,"line_end":240,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70724,"byte_end":70727,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<U4> = String::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70732,"byte_end":70774,"line_start":242,"line_end":242,"column_start":5,"column_end":47}},{"value":"/ assert!(s.capacity() == 4);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70779,"byte_end":70810,"line_start":243,"line_end":243,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70815,"byte_end":70822,"line_start":244,"line_end":244,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70827,"byte_end":70836,"line_start":245,"line_end":245,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":773},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":71457,"byte_end":71461,"line_start":273,"line_end":273,"column_start":12,"column_end":16},"name":"push","qualname":"<String<N>>::push","value":"pub fn push(&mut Self, char) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Appends the given [`char`] to the end of this `String`.","sig":null,"attributes":[{"value":"/ Appends the given [`char`] to the end of this `String`.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70916,"byte_end":70975,"line_start":250,"line_end":250,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70980,"byte_end":70983,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ [`char`]: ../../std/primitive.char.html","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":70988,"byte_end":71031,"line_start":252,"line_end":252,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":71036,"byte_end":71039,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":71044,"byte_end":71058,"line_start":254,"line_end":254,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":71063,"byte_end":71066,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":71071,"byte_end":71087,"line_start":256,"line_end":256,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":71092,"byte_end":71095,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":71100,"byte_end":71107,"line_start":258,"line_end":258,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":71112,"byte_end":71137,"line_start":259,"line_end":259,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":71142,"byte_end":71170,"line_start":260,"line_end":260,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":71175,"byte_end":71178,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<U8> = String::from(\"abc\");","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":71183,"byte_end":71231,"line_start":262,"line_end":262,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":71236,"byte_end":71239,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ s.push('1').unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":71244,"byte_end":71269,"line_start":264,"line_end":264,"column_start":5,"column_end":30}},{"value":"/ s.push('2').unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":71274,"byte_end":71299,"line_start":265,"line_end":265,"column_start":5,"column_end":30}},{"value":"/ s.push('3').unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":71304,"byte_end":71329,"line_start":266,"line_end":266,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":71334,"byte_end":71337,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ assert!(\"abc123\" == s.as_str());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":71342,"byte_end":71378,"line_start":268,"line_end":268,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":71383,"byte_end":71386,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"abc123\", s);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":71391,"byte_end":71419,"line_start":270,"line_end":270,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":71424,"byte_end":71431,"line_start":271,"line_end":271,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":71436,"byte_end":71445,"line_start":272,"line_end":272,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":776},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72463,"byte_end":72471,"line_start":312,"line_end":312,"column_start":12,"column_end":20},"name":"truncate","qualname":"<String<N>>::truncate","value":"pub fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shortens this `String` to the specified length.","sig":null,"attributes":[{"value":"/ Shortens this `String` to the specified length.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":71748,"byte_end":71799,"line_start":283,"line_end":283,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":71804,"byte_end":71807,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ If `new_len` is greater than the string's current length, this has no","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":71812,"byte_end":71885,"line_start":285,"line_end":285,"column_start":5,"column_end":78}},{"value":"/ effect.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":71890,"byte_end":71901,"line_start":286,"line_end":286,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":71906,"byte_end":71909,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ Note that this method has no effect on the allocated capacity","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":71914,"byte_end":71979,"line_start":288,"line_end":288,"column_start":5,"column_end":70}},{"value":"/ of the string","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":71984,"byte_end":72001,"line_start":289,"line_end":289,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72006,"byte_end":72009,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72014,"byte_end":72026,"line_start":291,"line_end":291,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72031,"byte_end":72034,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ Panics if `new_len` does not lie on a [`char`] boundary.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72039,"byte_end":72099,"line_start":293,"line_end":293,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72104,"byte_end":72107,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ [`char`]: ../../std/primitive.char.html","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72112,"byte_end":72155,"line_start":295,"line_end":295,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72160,"byte_end":72163,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72168,"byte_end":72182,"line_start":297,"line_end":297,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72187,"byte_end":72190,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72195,"byte_end":72211,"line_start":299,"line_end":299,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72216,"byte_end":72219,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72224,"byte_end":72231,"line_start":301,"line_end":301,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72236,"byte_end":72261,"line_start":302,"line_end":302,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72266,"byte_end":72294,"line_start":303,"line_end":303,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72299,"byte_end":72302,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<U8> = String::from(\"hello\");","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72307,"byte_end":72357,"line_start":305,"line_end":305,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72362,"byte_end":72365,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ s.truncate(2);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72370,"byte_end":72388,"line_start":307,"line_end":307,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72393,"byte_end":72396,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"he\", s);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72401,"byte_end":72425,"line_start":309,"line_end":309,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72430,"byte_end":72437,"line_start":310,"line_end":310,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72442,"byte_end":72451,"line_start":311,"line_end":311,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":777},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":73248,"byte_end":73251,"line_start":341,"line_end":341,"column_start":12,"column_end":15},"name":"pop","qualname":"<String<N>>::pop","value":"pub fn pop(&mut Self) -> Option<char>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last character from the string buffer and returns it.","sig":null,"attributes":[{"value":"/ Removes the last character from the string buffer and returns it.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72651,"byte_end":72720,"line_start":319,"line_end":319,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72725,"byte_end":72728,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ Returns [`None`] if this `String` is empty.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72733,"byte_end":72780,"line_start":321,"line_end":321,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72785,"byte_end":72788,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ [`None`]: ../../std/option/enum.Option.html#variant.None","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72793,"byte_end":72853,"line_start":323,"line_end":323,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72858,"byte_end":72861,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72866,"byte_end":72880,"line_start":325,"line_end":325,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72885,"byte_end":72888,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72893,"byte_end":72909,"line_start":327,"line_end":327,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72914,"byte_end":72917,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72922,"byte_end":72929,"line_start":329,"line_end":329,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72934,"byte_end":72959,"line_start":330,"line_end":330,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72964,"byte_end":72992,"line_start":331,"line_end":331,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":72997,"byte_end":73000,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<U8> = String::from(\"foo\");","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":73005,"byte_end":73053,"line_start":333,"line_end":333,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":73058,"byte_end":73061,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s.pop(), Some('o'));","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":73066,"byte_end":73101,"line_start":335,"line_end":335,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(s.pop(), Some('o'));","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":73106,"byte_end":73141,"line_start":336,"line_end":336,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(s.pop(), Some('f'));","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":73146,"byte_end":73181,"line_start":337,"line_end":337,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":73186,"byte_end":73189,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s.pop(), None);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":73194,"byte_end":73224,"line_start":339,"line_end":339,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":73229,"byte_end":73236,"line_start":340,"line_end":340,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":778},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":74064,"byte_end":74069,"line_start":376,"line_end":376,"column_start":12,"column_end":17},"name":"clear","qualname":"<String<N>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Truncates this `String`, removing all contents.","sig":null,"attributes":[{"value":"/ Truncates this `String`, removing all contents.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":73526,"byte_end":73577,"line_start":354,"line_end":354,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":73582,"byte_end":73585,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ While this means the `String` will have a length of zero, it does not","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":73590,"byte_end":73663,"line_start":356,"line_end":356,"column_start":5,"column_end":78}},{"value":"/ touch its capacity.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":73668,"byte_end":73691,"line_start":357,"line_end":357,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":73696,"byte_end":73699,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":73704,"byte_end":73718,"line_start":359,"line_end":359,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":73723,"byte_end":73726,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":73731,"byte_end":73747,"line_start":361,"line_end":361,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":73752,"byte_end":73755,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":73760,"byte_end":73767,"line_start":363,"line_end":363,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":73772,"byte_end":73797,"line_start":364,"line_end":364,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":73802,"byte_end":73830,"line_start":365,"line_end":365,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":73835,"byte_end":73838,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<U8> = String::from(\"foo\");","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":73843,"byte_end":73891,"line_start":367,"line_end":367,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":73896,"byte_end":73899,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ s.clear();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":73904,"byte_end":73918,"line_start":369,"line_end":369,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":73923,"byte_end":73926,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ assert!(s.is_empty());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":73931,"byte_end":73957,"line_start":371,"line_end":371,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(0, s.len());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":73962,"byte_end":73989,"line_start":372,"line_end":372,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(8, s.capacity());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":73994,"byte_end":74026,"line_start":373,"line_end":373,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":74031,"byte_end":74038,"line_start":374,"line_end":374,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":74043,"byte_end":74052,"line_start":375,"line_end":375,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":84093,"byte_end":84096,"line_start":8,"line_end":8,"column_start":18,"column_end":21},"name":"new","qualname":"<crate::i::Vec<A>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" `Vec` `const` constructor; wrap the returned value in [`Vec`](../struct.Vec.html)\n","sig":null,"attributes":[{"value":"/ `Vec` `const` constructor; wrap the returned value in [`Vec`](../struct.Vec.html)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":83990,"byte_end":84075,"line_start":7,"line_end":7,"column_start":5,"column_end":90}}]},{"kind":"Struct","id":{"krate":0,"index":889},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88311,"byte_end":88314,"line_start":165,"line_end":165,"column_start":12,"column_end":15},"name":"Vec","qualname":"::vec::Vec","value":"","parent":null,"children":[],"decl_id":null,"docs":" A fixed capacity [`Vec`](https://doc.rust-lang.org/std/vec/struct.Vec.html)","sig":null,"attributes":[{"value":"/ A fixed capacity [`Vec`](https://doc.rust-lang.org/std/vec/struct.Vec.html)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":87581,"byte_end":87660,"line_start":134,"line_end":134,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":87661,"byte_end":87664,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":87665,"byte_end":87679,"line_start":136,"line_end":136,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":87680,"byte_end":87683,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":87684,"byte_end":87691,"line_start":138,"line_end":138,"column_start":1,"column_end":8}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":87692,"byte_end":87714,"line_start":139,"line_end":139,"column_start":1,"column_end":23}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":87715,"byte_end":87743,"line_start":140,"line_end":140,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":87744,"byte_end":87747,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ // A vector with a fixed capacity of 8 elements allocated on the stack","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":87748,"byte_end":87822,"line_start":142,"line_end":142,"column_start":1,"column_end":75}},{"value":"/ let mut vec = Vec::<_, U8>::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":87823,"byte_end":87861,"line_start":143,"line_end":143,"column_start":1,"column_end":39}},{"value":"/ vec.push(1);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":87862,"byte_end":87878,"line_start":144,"line_end":144,"column_start":1,"column_end":17}},{"value":"/ vec.push(2);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":87879,"byte_end":87895,"line_start":145,"line_end":145,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":87896,"byte_end":87899,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(vec.len(), 2);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":87900,"byte_end":87929,"line_start":147,"line_end":147,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(vec[0], 1);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":87930,"byte_end":87956,"line_start":148,"line_end":148,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":87957,"byte_end":87960,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(vec.pop(), Some(2));","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":87961,"byte_end":87996,"line_start":150,"line_end":150,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(vec.len(), 1);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":87997,"byte_end":88026,"line_start":151,"line_end":151,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88027,"byte_end":88030,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ vec[0] = 7;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88031,"byte_end":88046,"line_start":153,"line_end":153,"column_start":1,"column_end":16}},{"value":"/ assert_eq!(vec[0], 7);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88047,"byte_end":88073,"line_start":154,"line_end":154,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88074,"byte_end":88077,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ vec.extend([1, 2, 3].iter().cloned());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88078,"byte_end":88120,"line_start":156,"line_end":156,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88121,"byte_end":88124,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ for x in &vec {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88125,"byte_end":88144,"line_start":158,"line_end":158,"column_start":1,"column_end":20}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88145,"byte_end":88171,"line_start":159,"line_end":159,"column_start":1,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88172,"byte_end":88177,"line_start":160,"line_end":160,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(vec, [7, 1, 2, 3]);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88178,"byte_end":88212,"line_start":161,"line_end":161,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88213,"byte_end":88220,"line_start":162,"line_end":162,"column_start":1,"column_end":8}},{"value":"repr(transparent)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88279,"byte_end":88299,"line_start":164,"line_end":164,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":893},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88336,"byte_end":88373,"line_start":165,"line_end":165,"column_start":37,"column_end":74},"name":"0","qualname":"::vec::Vec::0","value":"i::Vec<generic_array::GenericArray<T, N>>","parent":{"krate":0,"index":889},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":901},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":89046,"byte_end":89049,"line_start":198,"line_end":198,"column_start":12,"column_end":15},"name":"new","qualname":"<Vec<T, N>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty vector with a fixed capacity of `N`","sig":null,"attributes":[{"value":"/ Constructs a new, empty vector with a fixed capacity of `N`","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88627,"byte_end":88690,"line_start":184,"line_end":184,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88695,"byte_end":88698,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88703,"byte_end":88717,"line_start":186,"line_end":186,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88722,"byte_end":88725,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88730,"byte_end":88737,"line_start":188,"line_end":188,"column_start":5,"column_end":12}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88742,"byte_end":88764,"line_start":189,"line_end":189,"column_start":5,"column_end":27}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88769,"byte_end":88797,"line_start":190,"line_end":190,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88802,"byte_end":88805,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ // allocate the vector on the stack","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88810,"byte_end":88849,"line_start":192,"line_end":192,"column_start":5,"column_end":44}},{"value":"/ let mut x: Vec<u8, U16> = Vec::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88854,"byte_end":88895,"line_start":193,"line_end":193,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88900,"byte_end":88903,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ // allocate the vector in a static variable","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88908,"byte_end":88955,"line_start":195,"line_end":195,"column_start":5,"column_end":52}},{"value":"/ static mut X: Vec<u8, U16> = Vec(heapless::i::Vec::new());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88960,"byte_end":89022,"line_start":196,"line_end":196,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":89027,"byte_end":89034,"line_start":197,"line_end":197,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":89489,"byte_end":89499,"line_start":215,"line_end":215,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<Vec<T, N>>::from_slice","value":"pub fn from_slice(&[T]) -> Result<Self, ()> where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new vector with a fixed capacity of `N` and fills it\n with the provided slice.","sig":null,"attributes":[{"value":"/ Constructs a new vector with a fixed capacity of `N` and fills it","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":89107,"byte_end":89176,"line_start":202,"line_end":202,"column_start":5,"column_end":74}},{"value":"/ with the provided slice.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":89181,"byte_end":89209,"line_start":203,"line_end":203,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":89214,"byte_end":89217,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to the following code:","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":89222,"byte_end":89267,"line_start":205,"line_end":205,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":89272,"byte_end":89275,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":89280,"byte_end":89287,"line_start":207,"line_end":207,"column_start":5,"column_end":12}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":89292,"byte_end":89314,"line_start":208,"line_end":208,"column_start":5,"column_end":27}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":89319,"byte_end":89347,"line_start":209,"line_end":209,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":89352,"byte_end":89355,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ let mut v: Vec<u8, U16> = Vec::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":89360,"byte_end":89401,"line_start":211,"line_end":211,"column_start":5,"column_end":46}},{"value":"/ v.extend_from_slice(&[1, 2, 3]).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":89406,"byte_end":89451,"line_start":212,"line_end":212,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":89456,"byte_end":89463,"line_start":213,"line_end":213,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":89468,"byte_end":89477,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":903},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":89756,"byte_end":89764,"line_start":226,"line_end":226,"column_start":12,"column_end":20},"name":"capacity","qualname":"<Vec<T, N>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum number of elements the vector can hold\n","sig":null,"attributes":[{"value":"/ Returns the maximum number of elements the vector can hold","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":89682,"byte_end":89744,"line_start":225,"line_end":225,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":904},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":89875,"byte_end":89880,"line_start":231,"line_end":231,"column_start":12,"column_end":17},"name":"clear","qualname":"<Vec<T, N>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the vector, removing all values.\n","sig":null,"attributes":[{"value":"/ Clears the vector, removing all values.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":89820,"byte_end":89863,"line_start":230,"line_end":230,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":905},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":90448,"byte_end":90465,"line_start":251,"line_end":251,"column_start":12,"column_end":29},"name":"extend_from_slice","qualname":"<Vec<T, N>>::extend_from_slice","value":"pub fn extend_from_slice(&mut Self, &[T]) -> Result<(), ()> where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Clones and appends all elements in a slice to the `Vec`.","sig":null,"attributes":[{"value":"/ Clones and appends all elements in a slice to the `Vec`.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":89928,"byte_end":89988,"line_start":235,"line_end":235,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":89993,"byte_end":89996,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ Iterates over the slice `other`, clones each element, and then appends","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":90001,"byte_end":90075,"line_start":237,"line_end":237,"column_start":5,"column_end":79}},{"value":"/ it to this `Vec`. The `other` vector is traversed in-order.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":90080,"byte_end":90143,"line_start":238,"line_end":238,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":90148,"byte_end":90151,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":90156,"byte_end":90170,"line_start":240,"line_end":240,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":90175,"byte_end":90178,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":90183,"byte_end":90190,"line_start":242,"line_end":242,"column_start":5,"column_end":12}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":90195,"byte_end":90217,"line_start":243,"line_end":243,"column_start":5,"column_end":27}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":90222,"byte_end":90250,"line_start":244,"line_end":244,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":90255,"byte_end":90258,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ let mut vec = Vec::<u8, U8>::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":90263,"byte_end":90302,"line_start":246,"line_end":246,"column_start":5,"column_end":44}},{"value":"/ vec.push(1).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":90307,"byte_end":90332,"line_start":247,"line_end":247,"column_start":5,"column_end":30}},{"value":"/ vec.extend_from_slice(&[2, 3, 4]).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":90337,"byte_end":90384,"line_start":248,"line_end":248,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(*vec, [1, 2, 3, 4]);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":90389,"byte_end":90424,"line_start":249,"line_end":249,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":90429,"byte_end":90436,"line_start":250,"line_end":250,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":906},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":90686,"byte_end":90689,"line_start":259,"line_end":259,"column_start":12,"column_end":15},"name":"pop","qualname":"<Vec<T, N>>::pop","value":"pub fn pop(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last element from a vector and return it, or `None` if it's empty\n","sig":null,"attributes":[{"value":"/ Removes the last element from a vector and return it, or `None` if it's empty","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":90593,"byte_end":90674,"line_start":258,"line_end":258,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":907},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":90977,"byte_end":90981,"line_start":270,"line_end":270,"column_start":12,"column_end":16},"name":"push","qualname":"<Vec<T, N>>::push","value":"pub fn push(&mut Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Appends an `item` to the back of the collection","sig":null,"attributes":[{"value":"/ Appends an `item` to the back of the collection","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":90852,"byte_end":90903,"line_start":267,"line_end":267,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":90908,"byte_end":90911,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ Returns back the `item` if the vector is full","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":90916,"byte_end":90965,"line_start":269,"line_end":269,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":91255,"byte_end":91263,"line_start":279,"line_end":279,"column_start":12,"column_end":20},"name":"truncate","qualname":"<Vec<T, N>>::truncate","value":"pub fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shortens the vector, keeping the first `len` elements and dropping the rest.\n","sig":null,"attributes":[{"value":"/ Shortens the vector, keeping the first `len` elements and dropping the rest.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":91163,"byte_end":91243,"line_start":278,"line_end":278,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":910},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":92054,"byte_end":92060,"line_start":299,"line_end":299,"column_start":12,"column_end":18},"name":"resize","qualname":"<Vec<T, N>>::resize","value":"pub fn resize(&mut Self, usize, T) -> Result<(), ()> where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Resizes the Vec in-place so that len is equal to new_len.","sig":null,"attributes":[{"value":"/ Resizes the Vec in-place so that len is equal to new_len.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":91691,"byte_end":91752,"line_start":292,"line_end":292,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":91757,"byte_end":91760,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ If new_len is greater than len, the Vec is extended by the","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":91765,"byte_end":91827,"line_start":294,"line_end":294,"column_start":5,"column_end":67}},{"value":"/ difference, with each additional slot filled with value. If","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":91832,"byte_end":91895,"line_start":295,"line_end":295,"column_start":5,"column_end":68}},{"value":"/ new_len is less than len, the Vec is simply truncated.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":91900,"byte_end":91958,"line_start":296,"line_end":296,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":91963,"byte_end":91966,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ See also [`resize_default`](struct.Vec.html#method.resize_default).","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":91971,"byte_end":92042,"line_start":298,"line_end":298,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":911},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":92834,"byte_end":92848,"line_start":325,"line_end":325,"column_start":12,"column_end":26},"name":"resize_default","qualname":"<Vec<T, N>>::resize_default","value":"pub fn resize_default(&mut Self, usize) -> Result<(), ()> where T: Clone +\nDefault","parent":null,"children":[],"decl_id":null,"docs":" Resizes the `Vec` in-place so that `len` is equal to `new_len`.","sig":null,"attributes":[{"value":"/ Resizes the `Vec` in-place so that `len` is equal to `new_len`.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":92454,"byte_end":92521,"line_start":318,"line_end":318,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":92526,"byte_end":92529,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ If `new_len` is greater than `len`, the `Vec` is extended by the","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":92534,"byte_end":92602,"line_start":320,"line_end":320,"column_start":5,"column_end":73}},{"value":"/ difference, with each additional slot filled with `Default::default()`.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":92607,"byte_end":92682,"line_start":321,"line_end":321,"column_start":5,"column_end":80}},{"value":"/ If `new_len` is less than `len`, the `Vec` is simply truncated.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":92687,"byte_end":92754,"line_start":322,"line_end":322,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":92759,"byte_end":92762,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ See also [`resize`](struct.Vec.html#method.resize).","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":92767,"byte_end":92822,"line_start":324,"line_end":324,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":912},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96424,"byte_end":96431,"line_start":423,"line_end":423,"column_start":19,"column_end":26},"name":"set_len","qualname":"<Vec<T, N>>::set_len","value":"pub unsafe fn set_len(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Forces the length of the vector to `new_len`.","sig":null,"attributes":[{"value":"/ Forces the length of the vector to `new_len`.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":92992,"byte_end":93041,"line_start":332,"line_end":332,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":93046,"byte_end":93049,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ This is a low-level operation that maintains none of the normal","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":93054,"byte_end":93121,"line_start":334,"line_end":334,"column_start":5,"column_end":72}},{"value":"/ invariants of the type. Normally changing the length of a vector","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":93126,"byte_end":93194,"line_start":335,"line_end":335,"column_start":5,"column_end":73}},{"value":"/ is done using one of the safe operations instead, such as","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":93199,"byte_end":93260,"line_start":336,"line_end":336,"column_start":5,"column_end":66}},{"value":"/ [`truncate`], [`resize`], [`extend`], or [`clear`].","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":93265,"byte_end":93320,"line_start":337,"line_end":337,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":93325,"byte_end":93328,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ [`truncate`]: #method.truncate","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":93333,"byte_end":93367,"line_start":339,"line_end":339,"column_start":5,"column_end":39}},{"value":"/ [`resize`]: #method.resize","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":93372,"byte_end":93402,"line_start":340,"line_end":340,"column_start":5,"column_end":35}},{"value":"/ [`extend`]: https://doc.rust-lang.org/stable/core/iter/trait.Extend.html#tymethod.extend","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":93407,"byte_end":93499,"line_start":341,"line_end":341,"column_start":5,"column_end":97}},{"value":"/ [`clear`]: #method.clear","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":93504,"byte_end":93532,"line_start":342,"line_end":342,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":93537,"byte_end":93540,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":93545,"byte_end":93557,"line_start":344,"line_end":344,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":93562,"byte_end":93565,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ - `new_len` must be less than or equal to [`capacity()`].","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":93570,"byte_end":93631,"line_start":346,"line_end":346,"column_start":5,"column_end":66}},{"value":"/ - The elements at `old_len..new_len` must be initialized.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":93636,"byte_end":93697,"line_start":347,"line_end":347,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":93702,"byte_end":93705,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ [`capacity()`]: #method.capacity","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":93710,"byte_end":93746,"line_start":349,"line_end":349,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":93751,"byte_end":93754,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":93759,"byte_end":93773,"line_start":351,"line_end":351,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":93778,"byte_end":93781,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ This method can be useful for situations in which the vector","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":93786,"byte_end":93850,"line_start":353,"line_end":353,"column_start":5,"column_end":69}},{"value":"/ is serving as a buffer for other code, particularly over FFI:","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":93855,"byte_end":93920,"line_start":354,"line_end":354,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":93925,"byte_end":93928,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":93933,"byte_end":93946,"line_start":356,"line_end":356,"column_start":5,"column_end":18}},{"value":"/ # #![allow(dead_code)]","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":93951,"byte_end":93977,"line_start":357,"line_end":357,"column_start":5,"column_end":31}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":93982,"byte_end":94004,"line_start":358,"line_end":358,"column_start":5,"column_end":27}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":94009,"byte_end":94037,"line_start":359,"line_end":359,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":94042,"byte_end":94045,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ # // This is just a minimal skeleton for the doc example;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":94050,"byte_end":94111,"line_start":361,"line_end":361,"column_start":5,"column_end":66}},{"value":"/ # // don't use this as a starting point for a real library.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":94116,"byte_end":94179,"line_start":362,"line_end":362,"column_start":5,"column_end":68}},{"value":"/ # pub struct StreamWrapper { strm: *mut core::ffi::c_void }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":94184,"byte_end":94247,"line_start":363,"line_end":363,"column_start":5,"column_end":68}},{"value":"/ # const Z_OK: i32 = 0;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":94252,"byte_end":94278,"line_start":364,"line_end":364,"column_start":5,"column_end":31}},{"value":"/ # extern \"C\" {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":94283,"byte_end":94301,"line_start":365,"line_end":365,"column_start":5,"column_end":23}},{"value":"/ #     fn deflateGetDictionary(","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":94306,"byte_end":94340,"line_start":366,"line_end":366,"column_start":5,"column_end":39}},{"value":"/ #         strm: *mut core::ffi::c_void,","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":94345,"byte_end":94388,"line_start":367,"line_end":367,"column_start":5,"column_end":48}},{"value":"/ #         dictionary: *mut u8,","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":94393,"byte_end":94427,"line_start":368,"line_end":368,"column_start":5,"column_end":39}},{"value":"/ #         dictLength: *mut usize,","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":94432,"byte_end":94469,"line_start":369,"line_end":369,"column_start":5,"column_end":42}},{"value":"/ #     ) -> i32;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":94474,"byte_end":94493,"line_start":370,"line_end":370,"column_start":5,"column_end":24}},{"value":"/ # }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":94498,"byte_end":94505,"line_start":371,"line_end":371,"column_start":5,"column_end":12}},{"value":"/ # impl StreamWrapper {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":94510,"byte_end":94536,"line_start":372,"line_end":372,"column_start":5,"column_end":31}},{"value":"/ pub fn get_dictionary(&self) -> Option<Vec<u8, U32768>> {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":94541,"byte_end":94602,"line_start":373,"line_end":373,"column_start":5,"column_end":66}},{"value":"/     // Per the FFI method's docs, \"32768 bytes is always enough\".","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":94607,"byte_end":94676,"line_start":374,"line_end":374,"column_start":5,"column_end":74}},{"value":"/     let mut dict = Vec::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":94681,"byte_end":94715,"line_start":375,"line_end":375,"column_start":5,"column_end":39}},{"value":"/     let mut dict_length = 0;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":94720,"byte_end":94752,"line_start":376,"line_end":376,"column_start":5,"column_end":37}},{"value":"/     // SAFETY: When `deflateGetDictionary` returns `Z_OK`, it holds that:","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":94757,"byte_end":94834,"line_start":377,"line_end":377,"column_start":5,"column_end":82}},{"value":"/     // 1. `dict_length` elements were initialized.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":94839,"byte_end":94893,"line_start":378,"line_end":378,"column_start":5,"column_end":59}},{"value":"/     // 2. `dict_length` <= the capacity (32_768)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":94898,"byte_end":94950,"line_start":379,"line_end":379,"column_start":5,"column_end":57}},{"value":"/     // which makes `set_len` safe to call.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":94955,"byte_end":95001,"line_start":380,"line_end":380,"column_start":5,"column_end":51}},{"value":"/     unsafe {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":95006,"byte_end":95022,"line_start":381,"line_end":381,"column_start":5,"column_end":21}},{"value":"/         // Make the FFI call...","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":95027,"byte_end":95062,"line_start":382,"line_end":382,"column_start":5,"column_end":40}},{"value":"/         let r = deflateGetDictionary(self.strm, dict.as_mut_ptr(), &mut dict_length);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":95067,"byte_end":95156,"line_start":383,"line_end":383,"column_start":5,"column_end":94}},{"value":"/         if r == Z_OK {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":95161,"byte_end":95187,"line_start":384,"line_end":384,"column_start":5,"column_end":31}},{"value":"/             // ...and update the length to what was initialized.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":95192,"byte_end":95260,"line_start":385,"line_end":385,"column_start":5,"column_end":73}},{"value":"/             dict.set_len(dict_length);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":95265,"byte_end":95307,"line_start":386,"line_end":386,"column_start":5,"column_end":47}},{"value":"/             Some(dict)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":95312,"byte_end":95338,"line_start":387,"line_end":387,"column_start":5,"column_end":31}},{"value":"/         } else {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":95343,"byte_end":95363,"line_start":388,"line_end":388,"column_start":5,"column_end":25}},{"value":"/             None","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":95368,"byte_end":95388,"line_start":389,"line_end":389,"column_start":5,"column_end":25}},{"value":"/         }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":95393,"byte_end":95406,"line_start":390,"line_end":390,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":95411,"byte_end":95420,"line_start":391,"line_end":391,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":95425,"byte_end":95430,"line_start":392,"line_end":392,"column_start":5,"column_end":10}},{"value":"/ # }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":95435,"byte_end":95442,"line_start":393,"line_end":393,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":95447,"byte_end":95454,"line_start":394,"line_end":394,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":95459,"byte_end":95462,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ While the following example is sound, there is a memory leak since","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":95467,"byte_end":95537,"line_start":396,"line_end":396,"column_start":5,"column_end":75}},{"value":"/ the inner vectors were not freed prior to the `set_len` call:","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":95542,"byte_end":95607,"line_start":397,"line_end":397,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":95612,"byte_end":95615,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":95620,"byte_end":95627,"line_start":399,"line_end":399,"column_start":5,"column_end":12}},{"value":"/ use core::iter::FromIterator;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":95632,"byte_end":95665,"line_start":400,"line_end":400,"column_start":5,"column_end":38}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":95670,"byte_end":95692,"line_start":401,"line_end":401,"column_start":5,"column_end":27}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":95697,"byte_end":95725,"line_start":402,"line_end":402,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":95730,"byte_end":95733,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ let mut vec = Vec::<Vec<u8, U3>, U3>::from_iter(","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":95738,"byte_end":95790,"line_start":404,"line_end":404,"column_start":5,"column_end":57}},{"value":"/     [","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":95795,"byte_end":95804,"line_start":405,"line_end":405,"column_start":5,"column_end":14}},{"value":"/         Vec::from_iter([1, 0, 0].iter().cloned()),","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":95809,"byte_end":95863,"line_start":406,"line_end":406,"column_start":5,"column_end":59}},{"value":"/         Vec::from_iter([0, 1, 0].iter().cloned()),","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":95868,"byte_end":95922,"line_start":407,"line_end":407,"column_start":5,"column_end":59}},{"value":"/         Vec::from_iter([0, 0, 1].iter().cloned()),","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":95927,"byte_end":95981,"line_start":408,"line_end":408,"column_start":5,"column_end":59}},{"value":"/     ]","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":95986,"byte_end":95995,"line_start":409,"line_end":409,"column_start":5,"column_end":14}},{"value":"/     .iter()","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96000,"byte_end":96015,"line_start":410,"line_end":410,"column_start":5,"column_end":20}},{"value":"/     .cloned()","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96020,"byte_end":96037,"line_start":411,"line_end":411,"column_start":5,"column_end":22}},{"value":"/ );","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96042,"byte_end":96048,"line_start":412,"line_end":412,"column_start":5,"column_end":11}},{"value":"/ // SAFETY:","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96053,"byte_end":96067,"line_start":413,"line_end":413,"column_start":5,"column_end":19}},{"value":"/ // 1. `old_len..0` is empty so no elements need to be initialized.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96072,"byte_end":96142,"line_start":414,"line_end":414,"column_start":5,"column_end":75}},{"value":"/ // 2. `0 <= capacity` always holds whatever `capacity` is.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96147,"byte_end":96209,"line_start":415,"line_end":415,"column_start":5,"column_end":67}},{"value":"/ unsafe {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96214,"byte_end":96226,"line_start":416,"line_end":416,"column_start":5,"column_end":17}},{"value":"/     vec.set_len(0);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96231,"byte_end":96254,"line_start":417,"line_end":417,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96259,"byte_end":96264,"line_start":418,"line_end":418,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96269,"byte_end":96276,"line_start":419,"line_end":419,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96281,"byte_end":96284,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ Normally, here, one would use [`clear`] instead to correctly drop","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96289,"byte_end":96358,"line_start":421,"line_end":421,"column_start":5,"column_end":74}},{"value":"/ the contents and thus not leak memory.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96363,"byte_end":96405,"line_start":422,"line_end":422,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":913},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":97335,"byte_end":97346,"line_start":457,"line_end":457,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<Vec<T, N>>::swap_remove","value":"pub fn swap_remove(&mut Self, usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes an element from the vector and returns it.","sig":null,"attributes":[{"value":"/ Removes an element from the vector and returns it.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96553,"byte_end":96607,"line_start":429,"line_end":429,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96612,"byte_end":96615,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ The removed element is replaced by the last element of the vector.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96620,"byte_end":96690,"line_start":431,"line_end":431,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96695,"byte_end":96698,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ This does not preserve ordering, but is O(1).","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96703,"byte_end":96752,"line_start":433,"line_end":433,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96757,"byte_end":96760,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96765,"byte_end":96777,"line_start":435,"line_end":435,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96782,"byte_end":96785,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ Panics if `index` is out of bounds.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96790,"byte_end":96829,"line_start":437,"line_end":437,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96834,"byte_end":96837,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96842,"byte_end":96856,"line_start":439,"line_end":439,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96861,"byte_end":96864,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96869,"byte_end":96876,"line_start":441,"line_end":441,"column_start":5,"column_end":12}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96881,"byte_end":96903,"line_start":442,"line_end":442,"column_start":5,"column_end":27}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96908,"byte_end":96936,"line_start":443,"line_end":443,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96941,"byte_end":96944,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ let mut v: Vec<_, U8> = Vec::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96949,"byte_end":96988,"line_start":445,"line_end":445,"column_start":5,"column_end":44}},{"value":"/ v.push(\"foo\").unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":96993,"byte_end":97020,"line_start":446,"line_end":446,"column_start":5,"column_end":32}},{"value":"/ v.push(\"bar\").unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":97025,"byte_end":97052,"line_start":447,"line_end":447,"column_start":5,"column_end":32}},{"value":"/ v.push(\"baz\").unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":97057,"byte_end":97084,"line_start":448,"line_end":448,"column_start":5,"column_end":32}},{"value":"/ v.push(\"qux\").unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":97089,"byte_end":97116,"line_start":449,"line_end":449,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":97121,"byte_end":97124,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v.swap_remove(1), \"bar\");","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":97129,"byte_end":97169,"line_start":451,"line_end":451,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(&*v, [\"foo\", \"qux\", \"baz\"]);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":97174,"byte_end":97217,"line_start":452,"line_end":452,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":97222,"byte_end":97225,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v.swap_remove(0), \"foo\");","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":97230,"byte_end":97270,"line_start":454,"line_end":454,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(&*v, [\"baz\", \"qux\"]);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":97275,"byte_end":97311,"line_start":455,"line_end":455,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":97316,"byte_end":97323,"line_start":456,"line_end":456,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":916},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":98110,"byte_end":98121,"line_start":485,"line_end":485,"column_start":12,"column_end":23},"name":"starts_with","qualname":"<Vec<T, N>>::starts_with","value":"pub fn starts_with(&Self, &[T]) -> bool where T: PartialEq","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `needle` is a prefix of the Vec.","sig":null,"attributes":[{"value":"/ Returns `true` if `needle` is a prefix of the Vec.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":97629,"byte_end":97683,"line_start":469,"line_end":469,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":97688,"byte_end":97691,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ Always returns `true` if `needle` is an empty slice.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":97696,"byte_end":97752,"line_start":471,"line_end":471,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":97757,"byte_end":97760,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":97765,"byte_end":97779,"line_start":473,"line_end":473,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":97784,"byte_end":97787,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":97792,"byte_end":97799,"line_start":475,"line_end":475,"column_start":5,"column_end":12}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":97804,"byte_end":97826,"line_start":476,"line_end":476,"column_start":5,"column_end":27}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":97831,"byte_end":97859,"line_start":477,"line_end":477,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":97864,"byte_end":97867,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ let v: Vec<_, U8> = Vec::from_slice(b\"abc\").unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":97872,"byte_end":97929,"line_start":479,"line_end":479,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(v.starts_with(b\"\"), true);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":97934,"byte_end":97975,"line_start":480,"line_end":480,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(v.starts_with(b\"ab\"), true);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":97980,"byte_end":98023,"line_start":481,"line_end":481,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(v.starts_with(b\"bc\"), false);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":98028,"byte_end":98072,"line_start":482,"line_end":482,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":98077,"byte_end":98084,"line_start":483,"line_end":483,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":98089,"byte_end":98098,"line_start":484,"line_end":484,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":917},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":98753,"byte_end":98762,"line_start":509,"line_end":509,"column_start":12,"column_end":21},"name":"ends_with","qualname":"<Vec<T, N>>::ends_with","value":"pub fn ends_with(&Self, &[T]) -> bool where T: PartialEq","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `needle` is a suffix of the Vec.","sig":null,"attributes":[{"value":"/ Returns `true` if `needle` is a suffix of the Vec.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":98278,"byte_end":98332,"line_start":493,"line_end":493,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":98337,"byte_end":98340,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ Always returns `true` if `needle` is an empty slice.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":98345,"byte_end":98401,"line_start":495,"line_end":495,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":98406,"byte_end":98409,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":98414,"byte_end":98428,"line_start":497,"line_end":497,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":98433,"byte_end":98436,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":98441,"byte_end":98448,"line_start":499,"line_end":499,"column_start":5,"column_end":12}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":98453,"byte_end":98475,"line_start":500,"line_end":500,"column_start":5,"column_end":27}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":98480,"byte_end":98508,"line_start":501,"line_end":501,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":98513,"byte_end":98516,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ let v: Vec<_, U8> = Vec::from_slice(b\"abc\").unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":98521,"byte_end":98578,"line_start":503,"line_end":503,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(v.ends_with(b\"\"), true);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":98583,"byte_end":98622,"line_start":504,"line_end":504,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(v.ends_with(b\"ab\"), false);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":98627,"byte_end":98669,"line_start":505,"line_end":505,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(v.ends_with(b\"bc\"), true);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":98674,"byte_end":98715,"line_start":506,"line_end":506,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":98720,"byte_end":98727,"line_start":507,"line_end":507,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":98732,"byte_end":98741,"line_start":508,"line_end":508,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":973},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":101470,"byte_end":101478,"line_start":649,"line_end":649,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::vec::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":976},{"krate":0,"index":977}],"decl_id":null,"docs":" An iterator that moves out of an [`Vec`][`Vec`].","sig":null,"attributes":[{"value":"/ An iterator that moves out of an [`Vec`][`Vec`].","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":101249,"byte_end":101301,"line_start":643,"line_end":643,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":101302,"byte_end":101305,"line_start":644,"line_end":644,"column_start":1,"column_end":4}},{"value":"/ This struct is created by calling the `into_iter` method on [`Vec`][`Vec`].","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":101306,"byte_end":101385,"line_start":645,"line_end":645,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":101386,"byte_end":101389,"line_start":646,"line_end":646,"column_start":1,"column_end":4}},{"value":"/ [`Vec`]: (https://doc.rust-lang.org/std/vec/struct.Vec.html)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":101390,"byte_end":101454,"line_start":647,"line_end":647,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":101455,"byte_end":101458,"line_start":648,"line_end":648,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2706},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":114291,"byte_end":114304,"line_start":37,"line_end":37,"column_start":12,"column_end":25},"name":"HistoryBuffer","qualname":"::histbuf::HistoryBuffer","value":"HistoryBuffer {  }","parent":null,"children":[{"krate":0,"index":2709},{"krate":0,"index":2710}],"decl_id":null,"docs":" A \"history buffer\", similar to a write-only ring buffer of fixed length.","sig":null,"attributes":[{"value":"/ A \"history buffer\", similar to a write-only ring buffer of fixed length.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":113022,"byte_end":113098,"line_start":3,"line_end":3,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":113099,"byte_end":113102,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ This buffer keeps a fixed number of elements.  On write, the oldest element","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":113103,"byte_end":113182,"line_start":5,"line_end":5,"column_start":1,"column_end":80}},{"value":"/ is overwritten. Thus, the buffer is useful to keep a history of values with","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":113183,"byte_end":113262,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ some desired depth, and for example calculate a rolling average.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":113263,"byte_end":113331,"line_start":7,"line_end":7,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":113332,"byte_end":113335,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ The buffer is always fully initialized; depending on the constructor, the","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":113336,"byte_end":113413,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/ initial value is either the default value for the element type or a supplied","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":113414,"byte_end":113494,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ initial value. This simplifies the API and is mostly irrelevant for the","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":113495,"byte_end":113570,"line_start":11,"line_end":11,"column_start":1,"column_end":76}},{"value":"/ intended use case.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":113571,"byte_end":113593,"line_start":12,"line_end":12,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":113594,"byte_end":113597,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":113598,"byte_end":113612,"line_start":14,"line_end":14,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":113613,"byte_end":113620,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/ use heapless::HistoryBuffer;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":113621,"byte_end":113653,"line_start":16,"line_end":16,"column_start":1,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":113654,"byte_end":113682,"line_start":17,"line_end":17,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":113683,"byte_end":113686,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ // Initialize a new buffer with 8 elements, all initially zero.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":113687,"byte_end":113754,"line_start":19,"line_end":19,"column_start":1,"column_end":68}},{"value":"/ let mut buf = HistoryBuffer::<_, U8>::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":113755,"byte_end":113803,"line_start":20,"line_end":20,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":113804,"byte_end":113807,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ buf.write(3);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":113808,"byte_end":113825,"line_start":22,"line_end":22,"column_start":1,"column_end":18}},{"value":"/ buf.write(5);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":113826,"byte_end":113843,"line_start":23,"line_end":23,"column_start":1,"column_end":18}},{"value":"/ buf.extend(&[4, 4]);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":113844,"byte_end":113868,"line_start":24,"line_end":24,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":113869,"byte_end":113872,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ // The most recent written element is a four.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":113873,"byte_end":113922,"line_start":26,"line_end":26,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(buf.recent(), &4);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":113923,"byte_end":113956,"line_start":27,"line_end":27,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":113957,"byte_end":113960,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ // To access all elements in an unspecified order, use `as_slice()`.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":113961,"byte_end":114033,"line_start":29,"line_end":29,"column_start":1,"column_end":73}},{"value":"/ for el in buf.as_slice() { println!(\"{:?}\", el); }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":114034,"byte_end":114088,"line_start":30,"line_end":30,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":114089,"byte_end":114092,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ // Now we can prepare an average of all values, which comes out to 2.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":114093,"byte_end":114166,"line_start":32,"line_end":32,"column_start":1,"column_end":74}},{"value":"/ let avg = buf.as_slice().iter().sum::<usize>() / buf.len();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":114167,"byte_end":114230,"line_start":33,"line_end":33,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(avg, 2);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":114231,"byte_end":114254,"line_start":34,"line_end":34,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":114255,"byte_end":114262,"line_start":35,"line_end":35,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1047},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":115021,"byte_end":115024,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"new","qualname":"<HistoryBuffer<T, N>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new history buffer, where every element is filled with the\n default value of the type `T`.","sig":null,"attributes":[{"value":"/ Constructs a new history buffer, where every element is filled with the","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":114479,"byte_end":114554,"line_start":51,"line_end":51,"column_start":5,"column_end":80}},{"value":"/ default value of the type `T`.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":114559,"byte_end":114593,"line_start":52,"line_end":52,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":114598,"byte_end":114601,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ `HistoryBuffer` currently cannot be constructed in `const` context.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":114606,"byte_end":114677,"line_start":54,"line_end":54,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":114682,"byte_end":114685,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":114690,"byte_end":114704,"line_start":56,"line_end":56,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":114709,"byte_end":114712,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":114717,"byte_end":114724,"line_start":58,"line_end":58,"column_start":5,"column_end":12}},{"value":"/ use heapless::HistoryBuffer;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":114729,"byte_end":114761,"line_start":59,"line_end":59,"column_start":5,"column_end":37}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":114766,"byte_end":114794,"line_start":60,"line_end":60,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":114799,"byte_end":114802,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ // Allocate a 16-element buffer on the stack","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":114807,"byte_end":114855,"line_start":62,"line_end":62,"column_start":5,"column_end":53}},{"value":"/ let mut x: HistoryBuffer<u8, U16> = HistoryBuffer::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":114860,"byte_end":114921,"line_start":63,"line_end":63,"column_start":5,"column_end":66}},{"value":"/ // All elements are zero","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":114926,"byte_end":114954,"line_start":64,"line_end":64,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(x.as_slice(), [0; 16]);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":114959,"byte_end":114997,"line_start":65,"line_end":65,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":115002,"byte_end":115009,"line_start":66,"line_end":66,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1048},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":115238,"byte_end":115243,"line_start":76,"line_end":76,"column_start":12,"column_end":17},"name":"clear","qualname":"<HistoryBuffer<T, N>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the buffer, replacing every element with the default value of\n type `T`.\n","sig":null,"attributes":[{"value":"/ Clears the buffer, replacing every element with the default value of","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":115136,"byte_end":115208,"line_start":74,"line_end":74,"column_start":5,"column_end":77}},{"value":"/ type `T`.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":115213,"byte_end":115226,"line_start":75,"line_end":75,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1052},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":115801,"byte_end":115809,"line_start":99,"line_end":99,"column_start":12,"column_end":20},"name":"new_with","qualname":"<HistoryBuffer<T, N>>::new_with","value":"pub fn new_with(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new history buffer, where every element is the given value.","sig":null,"attributes":[{"value":"/ Constructs a new history buffer, where every element is the given value.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":115375,"byte_end":115451,"line_start":86,"line_end":86,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":115456,"byte_end":115459,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":115464,"byte_end":115478,"line_start":88,"line_end":88,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":115483,"byte_end":115486,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":115491,"byte_end":115498,"line_start":90,"line_end":90,"column_start":5,"column_end":12}},{"value":"/ use heapless::HistoryBuffer;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":115503,"byte_end":115535,"line_start":91,"line_end":91,"column_start":5,"column_end":37}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":115540,"byte_end":115568,"line_start":92,"line_end":92,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":115573,"byte_end":115576,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ // Allocate a 16-element buffer on the stack","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":115581,"byte_end":115629,"line_start":94,"line_end":94,"column_start":5,"column_end":53}},{"value":"/ let mut x: HistoryBuffer<u8, U16> = HistoryBuffer::new_with(4);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":115634,"byte_end":115701,"line_start":95,"line_end":95,"column_start":5,"column_end":72}},{"value":"/ // All elements are four","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":115706,"byte_end":115734,"line_start":96,"line_end":96,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(x.as_slice(), [4; 16]);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":115739,"byte_end":115777,"line_start":97,"line_end":97,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":115782,"byte_end":115789,"line_start":98,"line_end":98,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1054},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":116024,"byte_end":116034,"line_start":107,"line_end":107,"column_start":12,"column_end":22},"name":"clear_with","qualname":"<HistoryBuffer<T, N>>::clear_with","value":"pub fn clear_with(&mut Self, T)","parent":null,"children":[],"decl_id":null,"docs":" Clears the buffer, replacing every element with the given value.\n","sig":null,"attributes":[{"value":"/ Clears the buffer, replacing every element with the given value.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":115944,"byte_end":116012,"line_start":106,"line_end":106,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1058},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":116276,"byte_end":116279,"line_start":118,"line_end":118,"column_start":12,"column_end":15},"name":"len","qualname":"<HistoryBuffer<T, N>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the capacity of the buffer, which is the length of the\n underlying backing array.\n","sig":null,"attributes":[{"value":"/ Returns the capacity of the buffer, which is the length of the","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":116164,"byte_end":116230,"line_start":116,"line_end":116,"column_start":5,"column_end":71}},{"value":"/ underlying backing array.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":116235,"byte_end":116264,"line_start":117,"line_end":117,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1059},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":116411,"byte_end":116416,"line_start":123,"line_end":123,"column_start":12,"column_end":17},"name":"write","qualname":"<HistoryBuffer<T, N>>::write","value":"pub fn write(&mut Self, T)","parent":null,"children":[],"decl_id":null,"docs":" Writes an element to the buffer, overwriting the oldest value.\n","sig":null,"attributes":[{"value":"/ Writes an element to the buffer, overwriting the oldest value.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":116333,"byte_end":116399,"line_start":122,"line_end":122,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1060},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":116792,"byte_end":116809,"line_start":135,"line_end":135,"column_start":12,"column_end":29},"name":"extend_from_slice","qualname":"<HistoryBuffer<T, N>>::extend_from_slice","value":"pub fn extend_from_slice(&mut Self, &[T]) where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Clones and writes all elements in a slice to the buffer.","sig":null,"attributes":[{"value":"/ Clones and writes all elements in a slice to the buffer.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":116595,"byte_end":116655,"line_start":131,"line_end":131,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":116660,"byte_end":116663,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ If the slice is longer than the buffer, only the last `self.len()`","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":116668,"byte_end":116738,"line_start":133,"line_end":133,"column_start":5,"column_end":75}},{"value":"/ elements will actually be stored.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":116743,"byte_end":116780,"line_start":134,"line_end":134,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1061},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":117307,"byte_end":117313,"line_start":157,"line_end":157,"column_start":12,"column_end":18},"name":"recent","qualname":"<HistoryBuffer<T, N>>::recent","value":"pub fn recent(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the most recently written value.","sig":null,"attributes":[{"value":"/ Returns a reference to the most recently written value.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":116955,"byte_end":117014,"line_start":144,"line_end":144,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":117019,"byte_end":117022,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":117027,"byte_end":117041,"line_start":146,"line_end":146,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":117046,"byte_end":117049,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":117054,"byte_end":117061,"line_start":148,"line_end":148,"column_start":5,"column_end":12}},{"value":"/ use heapless::HistoryBuffer;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":117066,"byte_end":117098,"line_start":149,"line_end":149,"column_start":5,"column_end":37}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":117103,"byte_end":117131,"line_start":150,"line_end":150,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":117136,"byte_end":117139,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ let mut x: HistoryBuffer<u8, U16> = HistoryBuffer::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":117144,"byte_end":117205,"line_start":152,"line_end":152,"column_start":5,"column_end":66}},{"value":"/ x.write(4);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":117210,"byte_end":117225,"line_start":153,"line_end":153,"column_start":5,"column_end":20}},{"value":"/ x.write(10);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":117230,"byte_end":117246,"line_start":154,"line_end":154,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(x.recent(), &10);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":117251,"byte_end":117283,"line_start":155,"line_end":155,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":117288,"byte_end":117295,"line_start":156,"line_end":156,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1062},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":117637,"byte_end":117645,"line_start":167,"line_end":167,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<HistoryBuffer<T, N>>::as_slice","value":"pub fn as_slice(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Returns the array slice backing the buffer, without keeping track\n of the write position. Therefore, the element order is unspecified.\n","sig":null,"attributes":[{"value":"/ Returns the array slice backing the buffer, without keeping track","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":117480,"byte_end":117549,"line_start":165,"line_end":165,"column_start":5,"column_end":74}},{"value":"/ of the write position. Therefore, the element order is unspecified.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":117554,"byte_end":117625,"line_start":166,"line_end":166,"column_start":5,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":1074},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"binary_heap","qualname":"::binary_heap","value":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","parent":null,"children":[{"krate":0,"index":1075},{"krate":0,"index":1076},{"krate":0,"index":1079},{"krate":0,"index":1080},{"krate":0,"index":1082},{"krate":0,"index":1083},{"krate":0,"index":1086},{"krate":0,"index":1089},{"krate":0,"index":1090},{"krate":0,"index":1093},{"krate":0,"index":1096},{"krate":0,"index":1099},{"krate":0,"index":1102},{"krate":0,"index":1103},{"krate":0,"index":1106},{"krate":0,"index":1109},{"krate":0,"index":1112},{"krate":0,"index":1113},{"krate":0,"index":1114},{"krate":0,"index":1118},{"krate":0,"index":1124},{"krate":0,"index":1143},{"krate":0,"index":1149},{"krate":0,"index":1157},{"krate":0,"index":1164},{"krate":0,"index":1169},{"krate":0,"index":1175},{"krate":0,"index":1180},{"krate":0,"index":1186},{"krate":0,"index":1190},{"krate":0,"index":1195},{"krate":0,"index":1200},{"krate":0,"index":1205},{"krate":0,"index":1210}],"decl_id":null,"docs":" A priority queue implemented with a binary heap.","sig":null,"attributes":[{"value":"/ A priority queue implemented with a binary heap.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":119742,"byte_end":119794,"line_start":1,"line_end":1,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":119795,"byte_end":119798,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Insertion and popping the largest element have `O(log n)` time complexity. Checking the largest","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":119799,"byte_end":119898,"line_start":3,"line_end":3,"column_start":1,"column_end":100}},{"value":"/ / smallest element is `O(1)`.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":119899,"byte_end":119932,"line_start":4,"line_end":4,"column_start":1,"column_end":34}}]},{"kind":"Enum","id":{"krate":0,"index":1112},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":120420,"byte_end":120423,"line_start":24,"line_end":24,"column_start":10,"column_end":13},"name":"Min","qualname":"::binary_heap::Min","value":"pub enum Min { }","parent":null,"children":[],"decl_id":null,"docs":" Min-heap\n","sig":null,"attributes":[{"value":"/ Min-heap","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":120398,"byte_end":120410,"line_start":23,"line_end":23,"column_start":1,"column_end":13}}]},{"kind":"Enum","id":{"krate":0,"index":1113},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":120450,"byte_end":120453,"line_start":27,"line_end":27,"column_start":10,"column_end":13},"name":"Max","qualname":"::binary_heap::Max","value":"pub enum Max { }","parent":null,"children":[],"decl_id":null,"docs":" Max-heap\n","sig":null,"attributes":[{"value":"/ Max-heap","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":120428,"byte_end":120440,"line_start":26,"line_end":26,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":1117},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":120634,"byte_end":120637,"line_start":32,"line_end":32,"column_start":18,"column_end":21},"name":"new","qualname":"<crate::i::BinaryHeap<A, K>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" `BinaryHeap` `const` constructor; wrap the returned value in\n [`BinaryHeap`](../struct.BinaryHeap.html)\n","sig":null,"attributes":[{"value":"/ `BinaryHeap` `const` constructor; wrap the returned value in","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":120502,"byte_end":120566,"line_start":30,"line_end":30,"column_start":5,"column_end":69}},{"value":"/ [`BinaryHeap`](../struct.BinaryHeap.html)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":120571,"byte_end":120616,"line_start":31,"line_end":31,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1118},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":122317,"byte_end":122327,"line_start":87,"line_end":87,"column_start":12,"column_end":22},"name":"BinaryHeap","qualname":"::binary_heap::BinaryHeap","value":"","parent":null,"children":[],"decl_id":null,"docs":" A priority queue implemented with a binary heap.","sig":null,"attributes":[{"value":"/ A priority queue implemented with a binary heap.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":120756,"byte_end":120808,"line_start":40,"line_end":40,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":120809,"byte_end":120812,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ This can be either a min-heap or a max-heap.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":120813,"byte_end":120861,"line_start":42,"line_end":42,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":120862,"byte_end":120865,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ It is a logic error for an item to be modified in such a way that the item's ordering relative","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":120866,"byte_end":120964,"line_start":44,"line_end":44,"column_start":1,"column_end":99}},{"value":"/ to any other item, as determined by the `Ord` trait, changes while it is in the heap. This is","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":120965,"byte_end":121062,"line_start":45,"line_end":45,"column_start":1,"column_end":98}},{"value":"/ normally only possible through `Cell`, `RefCell`, global state, I/O, or unsafe code.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":121063,"byte_end":121151,"line_start":46,"line_end":46,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":121152,"byte_end":121155,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":121156,"byte_end":121163,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":121164,"byte_end":121213,"line_start":49,"line_end":49,"column_start":1,"column_end":50}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":121214,"byte_end":121242,"line_start":50,"line_end":50,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":121243,"byte_end":121246,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ let mut heap: BinaryHeap<_, U8, Max> = BinaryHeap::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":121247,"byte_end":121308,"line_start":52,"line_end":52,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":121309,"byte_end":121312,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ // We can use peek to look at the next item in the heap. In this case,","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":121313,"byte_end":121387,"line_start":54,"line_end":54,"column_start":1,"column_end":75}},{"value":"/ // there's no items in there yet so we get None.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":121388,"byte_end":121440,"line_start":55,"line_end":55,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(heap.peek(), None);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":121441,"byte_end":121475,"line_start":56,"line_end":56,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":121476,"byte_end":121479,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ // Let's add some scores...","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":121480,"byte_end":121511,"line_start":58,"line_end":58,"column_start":1,"column_end":32}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":121512,"byte_end":121538,"line_start":59,"line_end":59,"column_start":1,"column_end":27}},{"value":"/ heap.push(5).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":121539,"byte_end":121565,"line_start":60,"line_end":60,"column_start":1,"column_end":27}},{"value":"/ heap.push(2).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":121566,"byte_end":121592,"line_start":61,"line_end":61,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":121593,"byte_end":121596,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ // Now peek shows the most important item in the heap.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":121597,"byte_end":121655,"line_start":63,"line_end":63,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(heap.peek(), Some(&5));","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":121656,"byte_end":121694,"line_start":64,"line_end":64,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":121695,"byte_end":121698,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ // We can check the length of a heap.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":121699,"byte_end":121740,"line_start":66,"line_end":66,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(heap.len(), 3);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":121741,"byte_end":121771,"line_start":67,"line_end":67,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":121772,"byte_end":121775,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ // We can iterate over the items in the heap, although they are returned in","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":121776,"byte_end":121855,"line_start":69,"line_end":69,"column_start":1,"column_end":80}},{"value":"/ // a random order.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":121856,"byte_end":121878,"line_start":70,"line_end":70,"column_start":1,"column_end":23}},{"value":"/ for x in &heap {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":121879,"byte_end":121899,"line_start":71,"line_end":71,"column_start":1,"column_end":21}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":121900,"byte_end":121926,"line_start":72,"line_end":72,"column_start":1,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":121927,"byte_end":121932,"line_start":73,"line_end":73,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":121933,"byte_end":121936,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ // If we instead pop these scores, they should come back in order.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":121937,"byte_end":122007,"line_start":75,"line_end":75,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(heap.pop(), Some(5));","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":122008,"byte_end":122044,"line_start":76,"line_end":76,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(heap.pop(), Some(2));","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":122045,"byte_end":122081,"line_start":77,"line_end":77,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(heap.pop(), Some(1));","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":122082,"byte_end":122118,"line_start":78,"line_end":78,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(heap.pop(), None);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":122119,"byte_end":122152,"line_start":79,"line_end":79,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":122153,"byte_end":122156,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ // We can clear the heap of any remaining items.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":122157,"byte_end":122209,"line_start":81,"line_end":81,"column_start":1,"column_end":53}},{"value":"/ heap.clear();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":122210,"byte_end":122227,"line_start":82,"line_end":82,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":122228,"byte_end":122231,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ // The heap should now be empty.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":122232,"byte_end":122268,"line_start":84,"line_end":84,"column_start":1,"column_end":37}},{"value":"/ assert!(heap.is_empty())","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":122269,"byte_end":122297,"line_start":85,"line_end":85,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":122298,"byte_end":122305,"line_start":86,"line_end":86,"column_start":1,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":1123},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":122360,"byte_end":122410,"line_start":88,"line_end":88,"column_start":20,"column_end":70},"name":"0","qualname":"::binary_heap::BinaryHeap::0","value":"i::BinaryHeap<generic_array::GenericArray<T, N>, KIND>","parent":{"krate":0,"index":1118},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1128},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":123080,"byte_end":123083,"line_start":115,"line_end":115,"column_start":12,"column_end":15},"name":"new","qualname":"<BinaryHeap<T, N, K>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty BinaryHeap as a $K-heap.","sig":null,"attributes":[{"value":"/ Creates an empty BinaryHeap as a $K-heap.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":122589,"byte_end":122634,"line_start":102,"line_end":102,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":122639,"byte_end":122642,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":122647,"byte_end":122654,"line_start":104,"line_end":104,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":122659,"byte_end":122708,"line_start":105,"line_end":105,"column_start":5,"column_end":54}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":122713,"byte_end":122741,"line_start":106,"line_end":106,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":122746,"byte_end":122749,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ // allocate the binary heap on the stack","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":122754,"byte_end":122798,"line_start":108,"line_end":108,"column_start":5,"column_end":49}},{"value":"/ let mut heap: BinaryHeap<_, U8, Max> = BinaryHeap::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":122803,"byte_end":122864,"line_start":109,"line_end":109,"column_start":5,"column_end":66}},{"value":"/ heap.push(4).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":122869,"byte_end":122895,"line_start":110,"line_end":110,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":122900,"byte_end":122903,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ // allocate the binary heap in a static variable","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":122908,"byte_end":122960,"line_start":112,"line_end":112,"column_start":5,"column_end":57}},{"value":"/ static mut HEAP: BinaryHeap<i32, U8, Max> = BinaryHeap(heapless::i::BinaryHeap::new());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":122965,"byte_end":123056,"line_start":113,"line_end":113,"column_start":5,"column_end":96}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":123061,"byte_end":123068,"line_start":114,"line_end":114,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1129},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":123232,"byte_end":123240,"line_start":121,"line_end":121,"column_start":12,"column_end":20},"name":"capacity","qualname":"<BinaryHeap<T, N, K>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the capacity of the binary heap.\n","sig":null,"attributes":[{"value":"/ Returns the capacity of the binary heap.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":123176,"byte_end":123220,"line_start":120,"line_end":120,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1130},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":123724,"byte_end":123729,"line_start":141,"line_end":141,"column_start":12,"column_end":17},"name":"clear","qualname":"<BinaryHeap<T, N, K>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Drops all items from the binary heap.","sig":null,"attributes":[{"value":"/ Drops all items from the binary heap.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":123301,"byte_end":123342,"line_start":125,"line_end":125,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":123347,"byte_end":123350,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":123355,"byte_end":123362,"line_start":127,"line_end":127,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":123367,"byte_end":123416,"line_start":128,"line_end":128,"column_start":5,"column_end":54}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":123421,"byte_end":123449,"line_start":129,"line_end":129,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":123454,"byte_end":123457,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, U8, Max> = BinaryHeap::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":123462,"byte_end":123523,"line_start":131,"line_end":131,"column_start":5,"column_end":66}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":123528,"byte_end":123554,"line_start":132,"line_end":132,"column_start":5,"column_end":31}},{"value":"/ heap.push(3).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":123559,"byte_end":123585,"line_start":133,"line_end":133,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":123590,"byte_end":123593,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ assert!(!heap.is_empty());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":123598,"byte_end":123628,"line_start":135,"line_end":135,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":123633,"byte_end":123636,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ heap.clear();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":123641,"byte_end":123658,"line_start":137,"line_end":137,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":123663,"byte_end":123666,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ assert!(heap.is_empty());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":123671,"byte_end":123700,"line_start":139,"line_end":139,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":123705,"byte_end":123712,"line_start":140,"line_end":140,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1131},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124134,"byte_end":124137,"line_start":157,"line_end":157,"column_start":12,"column_end":15},"name":"len","qualname":"<BinaryHeap<T, N, K>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the binary heap.","sig":null,"attributes":[{"value":"/ Returns the length of the binary heap.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":123782,"byte_end":123824,"line_start":145,"line_end":145,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":123829,"byte_end":123832,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":123837,"byte_end":123844,"line_start":147,"line_end":147,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":123849,"byte_end":123898,"line_start":148,"line_end":148,"column_start":5,"column_end":54}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":123903,"byte_end":123931,"line_start":149,"line_end":149,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":123936,"byte_end":123939,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, U8, Max> = BinaryHeap::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":123944,"byte_end":124005,"line_start":151,"line_end":151,"column_start":5,"column_end":66}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124010,"byte_end":124036,"line_start":152,"line_end":152,"column_start":5,"column_end":31}},{"value":"/ heap.push(3).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124041,"byte_end":124067,"line_start":153,"line_end":153,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124072,"byte_end":124075,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(heap.len(), 2);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124080,"byte_end":124110,"line_start":155,"line_end":155,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124115,"byte_end":124122,"line_start":156,"line_end":156,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1132},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124621,"byte_end":124629,"line_start":177,"line_end":177,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<BinaryHeap<T, N, K>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if the binary heap is empty.","sig":null,"attributes":[{"value":"/ Checks if the binary heap is empty.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124191,"byte_end":124230,"line_start":161,"line_end":161,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124235,"byte_end":124238,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124243,"byte_end":124250,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124255,"byte_end":124304,"line_start":164,"line_end":164,"column_start":5,"column_end":54}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124309,"byte_end":124337,"line_start":165,"line_end":165,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124342,"byte_end":124345,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, U8, Max> = BinaryHeap::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124350,"byte_end":124411,"line_start":167,"line_end":167,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124416,"byte_end":124419,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ assert!(heap.is_empty());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124424,"byte_end":124453,"line_start":169,"line_end":169,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124458,"byte_end":124461,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ heap.push(3).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124466,"byte_end":124492,"line_start":171,"line_end":171,"column_start":5,"column_end":31}},{"value":"/ heap.push(5).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124497,"byte_end":124523,"line_start":172,"line_end":172,"column_start":5,"column_end":31}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124528,"byte_end":124554,"line_start":173,"line_end":173,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124559,"byte_end":124562,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ assert!(!heap.is_empty());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124567,"byte_end":124597,"line_start":175,"line_end":175,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124602,"byte_end":124609,"line_start":176,"line_end":176,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1133},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":125235,"byte_end":125239,"line_start":199,"line_end":199,"column_start":12,"column_end":16},"name":"iter","qualname":"<BinaryHeap<T, N, K>>::iter","value":"pub fn iter(&Self) -> slice::Iter<, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator visiting all values in the underlying vector, in arbitrary order.","sig":null,"attributes":[{"value":"/ Returns an iterator visiting all values in the underlying vector, in arbitrary order.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124682,"byte_end":124771,"line_start":181,"line_end":181,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124776,"byte_end":124779,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124784,"byte_end":124791,"line_start":183,"line_end":183,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124796,"byte_end":124845,"line_start":184,"line_end":184,"column_start":5,"column_end":54}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124850,"byte_end":124878,"line_start":185,"line_end":185,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124883,"byte_end":124886,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, U8, Max> = BinaryHeap::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124891,"byte_end":124952,"line_start":187,"line_end":187,"column_start":5,"column_end":66}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124957,"byte_end":124983,"line_start":188,"line_end":188,"column_start":5,"column_end":31}},{"value":"/ heap.push(2).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":124988,"byte_end":125014,"line_start":189,"line_end":189,"column_start":5,"column_end":31}},{"value":"/ heap.push(3).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":125019,"byte_end":125045,"line_start":190,"line_end":190,"column_start":5,"column_end":31}},{"value":"/ heap.push(4).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":125050,"byte_end":125076,"line_start":191,"line_end":191,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":125081,"byte_end":125084,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 2, 3, 4 in arbitrary order","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":125089,"byte_end":125131,"line_start":193,"line_end":193,"column_start":5,"column_end":47}},{"value":"/ for x in heap.iter() {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":125136,"byte_end":125162,"line_start":194,"line_end":194,"column_start":5,"column_end":31}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":125167,"byte_end":125193,"line_start":195,"line_end":195,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":125198,"byte_end":125201,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":125206,"byte_end":125211,"line_start":197,"line_end":197,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":125216,"byte_end":125223,"line_start":198,"line_end":198,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1134},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":125547,"byte_end":125555,"line_start":207,"line_end":207,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<BinaryHeap<T, N, K>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> slice::IterMut<, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable iterator visiting all values in the underlying vector, in arbitrary order.","sig":null,"attributes":[{"value":"/ Returns a mutable iterator visiting all values in the underlying vector, in arbitrary order.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":125320,"byte_end":125416,"line_start":203,"line_end":203,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":125421,"byte_end":125424,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ **WARNING** Mutating the items in the binary heap can leave the heap in an inconsistent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":125429,"byte_end":125520,"line_start":205,"line_end":205,"column_start":5,"column_end":96}},{"value":"/ state.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":125525,"byte_end":125535,"line_start":206,"line_end":206,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":1135},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126162,"byte_end":126166,"line_start":226,"line_end":226,"column_start":12,"column_end":16},"name":"peek","qualname":"<BinaryHeap<T, N, K>>::peek","value":"pub fn peek(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the *top* (greatest if max-heap, smallest if min-heap) item in the binary heap, or\n None if it is empty.","sig":null,"attributes":[{"value":"/ Returns the *top* (greatest if max-heap, smallest if min-heap) item in the binary heap, or","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":125651,"byte_end":125745,"line_start":211,"line_end":211,"column_start":5,"column_end":99}},{"value":"/ None if it is empty.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":125750,"byte_end":125774,"line_start":212,"line_end":212,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":125779,"byte_end":125782,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":125787,"byte_end":125794,"line_start":214,"line_end":214,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":125799,"byte_end":125848,"line_start":215,"line_end":215,"column_start":5,"column_end":54}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":125853,"byte_end":125881,"line_start":216,"line_end":216,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":125886,"byte_end":125889,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, U8, Max> = BinaryHeap::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":125894,"byte_end":125955,"line_start":218,"line_end":218,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(heap.peek(), None);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":125960,"byte_end":125994,"line_start":219,"line_end":219,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":125999,"byte_end":126002,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126007,"byte_end":126033,"line_start":221,"line_end":221,"column_start":5,"column_end":31}},{"value":"/ heap.push(5).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126038,"byte_end":126064,"line_start":222,"line_end":222,"column_start":5,"column_end":31}},{"value":"/ heap.push(2).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126069,"byte_end":126095,"line_start":223,"line_end":223,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(heap.peek(), Some(&5));","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126100,"byte_end":126138,"line_start":224,"line_end":224,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126143,"byte_end":126150,"line_start":225,"line_end":225,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1136},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126975,"byte_end":126983,"line_start":257,"line_end":257,"column_start":12,"column_end":20},"name":"peek_mut","qualname":"<BinaryHeap<T, N, K>>::peek_mut","value":"pub fn peek_mut(&mut Self) -> Option<PeekMut<, T, N, K>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the greatest item in the binary heap, or\n `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the greatest item in the binary heap, or","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126239,"byte_end":126314,"line_start":230,"line_end":230,"column_start":5,"column_end":80}},{"value":"/ `None` if it is empty.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126319,"byte_end":126345,"line_start":231,"line_end":231,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126350,"byte_end":126353,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ Note: If the `PeekMut` value is leaked, the heap may be in an","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126358,"byte_end":126423,"line_start":233,"line_end":233,"column_start":5,"column_end":70}},{"value":"/ inconsistent state.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126428,"byte_end":126451,"line_start":234,"line_end":234,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126456,"byte_end":126459,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126464,"byte_end":126478,"line_start":236,"line_end":236,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126483,"byte_end":126486,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126491,"byte_end":126507,"line_start":238,"line_end":238,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126512,"byte_end":126515,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126520,"byte_end":126527,"line_start":240,"line_end":240,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126532,"byte_end":126581,"line_start":241,"line_end":241,"column_start":5,"column_end":54}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126586,"byte_end":126614,"line_start":242,"line_end":242,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126619,"byte_end":126622,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, U8, Max> = BinaryHeap::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126627,"byte_end":126688,"line_start":244,"line_end":244,"column_start":5,"column_end":66}},{"value":"/ assert!(heap.peek_mut().is_none());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126693,"byte_end":126732,"line_start":245,"line_end":245,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126737,"byte_end":126740,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ heap.push(1);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126745,"byte_end":126762,"line_start":247,"line_end":247,"column_start":5,"column_end":22}},{"value":"/ heap.push(5);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126767,"byte_end":126784,"line_start":248,"line_end":248,"column_start":5,"column_end":22}},{"value":"/ heap.push(2);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126789,"byte_end":126806,"line_start":249,"line_end":249,"column_start":5,"column_end":22}},{"value":"/ {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126811,"byte_end":126816,"line_start":250,"line_end":250,"column_start":5,"column_end":10}},{"value":"/     let mut val = heap.peek_mut().unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126821,"byte_end":126868,"line_start":251,"line_end":251,"column_start":5,"column_end":52}},{"value":"/     *val = 0;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126873,"byte_end":126890,"line_start":252,"line_end":252,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126895,"byte_end":126900,"line_start":253,"line_end":253,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126905,"byte_end":126908,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(heap.peek(), Some(&2));","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126913,"byte_end":126951,"line_start":255,"line_end":255,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":126956,"byte_end":126963,"line_start":256,"line_end":256,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1137},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":127746,"byte_end":127749,"line_start":283,"line_end":283,"column_start":12,"column_end":15},"name":"pop","qualname":"<BinaryHeap<T, N, K>>::pop","value":"pub fn pop(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the *top* (greatest if max-heap, smallest if min-heap) item from the binary heap and\n returns it, or None if it is empty.","sig":null,"attributes":[{"value":"/ Removes the *top* (greatest if max-heap, smallest if min-heap) item from the binary heap and","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":127211,"byte_end":127307,"line_start":268,"line_end":268,"column_start":5,"column_end":101}},{"value":"/ returns it, or None if it is empty.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":127312,"byte_end":127351,"line_start":269,"line_end":269,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":127356,"byte_end":127359,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":127364,"byte_end":127371,"line_start":271,"line_end":271,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":127376,"byte_end":127425,"line_start":272,"line_end":272,"column_start":5,"column_end":54}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":127430,"byte_end":127458,"line_start":273,"line_end":273,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":127463,"byte_end":127466,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, U8, Max> = BinaryHeap::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":127471,"byte_end":127532,"line_start":275,"line_end":275,"column_start":5,"column_end":66}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":127537,"byte_end":127563,"line_start":276,"line_end":276,"column_start":5,"column_end":31}},{"value":"/ heap.push(3).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":127568,"byte_end":127594,"line_start":277,"line_end":277,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":127599,"byte_end":127602,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(heap.pop(), Some(3));","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":127607,"byte_end":127643,"line_start":279,"line_end":279,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(heap.pop(), Some(1));","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":127648,"byte_end":127684,"line_start":280,"line_end":280,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(heap.pop(), None);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":127689,"byte_end":127722,"line_start":281,"line_end":281,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":127727,"byte_end":127734,"line_start":282,"line_end":282,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1138},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":128091,"byte_end":128104,"line_start":293,"line_end":293,"column_start":19,"column_end":32},"name":"pop_unchecked","qualname":"<BinaryHeap<T, N, K>>::pop_unchecked","value":"pub unsafe fn pop_unchecked(&mut Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes the *top* (greatest if max-heap, smallest if min-heap) item from the binary heap and\n returns it, without checking if the binary heap is empty.\n","sig":null,"attributes":[{"value":"/ Removes the *top* (greatest if max-heap, smallest if min-heap) item from the binary heap and","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":127910,"byte_end":128006,"line_start":291,"line_end":291,"column_start":5,"column_end":101}},{"value":"/ returns it, without checking if the binary heap is empty.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":128011,"byte_end":128072,"line_start":292,"line_end":292,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1139},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":128788,"byte_end":128792,"line_start":317,"line_end":317,"column_start":12,"column_end":16},"name":"push","qualname":"<BinaryHeap<T, N, K>>::push","value":"pub fn push(&mut Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Pushes an item onto the binary heap.","sig":null,"attributes":[{"value":"/ Pushes an item onto the binary heap.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":128364,"byte_end":128404,"line_start":303,"line_end":303,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":128409,"byte_end":128412,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":128417,"byte_end":128424,"line_start":305,"line_end":305,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":128429,"byte_end":128478,"line_start":306,"line_end":306,"column_start":5,"column_end":54}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":128483,"byte_end":128511,"line_start":307,"line_end":307,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":128516,"byte_end":128519,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, U8, Max> = BinaryHeap::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":128524,"byte_end":128585,"line_start":309,"line_end":309,"column_start":5,"column_end":66}},{"value":"/ heap.push(3).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":128590,"byte_end":128616,"line_start":310,"line_end":310,"column_start":5,"column_end":31}},{"value":"/ heap.push(5).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":128621,"byte_end":128647,"line_start":311,"line_end":311,"column_start":5,"column_end":31}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":128652,"byte_end":128678,"line_start":312,"line_end":312,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":128683,"byte_end":128686,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(heap.len(), 3);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":128691,"byte_end":128721,"line_start":314,"line_end":314,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(heap.peek(), Some(&5));","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":128726,"byte_end":128764,"line_start":315,"line_end":315,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":128769,"byte_end":128776,"line_start":316,"line_end":316,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1140},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":129074,"byte_end":129088,"line_start":327,"line_end":327,"column_start":19,"column_end":33},"name":"push_unchecked","qualname":"<BinaryHeap<T, N, K>>::push_unchecked","value":"pub unsafe fn push_unchecked(&mut Self, T)","parent":null,"children":[],"decl_id":null,"docs":" Pushes an item onto the binary heap without first checking if it's full.\n","sig":null,"attributes":[{"value":"/ Pushes an item onto the binary heap without first checking if it's full.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":128979,"byte_end":129055,"line_start":326,"line_end":326,"column_start":5,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":1157},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":132593,"byte_end":132600,"line_start":440,"line_end":440,"column_start":12,"column_end":19},"name":"PeekMut","qualname":"::binary_heap::PeekMut","value":"PeekMut {  }","parent":null,"children":[{"krate":0,"index":1162},{"krate":0,"index":1163}],"decl_id":null,"docs":" Structure wrapping a mutable reference to the greatest item on a\n `BinaryHeap`.","sig":null,"attributes":[{"value":"/ Structure wrapping a mutable reference to the greatest item on a","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":132276,"byte_end":132344,"line_start":432,"line_end":432,"column_start":1,"column_end":69}},{"value":"/ `BinaryHeap`.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":132345,"byte_end":132362,"line_start":433,"line_end":433,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":132363,"byte_end":132366,"line_start":434,"line_end":434,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`peek_mut`] method on [`BinaryHeap`]. See","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":132367,"byte_end":132445,"line_start":435,"line_end":435,"column_start":1,"column_end":79}},{"value":"/ its documentation for more.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":132446,"byte_end":132477,"line_start":436,"line_end":436,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":132478,"byte_end":132481,"line_start":437,"line_end":437,"column_start":1,"column_end":4}},{"value":"/ [`peek_mut`]: struct.BinaryHeap.html#method.peek_mut","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":132482,"byte_end":132538,"line_start":438,"line_end":438,"column_start":1,"column_end":57}},{"value":"/ [`BinaryHeap`]: struct.BinaryHeap.html","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":132539,"byte_end":132581,"line_start":439,"line_end":439,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1185},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":133782,"byte_end":133785,"line_start":497,"line_end":497,"column_start":12,"column_end":15},"name":"pop","qualname":"<PeekMut>::pop","value":"pub fn pop(PeekMut) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes the peeked value from the heap and returns it.\n","sig":null,"attributes":[{"value":"/ Removes the peeked value from the heap and returns it.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":133712,"byte_end":133770,"line_start":496,"line_end":496,"column_start":5,"column_end":63}}]},{"kind":"Mod","id":{"krate":0,"index":1218},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/i.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"i","qualname":"::i","value":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/i.rs","parent":null,"children":[{"krate":0,"index":1219},{"krate":0,"index":1220},{"krate":0,"index":1221},{"krate":0,"index":1223},{"krate":0,"index":1226},{"krate":0,"index":1227},{"krate":0,"index":1230},{"krate":0,"index":1231},{"krate":0,"index":1233},{"krate":0,"index":1238},{"krate":0,"index":1241},{"krate":0,"index":1248},{"krate":0,"index":1251}],"decl_id":null,"docs":" Unfortunate implementation detail required to construct `heapless` types in const context\n","sig":null,"attributes":[{"value":"/ Unfortunate implementation detail required to construct `heapless` types in const context","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/i.rs","byte_start":138482,"byte_end":138575,"line_start":1,"line_end":1,"column_start":1,"column_end":94}}]},{"kind":"Struct","id":{"krate":0,"index":1233},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/i.rs","byte_start":138779,"byte_end":138789,"line_start":9,"line_end":9,"column_start":12,"column_end":22},"name":"BinaryHeap","qualname":"::i::BinaryHeap","value":"BinaryHeap {  }","parent":null,"children":[{"krate":0,"index":1236},{"krate":0,"index":1237}],"decl_id":null,"docs":" `const-fn` version of [`BinaryHeap`](../binary_heap/struct.BinaryHeap.html)\n","sig":null,"attributes":[{"value":"/ `const-fn` version of [`BinaryHeap`](../binary_heap/struct.BinaryHeap.html)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/i.rs","byte_start":138688,"byte_end":138767,"line_start":8,"line_end":8,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":1238},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/i.rs","byte_start":138945,"byte_end":138954,"line_start":15,"line_end":15,"column_start":12,"column_end":21},"name":"LinearMap","qualname":"::i::LinearMap","value":"LinearMap {  }","parent":null,"children":[{"krate":0,"index":1240}],"decl_id":null,"docs":" `const-fn` version of [`LinearMap`](../struct.LinearMap.html)\n","sig":null,"attributes":[{"value":"/ `const-fn` version of [`LinearMap`](../struct.LinearMap.html)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/i.rs","byte_start":138868,"byte_end":138933,"line_start":14,"line_end":14,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1241},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/i.rs","byte_start":139094,"byte_end":139099,"line_start":21,"line_end":21,"column_start":12,"column_end":17},"name":"Queue","qualname":"::i::Queue","value":"Queue {  }","parent":null,"children":[{"krate":0,"index":1245},{"krate":0,"index":1246},{"krate":0,"index":1247}],"decl_id":null,"docs":" `const-fn` version of [`spsc::Queue`](../spsc/struct.Queue.html)\n","sig":null,"attributes":[{"value":"/ `const-fn` version of [`spsc::Queue`](../spsc/struct.Queue.html)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/i.rs","byte_start":138994,"byte_end":139062,"line_start":19,"line_end":19,"column_start":1,"column_end":69}},{"value":"cfg(has_atomics)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/i.rs","byte_start":139063,"byte_end":139082,"line_start":20,"line_end":20,"column_start":1,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":1248},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/i.rs","byte_start":139401,"byte_end":139407,"line_start":32,"line_end":32,"column_start":12,"column_end":18},"name":"String","qualname":"::i::String","value":"String {  }","parent":null,"children":[{"krate":0,"index":1250}],"decl_id":null,"docs":" `const-fn` version of [`String`](../struct.String.html)\n","sig":null,"attributes":[{"value":"/ `const-fn` version of [`String`](../struct.String.html)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/i.rs","byte_start":139330,"byte_end":139389,"line_start":31,"line_end":31,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1251},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/i.rs","byte_start":139509,"byte_end":139512,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"Vec","qualname":"::i::Vec","value":"Vec {  }","parent":null,"children":[{"krate":0,"index":1253},{"krate":0,"index":1254}],"decl_id":null,"docs":" `const-fn` version of [`Vec`](../struct.Vec.html)\n","sig":null,"attributes":[{"value":"/ `const-fn` version of [`Vec`](../struct.Vec.html)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/i.rs","byte_start":139444,"byte_end":139497,"line_start":36,"line_end":36,"column_start":1,"column_end":54}}]},{"kind":"Mod","id":{"krate":0,"index":1255},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mpmc","qualname":"::mpmc","value":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","parent":null,"children":[{"krate":0,"index":1256},{"krate":0,"index":1257},{"krate":0,"index":1260},{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1267},{"krate":0,"index":1270},{"krate":0,"index":1276},{"krate":0,"index":1282},{"krate":0,"index":1284},{"krate":0,"index":1290},{"krate":0,"index":1296},{"krate":0,"index":1298},{"krate":0,"index":1304},{"krate":0,"index":1310},{"krate":0,"index":1312},{"krate":0,"index":1318},{"krate":0,"index":1324},{"krate":0,"index":1326},{"krate":0,"index":1332},{"krate":0,"index":1338},{"krate":0,"index":1340},{"krate":0,"index":1346},{"krate":0,"index":1352},{"krate":0,"index":1354},{"krate":0,"index":1358},{"krate":0,"index":1361},{"krate":0,"index":1363}],"decl_id":null,"docs":" A fixed capacity Multiple-Producer Multiple-Consumer (MPMC) lock-free queue","sig":null,"attributes":[{"value":"cfg(all(has_cas, feature = \"cas\"))","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":4079,"byte_end":4116,"line_start":103,"line_end":103,"column_start":1,"column_end":38}},{"value":"/ A fixed capacity Multiple-Producer Multiple-Consumer (MPMC) lock-free queue","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":139587,"byte_end":139666,"line_start":1,"line_end":1,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":139667,"byte_end":139670,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ NOTE: This module is not available on targets that do *not* support CAS operations, e.g. ARMv6-M","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":139671,"byte_end":139771,"line_start":3,"line_end":3,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":139772,"byte_end":139775,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":139776,"byte_end":139789,"line_start":5,"line_end":5,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":139790,"byte_end":139793,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This queue can be constructed in \"const context\". Placing it in a `static` variable lets *all*","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":139794,"byte_end":139892,"line_start":7,"line_end":7,"column_start":1,"column_end":99}},{"value":"/ contexts (interrupts / threads / `main`) safely enqueue and dequeue items from it.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":139893,"byte_end":139979,"line_start":8,"line_end":8,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":139980,"byte_end":139983,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ``` ignore","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":139984,"byte_end":139998,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/ #![no_main]","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":139999,"byte_end":140014,"line_start":11,"line_end":11,"column_start":1,"column_end":16}},{"value":"/ #![no_std]","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140015,"byte_end":140029,"line_start":12,"line_end":12,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140030,"byte_end":140033,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ use panic_semihosting as _;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140034,"byte_end":140065,"line_start":14,"line_end":14,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140066,"byte_end":140069,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ use cortex_m::{asm, peripheral::syst::SystClkSource};","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140070,"byte_end":140127,"line_start":16,"line_end":16,"column_start":1,"column_end":58}},{"value":"/ use cortex_m_rt::{entry, exception};","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140128,"byte_end":140168,"line_start":17,"line_end":17,"column_start":1,"column_end":41}},{"value":"/ use cortex_m_semihosting::hprintln;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140169,"byte_end":140208,"line_start":18,"line_end":18,"column_start":1,"column_end":40}},{"value":"/ use heapless::mpmc::Q2;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140209,"byte_end":140236,"line_start":19,"line_end":19,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140237,"byte_end":140240,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ static Q: Q2<u8> = Q2::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140241,"byte_end":140274,"line_start":21,"line_end":21,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140275,"byte_end":140278,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ #[entry]","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140279,"byte_end":140291,"line_start":23,"line_end":23,"column_start":1,"column_end":13}},{"value":"/ fn main() -> ! {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140292,"byte_end":140312,"line_start":24,"line_end":24,"column_start":1,"column_end":21}},{"value":"/     if let Some(p) = cortex_m::Peripherals::take() {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140313,"byte_end":140369,"line_start":25,"line_end":25,"column_start":1,"column_end":57}},{"value":"/         let mut syst = p.SYST;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140370,"byte_end":140404,"line_start":26,"line_end":26,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140405,"byte_end":140408,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/         // configures the system timer to trigger a SysTick exception every second","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140409,"byte_end":140495,"line_start":28,"line_end":28,"column_start":1,"column_end":87}},{"value":"/         syst.set_clock_source(SystClkSource::Core);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140496,"byte_end":140551,"line_start":29,"line_end":29,"column_start":1,"column_end":56}},{"value":"/         syst.set_reload(12_000_000);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140552,"byte_end":140592,"line_start":30,"line_end":30,"column_start":1,"column_end":41}},{"value":"/         syst.enable_counter();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140593,"byte_end":140627,"line_start":31,"line_end":31,"column_start":1,"column_end":35}},{"value":"/         syst.enable_interrupt();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140628,"byte_end":140664,"line_start":32,"line_end":32,"column_start":1,"column_end":37}},{"value":"/     }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140665,"byte_end":140674,"line_start":33,"line_end":33,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140675,"byte_end":140678,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/     loop {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140679,"byte_end":140693,"line_start":35,"line_end":35,"column_start":1,"column_end":15}},{"value":"/         if let Some(x) = Q.dequeue() {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140694,"byte_end":140736,"line_start":36,"line_end":36,"column_start":1,"column_end":43}},{"value":"/             hprintln!(\"{}\", x).ok();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140737,"byte_end":140777,"line_start":37,"line_end":37,"column_start":1,"column_end":41}},{"value":"/         } else {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140778,"byte_end":140798,"line_start":38,"line_end":38,"column_start":1,"column_end":21}},{"value":"/             asm::wfi();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140799,"byte_end":140826,"line_start":39,"line_end":39,"column_start":1,"column_end":28}},{"value":"/         }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140827,"byte_end":140840,"line_start":40,"line_end":40,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140841,"byte_end":140850,"line_start":41,"line_end":41,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140851,"byte_end":140856,"line_start":42,"line_end":42,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140857,"byte_end":140860,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ #[exception]","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140861,"byte_end":140877,"line_start":44,"line_end":44,"column_start":1,"column_end":17}},{"value":"/ fn SysTick() {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140878,"byte_end":140896,"line_start":45,"line_end":45,"column_start":1,"column_end":19}},{"value":"/     static mut COUNT: u8 = 0;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140897,"byte_end":140930,"line_start":46,"line_end":46,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140931,"byte_end":140934,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/     Q.enqueue(*COUNT).ok();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140935,"byte_end":140966,"line_start":48,"line_end":48,"column_start":1,"column_end":32}},{"value":"/     *COUNT += 1;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140967,"byte_end":140987,"line_start":49,"line_end":49,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140988,"byte_end":140993,"line_start":50,"line_end":50,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":140994,"byte_end":141001,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":141002,"byte_end":141005,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # Benchmark","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":141006,"byte_end":141021,"line_start":53,"line_end":53,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":141022,"byte_end":141025,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ Measured on a ARM Cortex-M3 core running at 8 MHz and with zero Flash wait cycles","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":141026,"byte_end":141111,"line_start":55,"line_end":55,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":141112,"byte_end":141115,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ N| `Q8::<u8>::enqueue().ok()` (`z`) | `Q8::<u8>::dequeue()` (`z`) |","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":141116,"byte_end":141187,"line_start":57,"line_end":57,"column_start":1,"column_end":72}},{"value":"/ -|----------------------------------|-----------------------------|","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":141188,"byte_end":141259,"line_start":58,"line_end":58,"column_start":1,"column_end":72}},{"value":"/ 0|34                                |35                           |","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":141260,"byte_end":141331,"line_start":59,"line_end":59,"column_start":1,"column_end":72}},{"value":"/ 1|52                                |53                           |","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":141332,"byte_end":141403,"line_start":60,"line_end":60,"column_start":1,"column_end":72}},{"value":"/ 2|69                                |71                           |","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":141404,"byte_end":141475,"line_start":61,"line_end":61,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":141476,"byte_end":141479,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ - `N` denotes the number of *interruptions*. On Cortex-M, an interruption consists of an","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":141480,"byte_end":141572,"line_start":63,"line_end":63,"column_start":1,"column_end":93}},{"value":"/   interrupt handler preempting the would-be atomic section of the `enqueue` / `dequeue`","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":141573,"byte_end":141664,"line_start":64,"line_end":64,"column_start":1,"column_end":92}},{"value":"/   operation. Note that it does *not* matter if the higher priority handler uses the queue or","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":141665,"byte_end":141761,"line_start":65,"line_end":65,"column_start":1,"column_end":97}},{"value":"/   not.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":141762,"byte_end":141772,"line_start":66,"line_end":66,"column_start":1,"column_end":11}},{"value":"/ - All execution times are in clock cycles. 1 clock cycle = 125 ns.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":141773,"byte_end":141843,"line_start":67,"line_end":67,"column_start":1,"column_end":71}},{"value":"/ - Execution time is *dependent* of `mem::size_of::<T>()`. Both operations include one","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":141844,"byte_end":141933,"line_start":68,"line_end":68,"column_start":1,"column_end":90}},{"value":"/ `memcpy(T)` in their successful path.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":141934,"byte_end":141975,"line_start":69,"line_end":69,"column_start":1,"column_end":42}},{"value":"/ - The optimization level is indicated in parentheses.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":141976,"byte_end":142033,"line_start":70,"line_end":70,"column_start":1,"column_end":58}},{"value":"/ - The numbers reported correspond to the successful path (i.e. `Some` is returned by `dequeue`","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":142034,"byte_end":142132,"line_start":71,"line_end":71,"column_start":1,"column_end":99}},{"value":"/ and `Ok` is returned by `enqueue`).","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":142133,"byte_end":142172,"line_start":72,"line_end":72,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":142173,"byte_end":142176,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ # Portability","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":142177,"byte_end":142194,"line_start":74,"line_end":74,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":142195,"byte_end":142198,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ This module is not exposed to architectures that lack the instructions to implement CAS loops.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":142199,"byte_end":142297,"line_start":76,"line_end":76,"column_start":1,"column_end":99}},{"value":"/ Those architectures include ARMv6-M (`thumbv6m-none-eabi`) and MSP430 (`msp430-none-elf`).","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":142298,"byte_end":142392,"line_start":77,"line_end":77,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":142393,"byte_end":142396,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ # References","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":142397,"byte_end":142413,"line_start":79,"line_end":79,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":142414,"byte_end":142417,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ This is an implementation of Dmitry Vyukov's [\"Bounded MPMC queue\"][0] minus the cache padding.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":142418,"byte_end":142517,"line_start":81,"line_end":81,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":142518,"byte_end":142521,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ [0]: http://www.1024cores.net/home/lock-free-algorithms/queues/bounded-mpmc-queue","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":142522,"byte_end":142607,"line_start":83,"line_end":83,"column_start":1,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":1270},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":142766,"byte_end":142768,"line_start":92,"line_end":92,"column_start":12,"column_end":14},"name":"Q2","qualname":"::mpmc::Q2","value":"Q2 {  }","parent":null,"children":[{"krate":0,"index":1272},{"krate":0,"index":1274},{"krate":0,"index":1275}],"decl_id":null,"docs":" MPMC queue with a capacity for 2 elements\n","sig":null,"attributes":[{"value":"/ MPMC queue with a capacity for 2 elements","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":142709,"byte_end":142754,"line_start":91,"line_end":91,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1279},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":142962,"byte_end":142965,"line_start":102,"line_end":102,"column_start":18,"column_end":21},"name":"new","qualname":"<Q2<T>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue\n","sig":null,"attributes":[{"value":"/ Creates an empty queue","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":142918,"byte_end":142944,"line_start":101,"line_end":101,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1280},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":143258,"byte_end":143265,"line_start":111,"line_end":111,"column_start":12,"column_end":19},"name":"dequeue","qualname":"<Q2<T>>::dequeue","value":"pub fn dequeue(&Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the item in the front of the queue, or `None` if the queue is empty\n","sig":null,"attributes":[{"value":"/ Returns the item in the front of the queue, or `None` if the queue is empty","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":143167,"byte_end":143246,"line_start":110,"line_end":110,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1281},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":143501,"byte_end":143508,"line_start":118,"line_end":118,"column_start":12,"column_end":19},"name":"enqueue","qualname":"<Q2<T>>::enqueue","value":"pub fn enqueue(&Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Adds an `item` to the end of the queue","sig":null,"attributes":[{"value":"/ Adds an `item` to the end of the queue","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":143386,"byte_end":143428,"line_start":115,"line_end":115,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":143433,"byte_end":143436,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ Returns back the `item` if the queue is full","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":143441,"byte_end":143489,"line_start":117,"line_end":117,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":1284},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":143850,"byte_end":143852,"line_start":133,"line_end":133,"column_start":12,"column_end":14},"name":"Q4","qualname":"::mpmc::Q4","value":"Q4 {  }","parent":null,"children":[{"krate":0,"index":1286},{"krate":0,"index":1288},{"krate":0,"index":1289}],"decl_id":null,"docs":" MPMC queue with a capacity for 4 elements\n","sig":null,"attributes":[{"value":"/ MPMC queue with a capacity for 4 elements","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":143793,"byte_end":143838,"line_start":132,"line_end":132,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1293},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":144046,"byte_end":144049,"line_start":143,"line_end":143,"column_start":18,"column_end":21},"name":"new","qualname":"<Q4<T>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue\n","sig":null,"attributes":[{"value":"/ Creates an empty queue","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":144002,"byte_end":144028,"line_start":142,"line_end":142,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1294},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":144370,"byte_end":144377,"line_start":152,"line_end":152,"column_start":12,"column_end":19},"name":"dequeue","qualname":"<Q4<T>>::dequeue","value":"pub fn dequeue(&Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the item in the front of the queue, or `None` if the queue is empty\n","sig":null,"attributes":[{"value":"/ Returns the item in the front of the queue, or `None` if the queue is empty","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":144279,"byte_end":144358,"line_start":151,"line_end":151,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1295},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":144613,"byte_end":144620,"line_start":159,"line_end":159,"column_start":12,"column_end":19},"name":"enqueue","qualname":"<Q4<T>>::enqueue","value":"pub fn enqueue(&Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Adds an `item` to the end of the queue","sig":null,"attributes":[{"value":"/ Adds an `item` to the end of the queue","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":144498,"byte_end":144540,"line_start":156,"line_end":156,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":144545,"byte_end":144548,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ Returns back the `item` if the queue is full","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":144553,"byte_end":144601,"line_start":158,"line_end":158,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":1298},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":144962,"byte_end":144964,"line_start":174,"line_end":174,"column_start":12,"column_end":14},"name":"Q8","qualname":"::mpmc::Q8","value":"Q8 {  }","parent":null,"children":[{"krate":0,"index":1300},{"krate":0,"index":1302},{"krate":0,"index":1303}],"decl_id":null,"docs":" MPMC queue with a capacity for 8 elements\n","sig":null,"attributes":[{"value":"/ MPMC queue with a capacity for 8 elements","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":144905,"byte_end":144950,"line_start":173,"line_end":173,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1307},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":145158,"byte_end":145161,"line_start":184,"line_end":184,"column_start":18,"column_end":21},"name":"new","qualname":"<Q8<T>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue\n","sig":null,"attributes":[{"value":"/ Creates an empty queue","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":145114,"byte_end":145140,"line_start":183,"line_end":183,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1308},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":145681,"byte_end":145688,"line_start":202,"line_end":202,"column_start":12,"column_end":19},"name":"dequeue","qualname":"<Q8<T>>::dequeue","value":"pub fn dequeue(&Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the item in the front of the queue, or `None` if the queue is empty\n","sig":null,"attributes":[{"value":"/ Returns the item in the front of the queue, or `None` if the queue is empty","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":145590,"byte_end":145669,"line_start":201,"line_end":201,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1309},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":145924,"byte_end":145931,"line_start":209,"line_end":209,"column_start":12,"column_end":19},"name":"enqueue","qualname":"<Q8<T>>::enqueue","value":"pub fn enqueue(&Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Adds an `item` to the end of the queue","sig":null,"attributes":[{"value":"/ Adds an `item` to the end of the queue","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":145809,"byte_end":145851,"line_start":206,"line_end":206,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":145856,"byte_end":145859,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ Returns back the `item` if the queue is full","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":145864,"byte_end":145912,"line_start":208,"line_end":208,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":1312},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":146274,"byte_end":146277,"line_start":224,"line_end":224,"column_start":12,"column_end":15},"name":"Q16","qualname":"::mpmc::Q16","value":"Q16 {  }","parent":null,"children":[{"krate":0,"index":1314},{"krate":0,"index":1316},{"krate":0,"index":1317}],"decl_id":null,"docs":" MPMC queue with a capacity for 16 elements\n","sig":null,"attributes":[{"value":"/ MPMC queue with a capacity for 16 elements","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":146216,"byte_end":146262,"line_start":223,"line_end":223,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1321},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":146474,"byte_end":146477,"line_start":234,"line_end":234,"column_start":18,"column_end":21},"name":"new","qualname":"<Q16<T>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue\n","sig":null,"attributes":[{"value":"/ Creates an empty queue","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":146430,"byte_end":146456,"line_start":233,"line_end":233,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1322},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":147243,"byte_end":147250,"line_start":260,"line_end":260,"column_start":12,"column_end":19},"name":"dequeue","qualname":"<Q16<T>>::dequeue","value":"pub fn dequeue(&Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the item in the front of the queue, or `None` if the queue is empty\n","sig":null,"attributes":[{"value":"/ Returns the item in the front of the queue, or `None` if the queue is empty","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":147152,"byte_end":147231,"line_start":259,"line_end":259,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1323},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":147486,"byte_end":147493,"line_start":267,"line_end":267,"column_start":12,"column_end":19},"name":"enqueue","qualname":"<Q16<T>>::enqueue","value":"pub fn enqueue(&Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Adds an `item` to the end of the queue","sig":null,"attributes":[{"value":"/ Adds an `item` to the end of the queue","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":147371,"byte_end":147413,"line_start":264,"line_end":264,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":147418,"byte_end":147421,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ Returns back the `item` if the queue is full","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":147426,"byte_end":147474,"line_start":266,"line_end":266,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":1326},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":147837,"byte_end":147840,"line_start":282,"line_end":282,"column_start":12,"column_end":15},"name":"Q32","qualname":"::mpmc::Q32","value":"Q32 {  }","parent":null,"children":[{"krate":0,"index":1328},{"krate":0,"index":1330},{"krate":0,"index":1331}],"decl_id":null,"docs":" MPMC queue with a capacity for 32 elements\n","sig":null,"attributes":[{"value":"/ MPMC queue with a capacity for 32 elements","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":147779,"byte_end":147825,"line_start":281,"line_end":281,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1335},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":148037,"byte_end":148040,"line_start":292,"line_end":292,"column_start":18,"column_end":21},"name":"new","qualname":"<Q32<T>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue\n","sig":null,"attributes":[{"value":"/ Creates an empty queue","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":147993,"byte_end":148019,"line_start":291,"line_end":291,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1336},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":149302,"byte_end":149309,"line_start":334,"line_end":334,"column_start":12,"column_end":19},"name":"dequeue","qualname":"<Q32<T>>::dequeue","value":"pub fn dequeue(&Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the item in the front of the queue, or `None` if the queue is empty\n","sig":null,"attributes":[{"value":"/ Returns the item in the front of the queue, or `None` if the queue is empty","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":149211,"byte_end":149290,"line_start":333,"line_end":333,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1337},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":149545,"byte_end":149552,"line_start":341,"line_end":341,"column_start":12,"column_end":19},"name":"enqueue","qualname":"<Q32<T>>::enqueue","value":"pub fn enqueue(&Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Adds an `item` to the end of the queue","sig":null,"attributes":[{"value":"/ Adds an `item` to the end of the queue","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":149430,"byte_end":149472,"line_start":338,"line_end":338,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":149477,"byte_end":149480,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ Returns back the `item` if the queue is full","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":149485,"byte_end":149533,"line_start":340,"line_end":340,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":1340},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":149896,"byte_end":149899,"line_start":356,"line_end":356,"column_start":12,"column_end":15},"name":"Q64","qualname":"::mpmc::Q64","value":"Q64 {  }","parent":null,"children":[{"krate":0,"index":1342},{"krate":0,"index":1344},{"krate":0,"index":1345}],"decl_id":null,"docs":" MPMC queue with a capacity for 64 elements\n","sig":null,"attributes":[{"value":"/ MPMC queue with a capacity for 64 elements","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":149838,"byte_end":149884,"line_start":355,"line_end":355,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1349},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":150096,"byte_end":150099,"line_start":366,"line_end":366,"column_start":18,"column_end":21},"name":"new","qualname":"<Q64<T>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue\n","sig":null,"attributes":[{"value":"/ Creates an empty queue","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":150052,"byte_end":150078,"line_start":365,"line_end":365,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1350},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":152353,"byte_end":152360,"line_start":440,"line_end":440,"column_start":12,"column_end":19},"name":"dequeue","qualname":"<Q64<T>>::dequeue","value":"pub fn dequeue(&Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the item in the front of the queue, or `None` if the queue is empty\n","sig":null,"attributes":[{"value":"/ Returns the item in the front of the queue, or `None` if the queue is empty","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":152262,"byte_end":152341,"line_start":439,"line_end":439,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1351},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":152596,"byte_end":152603,"line_start":447,"line_end":447,"column_start":12,"column_end":19},"name":"enqueue","qualname":"<Q64<T>>::enqueue","value":"pub fn enqueue(&Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Adds an `item` to the end of the queue","sig":null,"attributes":[{"value":"/ Adds an `item` to the end of the queue","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":152481,"byte_end":152523,"line_start":444,"line_end":444,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":152528,"byte_end":152531,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ Returns back the `item` if the queue is full","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":152536,"byte_end":152584,"line_start":446,"line_end":446,"column_start":5,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":1365},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pool","qualname":"::pool","value":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","parent":null,"children":[{"krate":0,"index":1366},{"krate":0,"index":1367},{"krate":0,"index":1370},{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1377},{"krate":0,"index":1380},{"krate":0,"index":1381},{"krate":0,"index":1382},{"krate":0,"index":1384},{"krate":0,"index":1387},{"krate":0,"index":1388},{"krate":0,"index":1390},{"krate":0,"index":1393},{"krate":0,"index":1394},{"krate":0,"index":1397},{"krate":0,"index":1400},{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1407},{"krate":0,"index":1410},{"krate":0,"index":1413},{"krate":0,"index":1414},{"krate":0,"index":1417},{"krate":0,"index":1420},{"krate":0,"index":1543},{"krate":0,"index":1625},{"krate":0,"index":1629},{"krate":0,"index":1631},{"krate":0,"index":1640},{"krate":0,"index":1645},{"krate":0,"index":1648},{"krate":0,"index":1649},{"krate":0,"index":1650},{"krate":0,"index":1653},{"krate":0,"index":1656},{"krate":0,"index":1658},{"krate":0,"index":1662},{"krate":0,"index":1665},{"krate":0,"index":1669},{"krate":0,"index":1672},{"krate":0,"index":1675},{"krate":0,"index":1678},{"krate":0,"index":1681},{"krate":0,"index":1683},{"krate":0,"index":1686},{"krate":0,"index":1689}],"decl_id":null,"docs":" A heap-less, interrupt-safe, lock-free memory pool (\\*)","sig":null,"attributes":[{"value":"cfg(all(has_cas, feature = \"cas\"))","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":4131,"byte_end":4168,"line_start":105,"line_end":105,"column_start":1,"column_end":38}},{"value":"/ A heap-less, interrupt-safe, lock-free memory pool (\\*)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":155785,"byte_end":155844,"line_start":1,"line_end":1,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":155845,"byte_end":155848,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ NOTE: This module is not available on targets that do *not* support CAS operations, e.g. ARMv6-M","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":155849,"byte_end":155949,"line_start":3,"line_end":3,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":155950,"byte_end":155953,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ (\\*) Currently, the implementation is only lock-free *and* `Sync` on ARMv7-{A,R,M} & ARMv8-M","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":155954,"byte_end":156050,"line_start":5,"line_end":5,"column_start":1,"column_end":97}},{"value":"/ devices","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156051,"byte_end":156062,"line_start":6,"line_end":6,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156063,"byte_end":156066,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156067,"byte_end":156081,"line_start":8,"line_end":8,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156082,"byte_end":156085,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ The most common way of using this pool is as a global singleton; the singleton mode gives you","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156086,"byte_end":156183,"line_start":10,"line_end":10,"column_start":1,"column_end":98}},{"value":"/ automatic deallocation of memory blocks on `drop`.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156184,"byte_end":156238,"line_start":11,"line_end":11,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156239,"byte_end":156242,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ``` ignore","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156243,"byte_end":156257,"line_start":13,"line_end":13,"column_start":1,"column_end":15}},{"value":"/ #![no_main]","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156258,"byte_end":156273,"line_start":14,"line_end":14,"column_start":1,"column_end":16}},{"value":"/ #![no_std]","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156274,"byte_end":156288,"line_start":15,"line_end":15,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156289,"byte_end":156292,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ use heapless::{pool, pool::singleton::Box};","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156293,"byte_end":156340,"line_start":17,"line_end":17,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156341,"byte_end":156344,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ // instantiate a memory pool of `[u8; 128]` blocks as a global singleton","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156345,"byte_end":156421,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ pool!(","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156422,"byte_end":156432,"line_start":20,"line_end":20,"column_start":1,"column_end":11}},{"value":"/     // attributes can be used here","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156433,"byte_end":156471,"line_start":21,"line_end":21,"column_start":1,"column_end":39}},{"value":"/     // #[link_section = \".ccram.A\"]","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156472,"byte_end":156511,"line_start":22,"line_end":22,"column_start":1,"column_end":40}},{"value":"/     A: [u8; 128]","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156512,"byte_end":156532,"line_start":23,"line_end":23,"column_start":1,"column_end":21}},{"value":"/ );","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156533,"byte_end":156539,"line_start":24,"line_end":24,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156540,"byte_end":156543,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ #[entry]","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156544,"byte_end":156556,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/ fn main() -> ! {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156557,"byte_end":156577,"line_start":27,"line_end":27,"column_start":1,"column_end":21}},{"value":"/     static mut MEMORY: [u8; 1024] = [0; 1024];","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156578,"byte_end":156628,"line_start":28,"line_end":28,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156629,"byte_end":156632,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/     // increase the capacity of the pool by ~8 blocks","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156633,"byte_end":156690,"line_start":30,"line_end":30,"column_start":1,"column_end":58}},{"value":"/     A::grow(MEMORY);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156691,"byte_end":156715,"line_start":31,"line_end":31,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156716,"byte_end":156719,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/     // claim a block of memory","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156720,"byte_end":156754,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"/     // note that the type is `Box<A>`, and not `Box<[u8; 128]>`","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156755,"byte_end":156822,"line_start":34,"line_end":34,"column_start":1,"column_end":68}},{"value":"/     // `A` is the \"name\" of the pool","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156823,"byte_end":156863,"line_start":35,"line_end":35,"column_start":1,"column_end":41}},{"value":"/     let x: Box<A, _> = A::alloc().unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156864,"byte_end":156911,"line_start":36,"line_end":36,"column_start":1,"column_end":48}},{"value":"/     loop {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156912,"byte_end":156926,"line_start":37,"line_end":37,"column_start":1,"column_end":15}},{"value":"/         // .. do stuff with `x` ..","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156927,"byte_end":156965,"line_start":38,"line_end":38,"column_start":1,"column_end":39}},{"value":"/     }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156966,"byte_end":156975,"line_start":39,"line_end":39,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156976,"byte_end":156981,"line_start":40,"line_end":40,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156982,"byte_end":156985,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ #[exception]","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":156986,"byte_end":157002,"line_start":42,"line_end":42,"column_start":1,"column_end":17}},{"value":"/ fn SysTick() {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":157003,"byte_end":157021,"line_start":43,"line_end":43,"column_start":1,"column_end":19}},{"value":"/     // claim a block of memory","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":157022,"byte_end":157056,"line_start":44,"line_end":44,"column_start":1,"column_end":35}},{"value":"/     let y = A::alloc().unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":157057,"byte_end":157093,"line_start":45,"line_end":45,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":157094,"byte_end":157097,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/     // .. do stuff with `y` ..","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":157098,"byte_end":157132,"line_start":47,"line_end":47,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":157133,"byte_end":157136,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/     // return the memory block to the pool","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":157137,"byte_end":157183,"line_start":49,"line_end":49,"column_start":1,"column_end":47}},{"value":"/     drop(y);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":157184,"byte_end":157200,"line_start":50,"line_end":50,"column_start":1,"column_end":17}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":157201,"byte_end":157206,"line_start":51,"line_end":51,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":157207,"byte_end":157214,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":157215,"byte_end":157218,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ # Portability","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":157219,"byte_end":157236,"line_start":54,"line_end":54,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":157237,"byte_end":157240,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ This pool internally uses a Treiber stack which is known to be susceptible to the ABA problem.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":157241,"byte_end":157339,"line_start":56,"line_end":56,"column_start":1,"column_end":99}},{"value":"/ The only counter measure against the ABA problem that this implementation currently takes is","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":157340,"byte_end":157436,"line_start":57,"line_end":57,"column_start":1,"column_end":97}},{"value":"/ relying on LL/SC (Link-local / Store-conditional) instructions being used to implement CAS loops","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":157437,"byte_end":157537,"line_start":58,"line_end":58,"column_start":1,"column_end":101}},{"value":"/ on the target architecture (see section on ['Soundness'](#soundness) for more information). For","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":157538,"byte_end":157637,"line_start":59,"line_end":59,"column_start":1,"column_end":100}},{"value":"/ this reason, `Pool` only implements `Sync` when compiling for some ARM cores.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":157638,"byte_end":157719,"line_start":60,"line_end":60,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":157720,"byte_end":157723,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ Also note that ARMv6-M architecture lacks the primitives for CAS loops so this module does *not*","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":157724,"byte_end":157824,"line_start":62,"line_end":62,"column_start":1,"column_end":101}},{"value":"/ exist for `thumbv6m-none-eabi`.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":157825,"byte_end":157860,"line_start":63,"line_end":63,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":157861,"byte_end":157864,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ # Soundness","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":157865,"byte_end":157880,"line_start":65,"line_end":65,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":157881,"byte_end":157884,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ This pool uses a Treiber stack to keep a list of free memory blocks (nodes). Each of these","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":157885,"byte_end":157979,"line_start":67,"line_end":67,"column_start":1,"column_end":95}},{"value":"/ nodes has a pointer to the next node. To claim a memory block we simply pop a node from the","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":157980,"byte_end":158075,"line_start":68,"line_end":68,"column_start":1,"column_end":96}},{"value":"/ top of the stack and use it as a memory block. The pop operation consists of swapping the","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":158076,"byte_end":158169,"line_start":69,"line_end":69,"column_start":1,"column_end":94}},{"value":"/ current head (top) node with the node below it. The Rust code for the `pop` operation is shown","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":158170,"byte_end":158268,"line_start":70,"line_end":70,"column_start":1,"column_end":99}},{"value":"/ below:","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":158269,"byte_end":158279,"line_start":71,"line_end":71,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":158280,"byte_end":158283,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ``` ignore","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":158284,"byte_end":158298,"line_start":73,"line_end":73,"column_start":1,"column_end":15}},{"value":"/ fn pop(&self) -> Option<NonNull<Node<T>>> {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":158299,"byte_end":158346,"line_start":74,"line_end":74,"column_start":1,"column_end":48}},{"value":"/     let fetch_order = ..;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":158347,"byte_end":158376,"line_start":75,"line_end":75,"column_start":1,"column_end":30}},{"value":"/     let set_order = ..;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":158377,"byte_end":158404,"line_start":76,"line_end":76,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":158405,"byte_end":158408,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/     // `self.head` has type `AtomicPtr<Node<T>>`","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":158409,"byte_end":158461,"line_start":78,"line_end":78,"column_start":1,"column_end":53}},{"value":"/     // where `struct Node<T> { next: AtomicPtr<Node<T>>, data: UnsafeCell<T> }`","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":158462,"byte_end":158545,"line_start":79,"line_end":79,"column_start":1,"column_end":84}},{"value":"/     let mut head = self.head.load(fetch_order);","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":158546,"byte_end":158597,"line_start":80,"line_end":80,"column_start":1,"column_end":52}},{"value":"/     loop {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":158598,"byte_end":158612,"line_start":81,"line_end":81,"column_start":1,"column_end":15}},{"value":"/         if let Some(nn_head) = NonNull::new(head) {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":158613,"byte_end":158668,"line_start":82,"line_end":82,"column_start":1,"column_end":56}},{"value":"/             let next = unsafe { (*head).next.load(Ordering::Relaxed) };","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":158669,"byte_end":158744,"line_start":83,"line_end":83,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":158745,"byte_end":158748,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/             // <~ preempted","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":158749,"byte_end":158780,"line_start":85,"line_end":85,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":158781,"byte_end":158784,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/             match self","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":158785,"byte_end":158811,"line_start":87,"line_end":87,"column_start":1,"column_end":27}},{"value":"/                 .head","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":158812,"byte_end":158837,"line_start":88,"line_end":88,"column_start":1,"column_end":26}},{"value":"/                 .compare_exchange_weak(head, next, set_order, fetch_order)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":158838,"byte_end":158916,"line_start":89,"line_end":89,"column_start":1,"column_end":79}},{"value":"/             {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":158917,"byte_end":158934,"line_start":90,"line_end":90,"column_start":1,"column_end":18}},{"value":"/                 Ok(_) => break Some(nn_head),","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":158935,"byte_end":158984,"line_start":91,"line_end":91,"column_start":1,"column_end":50}},{"value":"/                 // head was changed by some interrupt handler / thread","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":158985,"byte_end":159059,"line_start":92,"line_end":92,"column_start":1,"column_end":75}},{"value":"/                 Err(new_head) => head = new_head,","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":159060,"byte_end":159113,"line_start":93,"line_end":93,"column_start":1,"column_end":54}},{"value":"/             }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":159114,"byte_end":159131,"line_start":94,"line_end":94,"column_start":1,"column_end":18}},{"value":"/         } else {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":159132,"byte_end":159152,"line_start":95,"line_end":95,"column_start":1,"column_end":21}},{"value":"/             // stack is observed as empty","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":159153,"byte_end":159198,"line_start":96,"line_end":96,"column_start":1,"column_end":46}},{"value":"/             break None;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":159199,"byte_end":159226,"line_start":97,"line_end":97,"column_start":1,"column_end":28}},{"value":"/         }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":159227,"byte_end":159240,"line_start":98,"line_end":98,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":159241,"byte_end":159250,"line_start":99,"line_end":99,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":159251,"byte_end":159256,"line_start":100,"line_end":100,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":159257,"byte_end":159264,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":159265,"byte_end":159268,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ In general, the `pop` operation is susceptible to the ABA problem. If this operation gets","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":159269,"byte_end":159362,"line_start":103,"line_end":103,"column_start":1,"column_end":94}},{"value":"/ preempted by some interrupt handler somewhere between the `head.load` and the","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":159363,"byte_end":159444,"line_start":104,"line_end":104,"column_start":1,"column_end":82}},{"value":"/ `compare_and_exchange_weak`, and that handler modifies the stack in such a way that the head","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":159445,"byte_end":159541,"line_start":105,"line_end":105,"column_start":1,"column_end":97}},{"value":"/ (top) of the stack remains unchanged then resuming the `pop` operation will corrupt the stack.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":159542,"byte_end":159640,"line_start":106,"line_end":106,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":159641,"byte_end":159644,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ An example: imagine we are doing on `pop` on stack that contains these nodes: `A -> B -> C`,","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":159645,"byte_end":159741,"line_start":108,"line_end":108,"column_start":1,"column_end":97}},{"value":"/ `A` is the head (top), `B` is next to `A` and `C` is next to `B`. The `pop` operation will do a","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":159742,"byte_end":159841,"line_start":109,"line_end":109,"column_start":1,"column_end":100}},{"value":"/ `CAS(&self.head, A, B)` operation to atomically change the head to `B` iff it currently is `A`.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":159842,"byte_end":159941,"line_start":110,"line_end":110,"column_start":1,"column_end":100}},{"value":"/ Now, let's say a handler preempts the `pop` operation before the `CAS` operation starts and it","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":159942,"byte_end":160040,"line_start":111,"line_end":111,"column_start":1,"column_end":99}},{"value":"/ `pop`s the stack twice and then `push`es back the `A` node; now the state of the stack is `A ->","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":160041,"byte_end":160140,"line_start":112,"line_end":112,"column_start":1,"column_end":100}},{"value":"/ C`. When the original `pop` operation is resumed it will succeed in doing the `CAS` operation","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":160141,"byte_end":160238,"line_start":113,"line_end":113,"column_start":1,"column_end":98}},{"value":"/ setting `B` as the head of the stack. However, `B` was used by the handler as a memory block and","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":160239,"byte_end":160339,"line_start":114,"line_end":114,"column_start":1,"column_end":101}},{"value":"/ no longer is a valid free node. As a result the stack, and thus the allocator, is in a invalid","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":160340,"byte_end":160438,"line_start":115,"line_end":115,"column_start":1,"column_end":99}},{"value":"/ state.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":160439,"byte_end":160449,"line_start":116,"line_end":116,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":160450,"byte_end":160453,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ However, not all is lost because ARM devices use LL/SC (Link-local / Store-conditional)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":160454,"byte_end":160545,"line_start":118,"line_end":118,"column_start":1,"column_end":92}},{"value":"/ operations to implement CAS loops. Let's look at the actual disassembly of `pop` for the ARM","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":160546,"byte_end":160642,"line_start":119,"line_end":119,"column_start":1,"column_end":97}},{"value":"/ Cortex-M.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":160643,"byte_end":160656,"line_start":120,"line_end":120,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":160657,"byte_end":160660,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ ``` text","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":160661,"byte_end":160673,"line_start":122,"line_end":122,"column_start":1,"column_end":13}},{"value":"/ 08000130 <<heapless::pool::Pool<T>>::pop>:","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":160674,"byte_end":160720,"line_start":123,"line_end":123,"column_start":1,"column_end":47}},{"value":"/  8000130:       6802            ldr     r2, [r0, #0]","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":160721,"byte_end":160777,"line_start":124,"line_end":124,"column_start":1,"column_end":57}},{"value":"/  8000132:       e00c            b.n     800014e <<heapless::pool::Pool<T>>::pop+0x1e>","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":160778,"byte_end":160867,"line_start":125,"line_end":125,"column_start":1,"column_end":90}},{"value":"/  8000134:       4611            mov     r1, r2","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":160868,"byte_end":160918,"line_start":126,"line_end":126,"column_start":1,"column_end":51}},{"value":"/  8000136:       f8d2 c000       ldr.w   ip, [r2]","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":160919,"byte_end":160971,"line_start":127,"line_end":127,"column_start":1,"column_end":53}},{"value":"/  800013a:       e850 2f00       ldrex   r2, [r0]","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":160972,"byte_end":161024,"line_start":128,"line_end":128,"column_start":1,"column_end":53}},{"value":"/  800013e:       428a            cmp     r2, r1","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":161025,"byte_end":161075,"line_start":129,"line_end":129,"column_start":1,"column_end":51}},{"value":"/  8000140:       d103            bne.n   800014a <<heapless::pool::Pool<T>>::pop+0x1a>","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":161076,"byte_end":161165,"line_start":130,"line_end":130,"column_start":1,"column_end":90}},{"value":"/  8000142:       e840 c300       strex   r3, ip, [r0]","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":161166,"byte_end":161222,"line_start":131,"line_end":131,"column_start":1,"column_end":57}},{"value":"/  8000146:       b913            cbnz    r3, 800014e <<heapless::pool::Pool<T>>::pop+0x1e>","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":161223,"byte_end":161316,"line_start":132,"line_end":132,"column_start":1,"column_end":94}},{"value":"/  8000148:       e004            b.n     8000154 <<heapless::pool::Pool<T>>::pop+0x24>","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":161317,"byte_end":161406,"line_start":133,"line_end":133,"column_start":1,"column_end":90}},{"value":"/  800014a:       f3bf 8f2f       clrex","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":161407,"byte_end":161448,"line_start":134,"line_end":134,"column_start":1,"column_end":42}},{"value":"/  800014e:       2a00            cmp     r2, #0","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":161449,"byte_end":161499,"line_start":135,"line_end":135,"column_start":1,"column_end":51}},{"value":"/  8000150:       d1f0            bne.n   8000134 <<heapless::pool::Pool<T>>::pop+0x4>","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":161500,"byte_end":161588,"line_start":136,"line_end":136,"column_start":1,"column_end":89}},{"value":"/  8000152:       2100            movs    r1, #0","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":161589,"byte_end":161639,"line_start":137,"line_end":137,"column_start":1,"column_end":51}},{"value":"/  8000154:       4608            mov     r0, r1","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":161640,"byte_end":161690,"line_start":138,"line_end":138,"column_start":1,"column_end":51}},{"value":"/  8000156:       4770            bx      lr","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":161691,"byte_end":161737,"line_start":139,"line_end":139,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":161738,"byte_end":161745,"line_start":140,"line_end":140,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":161746,"byte_end":161749,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ LDREX (\"load exclusive\") is the LL instruction, and STREX (\"store exclusive\") is the SC","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":161750,"byte_end":161841,"line_start":142,"line_end":142,"column_start":1,"column_end":92}},{"value":"/ instruction (see [1](#references)). On the Cortex-M, STREX will always fail if the processor","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":161842,"byte_end":161938,"line_start":143,"line_end":143,"column_start":1,"column_end":97}},{"value":"/ takes an exception between it and its corresponding LDREX operation (see [2](#references)). If","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":161939,"byte_end":162037,"line_start":144,"line_end":144,"column_start":1,"column_end":99}},{"value":"/ STREX fails then the CAS loop is retried (see instruction @ `0x8000146`). On single core","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":162038,"byte_end":162130,"line_start":145,"line_end":145,"column_start":1,"column_end":93}},{"value":"/ systems, preemption is required to run into the ABA problem and on Cortex-M devices preemption","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":162131,"byte_end":162229,"line_start":146,"line_end":146,"column_start":1,"column_end":99}},{"value":"/ always involves taking an exception. Thus the underlying LL/SC operations prevent the ABA","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":162230,"byte_end":162323,"line_start":147,"line_end":147,"column_start":1,"column_end":94}},{"value":"/ problem on Cortex-M.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":162324,"byte_end":162348,"line_start":148,"line_end":148,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":162349,"byte_end":162352,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ In the case of multi-core systems if any other core successfully does a STREX op on the head","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":162353,"byte_end":162449,"line_start":150,"line_end":150,"column_start":1,"column_end":97}},{"value":"/ while the current core is somewhere between LDREX and STREX then the current core will fail its","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":162450,"byte_end":162549,"line_start":151,"line_end":151,"column_start":1,"column_end":100}},{"value":"/ STREX operation.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":162550,"byte_end":162570,"line_start":152,"line_end":152,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":162571,"byte_end":162574,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ # x86_64 support / limitations","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":162575,"byte_end":162609,"line_start":154,"line_end":154,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":162610,"byte_end":162613,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ *NOTE* `Pool` is only `Sync` on `x86_64` if the Cargo feature \"x86-sync-pool\" is enabled","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":162614,"byte_end":162706,"line_start":156,"line_end":156,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":162707,"byte_end":162710,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ x86_64 support is a gamble. Yes, a gamble. Do you feel lucky enough to use `Pool` on x86_64?","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":162711,"byte_end":162807,"line_start":158,"line_end":158,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":162808,"byte_end":162811,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ As it's not possible to implement *ideal* LL/SC semantics (\\*) on x86_64 the architecture is","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":162812,"byte_end":162908,"line_start":160,"line_end":160,"column_start":1,"column_end":97}},{"value":"/ susceptible to the ABA problem described above. To *reduce the chances* of ABA occurring in","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":162909,"byte_end":163004,"line_start":161,"line_end":161,"column_start":1,"column_end":96}},{"value":"/ practice we use version tags (keyword: IBM ABA-prevention tags). Again, this approach does","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":163005,"byte_end":163099,"line_start":162,"line_end":162,"column_start":1,"column_end":95}},{"value":"/ *not* fix / prevent / avoid the ABA problem; it only reduces the chance of it occurring in","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":163100,"byte_end":163194,"line_start":163,"line_end":163,"column_start":1,"column_end":95}},{"value":"/ practice but the chances of it occurring are not reduced to zero.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":163195,"byte_end":163264,"line_start":164,"line_end":164,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":163265,"byte_end":163268,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ How we have implemented version tags: instead of using an `AtomicPtr` to link the stack `Node`s","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":163269,"byte_end":163368,"line_start":166,"line_end":166,"column_start":1,"column_end":100}},{"value":"/ we use an `AtomicUsize` where the 64-bit `usize` is always comprised of a monotonically","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":163369,"byte_end":163460,"line_start":167,"line_end":167,"column_start":1,"column_end":92}},{"value":"/ increasing 32-bit tag (higher bits) and a 32-bit signed address offset. The address of a node is","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":163461,"byte_end":163561,"line_start":168,"line_end":168,"column_start":1,"column_end":101}},{"value":"/ computed by adding the 32-bit offset to an \"anchor\" address (the address of a static variable","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":163562,"byte_end":163659,"line_start":169,"line_end":169,"column_start":1,"column_end":98}},{"value":"/ that lives somewhere in the `.bss` linker section). The tag is increased every time a node is","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":163660,"byte_end":163757,"line_start":170,"line_end":170,"column_start":1,"column_end":98}},{"value":"/ popped (removed) from the stack.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":163758,"byte_end":163794,"line_start":171,"line_end":171,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":163795,"byte_end":163798,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ To see how version tags can prevent ABA consider the example from the previous section. Let's","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":163799,"byte_end":163896,"line_start":173,"line_end":173,"column_start":1,"column_end":98}},{"value":"/ start with a stack in this state: `(~A, 0) -> (~B, 1) -> (~C, 2)`, where `~A` represents the","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":163897,"byte_end":163993,"line_start":174,"line_end":174,"column_start":1,"column_end":97}},{"value":"/ address of node A as a 32-bit offset from the \"anchor\" and the second tuple element (e.g. `0`)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":163994,"byte_end":164092,"line_start":175,"line_end":175,"column_start":1,"column_end":99}},{"value":"/ indicates the version of the node. For simplicity, assume a single core system: thread T1 is","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":164093,"byte_end":164189,"line_start":176,"line_end":176,"column_start":1,"column_end":97}},{"value":"/ performing `pop` and before `CAS(&self.head, (~A, 0), (~B, 1))` is executed a context switch","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":164190,"byte_end":164286,"line_start":177,"line_end":177,"column_start":1,"column_end":97}},{"value":"/ occurs and the core resumes T2. T2 pops the stack twice and pushes A back into the stack;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":164287,"byte_end":164380,"line_start":178,"line_end":178,"column_start":1,"column_end":94}},{"value":"/ because the `pop` operation increases the version the stack ends in the following state: `(~A,","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":164381,"byte_end":164479,"line_start":179,"line_end":179,"column_start":1,"column_end":99}},{"value":"/ 1) -> (~C, 2)`. Now if T1 is resumed the CAS operation will fail because `self.head` is `(~A,","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":164480,"byte_end":164577,"line_start":180,"line_end":180,"column_start":1,"column_end":98}},{"value":"/ 1)` and not `(~A, 0)`.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":164578,"byte_end":164604,"line_start":181,"line_end":181,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":164605,"byte_end":164608,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ When can version tags fail to prevent ABA? Using the previous example: if T2 performs a `push`","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":164609,"byte_end":164707,"line_start":183,"line_end":183,"column_start":1,"column_end":99}},{"value":"/ followed by a `pop` `(1 << 32) - 1` times before doing its original `pop` - `pop` - `push`","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":164708,"byte_end":164802,"line_start":184,"line_end":184,"column_start":1,"column_end":95}},{"value":"/ operation then ABA will occur because the version tag of node `A` will wraparound to its","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":164803,"byte_end":164895,"line_start":185,"line_end":185,"column_start":1,"column_end":93}},{"value":"/ original value of `0` and the CAS operation in T1 will succeed and corrupt the stack.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":164896,"byte_end":164985,"line_start":186,"line_end":186,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":164986,"byte_end":164989,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ It does seem unlikely that (1) a thread will perform the above operation and (2) that the above","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":164990,"byte_end":165089,"line_start":188,"line_end":188,"column_start":1,"column_end":100}},{"value":"/ operation will complete within one time slice, assuming time sliced threads. If you have thread","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":165090,"byte_end":165189,"line_start":189,"line_end":189,"column_start":1,"column_end":100}},{"value":"/ priorities then the above operation could occur during the lifetime of many high priorities","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":165190,"byte_end":165285,"line_start":190,"line_end":190,"column_start":1,"column_end":96}},{"value":"/ threads if T1 is running at low priority.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":165286,"byte_end":165331,"line_start":191,"line_end":191,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":165332,"byte_end":165335,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ Other implementations of version tags use more than 32 bits in their tags (e.g. \"Scalable","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":165336,"byte_end":165429,"line_start":193,"line_end":193,"column_start":1,"column_end":94}},{"value":"/ Lock-Free Dynamic Memory Allocation\" uses 42-bit tags in its super blocks). In theory, one could","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":165430,"byte_end":165530,"line_start":194,"line_end":194,"column_start":1,"column_end":101}},{"value":"/ use double-word CAS on x86_64 to pack a 64-bit tag and a 64-bit pointer in a double-word but","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":165531,"byte_end":165627,"line_start":195,"line_end":195,"column_start":1,"column_end":97}},{"value":"/ this CAS operation is not exposed in the standard library (and I think it's not available on","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":165628,"byte_end":165724,"line_start":196,"line_end":196,"column_start":1,"column_end":97}},{"value":"/ older x86_64 processors?)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":165725,"byte_end":165754,"line_start":197,"line_end":197,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":165755,"byte_end":165758,"line_start":198,"line_end":198,"column_start":1,"column_end":4}},{"value":"/ (\\*) Apparently one can emulate proper LL/SC semantics on x86_64 using hazard pointers (?) --","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":165759,"byte_end":165856,"line_start":199,"line_end":199,"column_start":1,"column_end":98}},{"value":"/ the technique appears to be documented in \"ABA Prevention Using Single-Word Instructions\", which","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":165857,"byte_end":165957,"line_start":200,"line_end":200,"column_start":1,"column_end":101}},{"value":"/ is not public AFAICT -- but hazard pointers require Thread Local Storage (TLS), which is a","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":165958,"byte_end":166052,"line_start":201,"line_end":201,"column_start":1,"column_end":95}},{"value":"/ non-starter for a `no_std` library like `heapless`.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":166053,"byte_end":166108,"line_start":202,"line_end":202,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":166109,"byte_end":166112,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ ## x86_64 Limitations","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":166113,"byte_end":166138,"line_start":204,"line_end":204,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":166139,"byte_end":166142,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ Because stack nodes must be located within +- 2 GB of the hidden `ANCHOR` variable, which","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":166143,"byte_end":166236,"line_start":206,"line_end":206,"column_start":1,"column_end":94}},{"value":"/ lives in the `.bss` section, `Pool` may not be able to manage static references created using","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":166237,"byte_end":166334,"line_start":207,"line_end":207,"column_start":1,"column_end":98}},{"value":"/ `Box::leak` -- these heap allocated chunks of memory may live in a very different address space.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":166335,"byte_end":166435,"line_start":208,"line_end":208,"column_start":1,"column_end":101}},{"value":"/ When the `Pool` is unable to manage a node because of its address it will simply discard it:","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":166436,"byte_end":166532,"line_start":209,"line_end":209,"column_start":1,"column_end":97}},{"value":"/ `Pool::grow*` methods return the number of new memory blocks added to the pool; if these methods","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":166533,"byte_end":166633,"line_start":210,"line_end":210,"column_start":1,"column_end":101}},{"value":"/ return `0` it means the `Pool` is unable to manage the memory given to them.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":166634,"byte_end":166714,"line_start":211,"line_end":211,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":166715,"byte_end":166718,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ # References","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":166719,"byte_end":166735,"line_start":213,"line_end":213,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":166736,"byte_end":166739,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ 1. [Cortex-M3 Devices Generic User Guide (DUI 0552A)][0], Section 2.2.7 \"Synchronization","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":166740,"byte_end":166832,"line_start":215,"line_end":215,"column_start":1,"column_end":93}},{"value":"/ primitives\"","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":166833,"byte_end":166848,"line_start":216,"line_end":216,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":166849,"byte_end":166852,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ [0]: http://infocenter.arm.com/help/topic/com.arm.doc.dui0552a/DUI0552A_cortex_m3_dgug.pdf","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":166853,"byte_end":166947,"line_start":218,"line_end":218,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":166948,"byte_end":166951,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ 2. [ARMv7-M Architecture Reference Manual (DDI 0403E.b)][1], Section A3.4 \"Synchronization and","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":166952,"byte_end":167050,"line_start":220,"line_end":220,"column_start":1,"column_end":99}},{"value":"/ semaphores\"","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":167051,"byte_end":167066,"line_start":221,"line_end":221,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":167067,"byte_end":167070,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ [1]: https://static.docs.arm.com/ddi0403/eb/DDI0403E_B_armv7m_arm.pdf","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":167071,"byte_end":167144,"line_start":223,"line_end":223,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":167145,"byte_end":167148,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ 3. \"Scalable Lock-Free Dynamic Memory Allocation\" Michael, Maged M.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":167149,"byte_end":167220,"line_start":225,"line_end":225,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":167221,"byte_end":167224,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ 4. \"Hazard pointers: Safe memory reclamation for lock-free objects.\" Michael, Maged M.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":167225,"byte_end":167315,"line_start":227,"line_end":227,"column_start":1,"column_end":91}}]},{"kind":"Mod","id":{"krate":0,"index":1420},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"singleton","qualname":"::pool::singleton","value":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","parent":null,"children":[{"krate":0,"index":1421},{"krate":0,"index":1422},{"krate":0,"index":1425},{"krate":0,"index":1428},{"krate":0,"index":1431},{"krate":0,"index":1432},{"krate":0,"index":1433},{"krate":0,"index":1435},{"krate":0,"index":1438},{"krate":0,"index":1439},{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1445},{"krate":0,"index":1448},{"krate":0,"index":1449},{"krate":0,"index":1452},{"krate":0,"index":1455},{"krate":0,"index":1458},{"krate":0,"index":1459},{"krate":0,"index":1462},{"krate":0,"index":1465},{"krate":0,"index":1466},{"krate":0,"index":1469},{"krate":0,"index":1472},{"krate":0,"index":1475},{"krate":0,"index":1483},{"krate":0,"index":1488},{"krate":0,"index":1491},{"krate":0,"index":1494},{"krate":0,"index":1498},{"krate":0,"index":1501},{"krate":0,"index":1503},{"krate":0,"index":1506},{"krate":0,"index":1509},{"krate":0,"index":1513},{"krate":0,"index":1516},{"krate":0,"index":1519},{"krate":0,"index":1524},{"krate":0,"index":1528},{"krate":0,"index":1531},{"krate":0,"index":1533},{"krate":0,"index":1536},{"krate":0,"index":1539}],"decl_id":null,"docs":" `Pool` as a global singleton\n","sig":null,"attributes":[{"value":"/ `Pool` as a global singleton","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":176921,"byte_end":176953,"line_start":1,"line_end":1,"column_start":1,"column_end":33}}]},{"kind":"Trait","id":{"krate":0,"index":1475},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":177848,"byte_end":177852,"line_start":44,"line_end":44,"column_start":11,"column_end":15},"name":"Pool","qualname":"::pool::singleton::Pool","value":"Pool","parent":null,"children":[{"krate":0,"index":1476},{"krate":0,"index":1477},{"krate":0,"index":1478},{"krate":0,"index":1480},{"krate":0,"index":1481}],"decl_id":null,"docs":" A global singleton memory pool\n","sig":null,"attributes":[{"value":"/ A global singleton memory pool","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":177803,"byte_end":177837,"line_start":43,"line_end":43,"column_start":1,"column_end":35}}]},{"kind":"Type","id":{"krate":0,"index":1476},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":177924,"byte_end":177928,"line_start":46,"line_end":46,"column_start":10,"column_end":14},"name":"Data","qualname":"::pool::singleton::Pool::Data","value":"type Data: 'static;","parent":{"krate":0,"index":1475},"children":[],"decl_id":null,"docs":" The type of data that can be allocated on this pool\n","sig":null,"attributes":[{"value":"/ The type of data that can be allocated on this pool","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":177859,"byte_end":177914,"line_start":45,"line_end":45,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1477},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":177966,"byte_end":177969,"line_start":49,"line_end":49,"column_start":8,"column_end":11},"name":"ptr","qualname":"::pool::singleton::Pool::ptr","value":"pub fn ptr() -> &'static super::Pool<Self::Data>","parent":{"krate":0,"index":1475},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1478},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":178235,"byte_end":178240,"line_start":56,"line_end":56,"column_start":8,"column_end":13},"name":"alloc","qualname":"::pool::singleton::Pool::alloc","value":"pub fn alloc() -> Option<Box<Self, Uninit>> where Self: Sized","parent":{"krate":0,"index":1475},"children":[],"decl_id":null,"docs":" Claims a memory block from the pool","sig":null,"attributes":[{"value":"/ Claims a memory block from the pool","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":178014,"byte_end":178053,"line_start":51,"line_end":51,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":178058,"byte_end":178061,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the pool is observed as exhausted","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":178066,"byte_end":178123,"line_start":53,"line_end":53,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":178128,"byte_end":178131,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ *NOTE:* This method does *not* have bounded execution time; i.e. it contains a CAS loop","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":178136,"byte_end":178227,"line_start":55,"line_end":55,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":1480},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":178667,"byte_end":178671,"line_start":71,"line_end":71,"column_start":8,"column_end":12},"name":"grow","qualname":"::pool::singleton::Pool::grow","value":"pub fn grow(&'static mut [u8]) -> usize","parent":{"krate":0,"index":1475},"children":[],"decl_id":null,"docs":" Increases the capacity of the pool","sig":null,"attributes":[{"value":"/ Increases the capacity of the pool","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":178428,"byte_end":178466,"line_start":66,"line_end":66,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":178471,"byte_end":178474,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ This method might *not* fully utilize the given memory block due to alignment requirements","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":178479,"byte_end":178573,"line_start":68,"line_end":68,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":178578,"byte_end":178581,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ This method returns the number of *new* blocks that can be allocated.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":178586,"byte_end":178659,"line_start":70,"line_end":70,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1481},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":178930,"byte_end":178940,"line_start":79,"line_end":79,"column_start":8,"column_end":18},"name":"grow_exact","qualname":"::pool::singleton::Pool::grow_exact","value":"pub fn grow_exact<A>(&'static mut MaybeUninit<A>) -> usize where\nA: AsMutSlice<Element = Node<Self::Data>>","parent":{"krate":0,"index":1475},"children":[],"decl_id":null,"docs":" Increases the capacity of the pool","sig":null,"attributes":[{"value":"/ Increases the capacity of the pool","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":178754,"byte_end":178792,"line_start":75,"line_end":75,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":178797,"byte_end":178800,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ Unlike [`Pool.grow`](trait.Pool.html#method.grow_exact) this method fully utilizes the given","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":178805,"byte_end":178901,"line_start":77,"line_end":77,"column_start":5,"column_end":101}},{"value":"/ memory block","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":178906,"byte_end":178922,"line_start":78,"line_end":78,"column_start":5,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":1483},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":179182,"byte_end":179185,"line_start":88,"line_end":88,"column_start":12,"column_end":15},"name":"Box","qualname":"::pool::singleton::Box","value":"Box {  }","parent":null,"children":[{"krate":0,"index":1486},{"krate":0,"index":1487}],"decl_id":null,"docs":" A memory block that belongs to the global memory pool, `POOL`\n","sig":null,"attributes":[{"value":"/ A memory block that belongs to the global memory pool, `POOL`","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":179105,"byte_end":179170,"line_start":87,"line_end":87,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1490},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":179418,"byte_end":179422,"line_start":102,"line_end":102,"column_start":12,"column_end":16},"name":"init","qualname":"<Box<P, Uninit>>::init","value":"pub fn init(Self, P::Data) -> Box<P, Init>","parent":null,"children":[],"decl_id":null,"docs":" Initializes this memory block\n","sig":null,"attributes":[{"value":"/ Initializes this memory block","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":179373,"byte_end":179406,"line_start":101,"line_end":101,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1493},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":180023,"byte_end":180029,"line_start":129,"line_end":129,"column_start":12,"column_end":18},"name":"freeze","qualname":"<Box<P, Uninit>>::freeze","value":"pub fn freeze(Self) -> Box<P, Init>","parent":null,"children":[],"decl_id":null,"docs":" Freezes the contents of this memory block","sig":null,"attributes":[{"value":"/ Freezes the contents of this memory block","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":179864,"byte_end":179909,"line_start":126,"line_end":126,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":179914,"byte_end":179917,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ See [rust-lang/rust#58363](https://github.com/rust-lang/rust/pull/58363) for details.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":179922,"byte_end":180011,"line_start":128,"line_end":128,"column_start":5,"column_end":94}}]},{"kind":"Struct","id":{"krate":0,"index":1570},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/cas.rs","byte_start":185046,"byte_end":185050,"line_start":18,"line_end":18,"column_start":12,"column_end":16},"name":"Node","qualname":"::pool::stack::Node","value":"Node {  }","parent":null,"children":[{"krate":0,"index":1572},{"krate":0,"index":1573}],"decl_id":null,"docs":" Unfortunate implementation detail required to use the\n [`Pool.grow_exact`](struct.Pool.html#method.grow_exact) method\n","sig":null,"attributes":[{"value":"/ Unfortunate implementation detail required to use the","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/cas.rs","byte_start":184910,"byte_end":184967,"line_start":16,"line_end":16,"column_start":1,"column_end":58}},{"value":"/ [`Pool.grow_exact`](struct.Pool.html#method.grow_exact) method","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/cas.rs","byte_start":184968,"byte_end":185034,"line_start":17,"line_end":17,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":1625},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":167754,"byte_end":167758,"line_start":250,"line_end":250,"column_start":12,"column_end":16},"name":"Pool","qualname":"::pool::Pool","value":"Pool {  }","parent":null,"children":[{"krate":0,"index":1627},{"krate":0,"index":1628}],"decl_id":null,"docs":" A lock-free memory pool\n","sig":null,"attributes":[{"value":"/ A lock-free memory pool","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":167715,"byte_end":167742,"line_start":249,"line_end":249,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1633},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":168345,"byte_end":168348,"line_start":273,"line_end":273,"column_start":18,"column_end":21},"name":"new","qualname":"<Pool<T>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty pool\n","sig":null,"attributes":[{"value":"/ Creates a new empty pool","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":168299,"byte_end":168327,"line_start":272,"line_end":272,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1634},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":168702,"byte_end":168707,"line_start":286,"line_end":286,"column_start":12,"column_end":17},"name":"alloc","qualname":"<Pool<T>>::alloc","value":"pub fn alloc(&Self) -> Option<Box<T, Uninit>>","parent":null,"children":[],"decl_id":null,"docs":" Claims a memory block from the pool","sig":null,"attributes":[{"value":"/ Claims a memory block from the pool","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":168475,"byte_end":168514,"line_start":281,"line_end":281,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":168519,"byte_end":168522,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the pool is observed as exhausted","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":168527,"byte_end":168584,"line_start":283,"line_end":283,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":168589,"byte_end":168592,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ *NOTE:* This method does *not* have bounded execution time because it contains a CAS loop","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":168597,"byte_end":168690,"line_start":285,"line_end":285,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":1635},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":169358,"byte_end":169362,"line_start":309,"line_end":309,"column_start":12,"column_end":16},"name":"free","qualname":"<Pool<T>>::free","value":"pub fn free<S>(&Self, Box<T, S>) where S: 'static","parent":null,"children":[],"decl_id":null,"docs":" Returns a memory block to the pool","sig":null,"attributes":[{"value":"/ Returns a memory block to the pool","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":169117,"byte_end":169155,"line_start":304,"line_end":304,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":169160,"byte_end":169163,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ *NOTE*: `T`'s destructor (if any) will run on `value` iff `S = Init`","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":169168,"byte_end":169240,"line_start":306,"line_end":306,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":169245,"byte_end":169248,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ *NOTE:* This method does *not* have bounded execution time because it contains a CAS loop","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":169253,"byte_end":169346,"line_start":308,"line_end":308,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":1637},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":169980,"byte_end":169984,"line_start":332,"line_end":332,"column_start":12,"column_end":16},"name":"grow","qualname":"<Pool<T>>::grow","value":"pub fn grow(&Self, &'static mut [u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Increases the capacity of the pool","sig":null,"attributes":[{"value":"/ Increases the capacity of the pool","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":169736,"byte_end":169774,"line_start":327,"line_end":327,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":169779,"byte_end":169782,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ This method might *not* fully utilize the given memory block due to alignment requirements.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":169787,"byte_end":169882,"line_start":329,"line_end":329,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":169887,"byte_end":169890,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ This method returns the number of *new* blocks that can be allocated.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":169895,"byte_end":169968,"line_start":331,"line_end":331,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1638},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":171408,"byte_end":171418,"line_start":385,"line_end":385,"column_start":12,"column_end":22},"name":"grow_exact","qualname":"<Pool<T>>::grow_exact","value":"pub fn grow_exact<A>(&Self, &'static mut MaybeUninit<A>) -> usize where\nA: AsMutSlice<Element = Node<T>>","parent":null,"children":[],"decl_id":null,"docs":" Increases the capacity of the pool","sig":null,"attributes":[{"value":"/ Increases the capacity of the pool","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":171233,"byte_end":171271,"line_start":381,"line_end":381,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":171276,"byte_end":171279,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ Unlike [`Pool.grow`](struct.Pool.html#method.grow) this method fully utilizes the given","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":171284,"byte_end":171375,"line_start":383,"line_end":383,"column_start":5,"column_end":96}},{"value":"/ memory block","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":171380,"byte_end":171396,"line_start":384,"line_end":384,"column_start":5,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":1640},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":172172,"byte_end":172175,"line_start":413,"line_end":413,"column_start":12,"column_end":15},"name":"Box","qualname":"::pool::Box","value":"Box {  }","parent":null,"children":[{"krate":0,"index":1643},{"krate":0,"index":1644}],"decl_id":null,"docs":" A memory block\n","sig":null,"attributes":[{"value":"/ A memory block","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":172142,"byte_end":172160,"line_start":412,"line_end":412,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1647},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":172328,"byte_end":172332,"line_start":420,"line_end":420,"column_start":12,"column_end":16},"name":"init","qualname":"<Box<T, Uninit>>::init","value":"pub fn init(Self, T) -> Box<T, Init>","parent":null,"children":[],"decl_id":null,"docs":" Initializes this memory block\n","sig":null,"attributes":[{"value":"/ Initializes this memory block","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":172283,"byte_end":172316,"line_start":419,"line_end":419,"column_start":5,"column_end":38}}]},{"kind":"Enum","id":{"krate":0,"index":1648},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":172586,"byte_end":172592,"line_start":433,"line_end":433,"column_start":10,"column_end":16},"name":"Uninit","qualname":"::pool::Uninit","value":"pub enum Uninit { }","parent":null,"children":[],"decl_id":null,"docs":" Uninitialized type state\n","sig":null,"attributes":[{"value":"/ Uninitialized type state","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":172548,"byte_end":172576,"line_start":432,"line_end":432,"column_start":1,"column_end":29}}]},{"kind":"Enum","id":{"krate":0,"index":1649},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":172633,"byte_end":172637,"line_start":436,"line_end":436,"column_start":10,"column_end":14},"name":"Init","qualname":"::pool::Init","value":"pub enum Init { }","parent":null,"children":[],"decl_id":null,"docs":" Initialized type state\n","sig":null,"attributes":[{"value":"/ Initialized type state","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":172597,"byte_end":172623,"line_start":435,"line_end":435,"column_start":1,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":1693},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"spsc","qualname":"::spsc","value":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","parent":null,"children":[{"krate":0,"index":1694},{"krate":0,"index":1695},{"krate":0,"index":1698},{"krate":0,"index":1701},{"krate":0,"index":1704},{"krate":0,"index":1705},{"krate":0,"index":1707},{"krate":0,"index":1710},{"krate":0,"index":1713},{"krate":0,"index":1714},{"krate":0,"index":1717},{"krate":0,"index":1720},{"krate":0,"index":1723},{"krate":0,"index":1726},{"krate":0,"index":1727},{"krate":0,"index":1730},{"krate":0,"index":1733},{"krate":0,"index":1791},{"krate":0,"index":1793},{"krate":0,"index":1795},{"krate":0,"index":1800},{"krate":0,"index":1804},{"krate":0,"index":1812},{"krate":0,"index":1819},{"krate":0,"index":1829},{"krate":0,"index":1835},{"krate":0,"index":1841},{"krate":0,"index":1848},{"krate":0,"index":1855},{"krate":0,"index":1864},{"krate":0,"index":1873},{"krate":0,"index":1874},{"krate":0,"index":1877},{"krate":0,"index":1881},{"krate":0,"index":1884},{"krate":0,"index":2775},{"krate":0,"index":2779},{"krate":0,"index":2782},{"krate":0,"index":2786},{"krate":0,"index":2789},{"krate":0,"index":2798},{"krate":0,"index":2803},{"krate":0,"index":2807},{"krate":0,"index":2810},{"krate":0,"index":2814},{"krate":0,"index":2817},{"krate":0,"index":2826},{"krate":0,"index":2831},{"krate":0,"index":2835},{"krate":0,"index":2838},{"krate":0,"index":2842},{"krate":0,"index":2845},{"krate":0,"index":2854},{"krate":0,"index":1888},{"krate":0,"index":1898},{"krate":0,"index":1903},{"krate":0,"index":1912},{"krate":0,"index":1919},{"krate":0,"index":1928},{"krate":0,"index":1929},{"krate":0,"index":1930},{"krate":0,"index":2859},{"krate":0,"index":2867},{"krate":0,"index":2874},{"krate":0,"index":2882}],"decl_id":null,"docs":" Fixed capacity Single Producer Single Consumer (SPSC) queue","sig":null,"attributes":[{"value":"cfg(has_atomics)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":4183,"byte_end":4202,"line_start":107,"line_end":107,"column_start":1,"column_end":20}},{"value":"/ Fixed capacity Single Producer Single Consumer (SPSC) queue","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":189649,"byte_end":189712,"line_start":1,"line_end":1,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":189713,"byte_end":189716,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ NOTE: This module is not available on targets that do *not* support atomic loads, e.g. RISC-V","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":189717,"byte_end":189814,"line_start":3,"line_end":3,"column_start":1,"column_end":98}},{"value":"/ cores w/o the A (Atomic) extension","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":189815,"byte_end":189853,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":189854,"byte_end":189857,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":189858,"byte_end":189872,"line_start":6,"line_end":6,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":189873,"byte_end":189876,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ - `Queue` can be used as a plain queue","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":189877,"byte_end":189919,"line_start":8,"line_end":8,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":189920,"byte_end":189923,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":189924,"byte_end":189931,"line_start":10,"line_end":10,"column_start":1,"column_end":8}},{"value":"/ use heapless::spsc::Queue;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":189932,"byte_end":189962,"line_start":11,"line_end":11,"column_start":1,"column_end":31}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":189963,"byte_end":189991,"line_start":12,"line_end":12,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":189992,"byte_end":189995,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ let mut rb: Queue<u8, U4> = Queue::new();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":189996,"byte_end":190041,"line_start":14,"line_end":14,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190042,"byte_end":190045,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ assert!(rb.enqueue(0).is_ok());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190046,"byte_end":190081,"line_start":16,"line_end":16,"column_start":1,"column_end":36}},{"value":"/ assert!(rb.enqueue(1).is_ok());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190082,"byte_end":190117,"line_start":17,"line_end":17,"column_start":1,"column_end":36}},{"value":"/ assert!(rb.enqueue(2).is_ok());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190118,"byte_end":190153,"line_start":18,"line_end":18,"column_start":1,"column_end":36}},{"value":"/ assert!(rb.enqueue(3).is_ok());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190154,"byte_end":190189,"line_start":19,"line_end":19,"column_start":1,"column_end":36}},{"value":"/ assert!(rb.enqueue(4).is_err()); // full","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190190,"byte_end":190234,"line_start":20,"line_end":20,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190235,"byte_end":190238,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(rb.dequeue(), Some(0));","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190239,"byte_end":190277,"line_start":22,"line_end":22,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190278,"byte_end":190285,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190286,"byte_end":190289,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ - `Queue` can be `split` and then be used in Single Producer Single Consumer mode","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190290,"byte_end":190375,"line_start":25,"line_end":25,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190376,"byte_end":190379,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190380,"byte_end":190387,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ use heapless::spsc::Queue;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190388,"byte_end":190418,"line_start":28,"line_end":28,"column_start":1,"column_end":31}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190419,"byte_end":190447,"line_start":29,"line_end":29,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190448,"byte_end":190451,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ static mut Q: Queue<Event, U4> = Queue(heapless::i::Queue::new());","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190452,"byte_end":190522,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190523,"byte_end":190526,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ enum Event { A, B }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190527,"byte_end":190550,"line_start":33,"line_end":33,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190551,"byte_end":190554,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190555,"byte_end":190570,"line_start":35,"line_end":35,"column_start":1,"column_end":16}},{"value":"/     // NOTE(unsafe) beware of aliasing the `consumer` end point","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190571,"byte_end":190638,"line_start":36,"line_end":36,"column_start":1,"column_end":68}},{"value":"/     let mut consumer = unsafe { Q.split().1 };","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190639,"byte_end":190689,"line_start":37,"line_end":37,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190690,"byte_end":190693,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/     loop {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190694,"byte_end":190708,"line_start":39,"line_end":39,"column_start":1,"column_end":15}},{"value":"/         // `dequeue` is a lockless operation","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190709,"byte_end":190757,"line_start":40,"line_end":40,"column_start":1,"column_end":49}},{"value":"/         match consumer.dequeue() {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190758,"byte_end":190796,"line_start":41,"line_end":41,"column_start":1,"column_end":39}},{"value":"/             Some(Event::A) => { /* .. */ },","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190797,"byte_end":190844,"line_start":42,"line_end":42,"column_start":1,"column_end":48}},{"value":"/             Some(Event::B) => { /* .. */ },","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190845,"byte_end":190892,"line_start":43,"line_end":43,"column_start":1,"column_end":48}},{"value":"/             None => { /* sleep */ },","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190893,"byte_end":190933,"line_start":44,"line_end":44,"column_start":1,"column_end":41}},{"value":"/         }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190934,"byte_end":190947,"line_start":45,"line_end":45,"column_start":1,"column_end":14}},{"value":"/ #       break","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190948,"byte_end":190965,"line_start":46,"line_end":46,"column_start":1,"column_end":18}},{"value":"/     }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190966,"byte_end":190975,"line_start":47,"line_end":47,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190976,"byte_end":190981,"line_start":48,"line_end":48,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190982,"byte_end":190985,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ // this is a different execution context that can preempt `main`","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":190986,"byte_end":191054,"line_start":50,"line_end":50,"column_start":1,"column_end":69}},{"value":"/ fn interrupt_handler() {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191055,"byte_end":191083,"line_start":51,"line_end":51,"column_start":1,"column_end":29}},{"value":"/     // NOTE(unsafe) beware of aliasing the `producer` end point","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191084,"byte_end":191151,"line_start":52,"line_end":52,"column_start":1,"column_end":68}},{"value":"/     let mut producer = unsafe { Q.split().0 };","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191152,"byte_end":191202,"line_start":53,"line_end":53,"column_start":1,"column_end":51}},{"value":"/ #   let condition = true;","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191203,"byte_end":191232,"line_start":54,"line_end":54,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191233,"byte_end":191236,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/     // ..","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191237,"byte_end":191250,"line_start":56,"line_end":56,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191251,"byte_end":191254,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/     if condition {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191255,"byte_end":191277,"line_start":58,"line_end":58,"column_start":1,"column_end":23}},{"value":"/         producer.enqueue(Event::A).ok().unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191278,"byte_end":191331,"line_start":59,"line_end":59,"column_start":1,"column_end":54}},{"value":"/     } else {","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191332,"byte_end":191348,"line_start":60,"line_end":60,"column_start":1,"column_end":17}},{"value":"/         producer.enqueue(Event::B).ok().unwrap();","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191349,"byte_end":191402,"line_start":61,"line_end":61,"column_start":1,"column_end":54}},{"value":"/     }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191403,"byte_end":191412,"line_start":62,"line_end":62,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191413,"byte_end":191416,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/     // ..","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191417,"byte_end":191430,"line_start":64,"line_end":64,"column_start":1,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191431,"byte_end":191436,"line_start":65,"line_end":65,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191437,"byte_end":191444,"line_start":66,"line_end":66,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191445,"byte_end":191448,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ # Benchmarks","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191449,"byte_end":191465,"line_start":68,"line_end":68,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191466,"byte_end":191469,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ Measured on a ARM Cortex-M3 core running at 8 MHz and with zero Flash wait cycles","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191470,"byte_end":191555,"line_start":70,"line_end":70,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191556,"byte_end":191559,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ `-C opt-level`         |`3`|","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191560,"byte_end":191592,"line_start":72,"line_end":72,"column_start":1,"column_end":33}},{"value":"/ -----------------------|---|","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191593,"byte_end":191625,"line_start":73,"line_end":73,"column_start":1,"column_end":33}},{"value":"/ `Consumer<u8>::dequeue`| 15|","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191626,"byte_end":191658,"line_start":74,"line_end":74,"column_start":1,"column_end":33}},{"value":"/ `Queue<u8>::dequeue`   | 12|","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191659,"byte_end":191691,"line_start":75,"line_end":75,"column_start":1,"column_end":33}},{"value":"/ `Producer<u8>::enqueue`| 16|","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191692,"byte_end":191724,"line_start":76,"line_end":76,"column_start":1,"column_end":33}},{"value":"/ `Queue<u8>::enqueue`   | 14|","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191725,"byte_end":191757,"line_start":77,"line_end":77,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191758,"byte_end":191761,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ - All execution times are in clock cycles. 1 clock cycle = 125 ns.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191762,"byte_end":191832,"line_start":79,"line_end":79,"column_start":1,"column_end":71}},{"value":"/ - Execution time is *dependent* of `mem::size_of::<T>()`. Both operations include one","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191833,"byte_end":191922,"line_start":80,"line_end":80,"column_start":1,"column_end":90}},{"value":"/ `memcpy(T)` in their successful path.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191923,"byte_end":191964,"line_start":81,"line_end":81,"column_start":1,"column_end":42}},{"value":"/ - The optimization level is indicated in the first row.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":191965,"byte_end":192024,"line_start":82,"line_end":82,"column_start":1,"column_end":60}},{"value":"/ - The numbers reported correspond to the successful path (i.e. `Some` is returned by `dequeue`","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":192025,"byte_end":192123,"line_start":83,"line_end":83,"column_start":1,"column_end":99}},{"value":"/ and `Ok` is returned by `enqueue`).","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":192124,"byte_end":192163,"line_start":84,"line_end":84,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1760},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/split.rs","byte_start":215666,"byte_end":215671,"line_start":17,"line_end":17,"column_start":12,"column_end":17},"name":"split","qualname":"<Queue<T, N, U, C>>::split","value":"pub fn split<'rb>(&'rb mut Self) -> (Producer, Consumer)","parent":null,"children":[],"decl_id":null,"docs":" Splits a statically allocated queue into producer and consumer end points\n","sig":null,"attributes":[{"value":"/ Splits a statically allocated queue into producer and consumer end points","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/split.rs","byte_start":215577,"byte_end":215654,"line_start":16,"line_end":16,"column_start":5,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":1762},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/split.rs","byte_start":216197,"byte_end":216205,"line_start":33,"line_end":33,"column_start":12,"column_end":20},"name":"Consumer","qualname":"::spsc::split::Consumer","value":"Consumer {  }","parent":null,"children":[{"krate":0,"index":1768},{"krate":0,"index":1769}],"decl_id":null,"docs":" A queue \"consumer\"; it can dequeue items from the queue\n","sig":null,"attributes":[{"value":"/ A queue \"consumer\"; it can dequeue items from the queue","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/split.rs","byte_start":216055,"byte_end":216114,"line_start":31,"line_end":31,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1776},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/split.rs","byte_start":216681,"byte_end":216689,"line_start":54,"line_end":54,"column_start":12,"column_end":20},"name":"Producer","qualname":"::spsc::split::Producer","value":"Producer {  }","parent":null,"children":[{"krate":0,"index":1782},{"krate":0,"index":1783}],"decl_id":null,"docs":" A queue \"producer\"; it can enqueue items into the queue\n","sig":null,"attributes":[{"value":"/ A queue \"producer\"; it can enqueue items into the queue","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/split.rs","byte_start":216539,"byte_end":216598,"line_start":52,"line_end":52,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1791},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":192486,"byte_end":192495,"line_start":97,"line_end":97,"column_start":12,"column_end":21},"name":"MultiCore","qualname":"::spsc::MultiCore","value":"","parent":null,"children":[],"decl_id":null,"docs":" Multi core synchronization - a memory barrier is used for synchronization\n","sig":null,"attributes":[{"value":"/ Multi core synchronization - a memory barrier is used for synchronization","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":192397,"byte_end":192474,"line_start":96,"line_end":96,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":1793},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":192600,"byte_end":192610,"line_start":100,"line_end":100,"column_start":12,"column_end":22},"name":"SingleCore","qualname":"::spsc::SingleCore","value":"","parent":null,"children":[],"decl_id":null,"docs":" Single core synchronization - no memory barrier synchronization, just a compiler fence\n","sig":null,"attributes":[{"value":"/ Single core synchronization - no memory barrier synchronization, just a compiler fence","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":192498,"byte_end":192588,"line_start":99,"line_end":99,"column_start":1,"column_end":91}}]},{"kind":"Struct","id":{"krate":0,"index":1812},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":194716,"byte_end":194721,"line_start":164,"line_end":164,"column_start":12,"column_end":17},"name":"Queue","qualname":"::spsc::Queue","value":"","parent":null,"children":[],"decl_id":null,"docs":" A statically allocated single producer single consumer queue with a capacity of `N` elements","sig":null,"attributes":[{"value":"/ A statically allocated single producer single consumer queue with a capacity of `N` elements","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":193504,"byte_end":193600,"line_start":144,"line_end":144,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":193601,"byte_end":193604,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ *IMPORTANT*: To get better performance use a capacity that is a power of 2 (e.g. `U16`, `U32`,","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":193605,"byte_end":193703,"line_start":146,"line_end":146,"column_start":1,"column_end":99}},{"value":"/ etc.).","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":193704,"byte_end":193714,"line_start":147,"line_end":147,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":193715,"byte_end":193718,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ By default `spsc::Queue` will use `usize` integers to hold the indices to its head and tail. For","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":193719,"byte_end":193819,"line_start":149,"line_end":149,"column_start":1,"column_end":101}},{"value":"/ small queues `usize` indices may be overkill. However, `spsc::Queue`'s index type is generic and","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":193820,"byte_end":193920,"line_start":150,"line_end":150,"column_start":1,"column_end":101}},{"value":"/ can be changed to `u8` or `u16` to reduce its footprint. The easiest to construct a","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":193921,"byte_end":194008,"line_start":151,"line_end":151,"column_start":1,"column_end":88}},{"value":"/ `spsc::Queue` with a smaller index type is to use the [`u8`] and [`u16`] constructors.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":194009,"byte_end":194099,"line_start":152,"line_end":152,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":194100,"byte_end":194103,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ [`u8`]: struct.Queue.html#method.u8","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":194104,"byte_end":194143,"line_start":154,"line_end":154,"column_start":1,"column_end":40}},{"value":"/ [`u16`]: struct.Queue.html#method.u16","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":194144,"byte_end":194185,"line_start":155,"line_end":155,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":194186,"byte_end":194189,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ *IMPORTANT*: `spsc::Queue<_, _, u8>` has a maximum capacity of 255 elements; `spsc::Queue<_, _,","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":194190,"byte_end":194289,"line_start":157,"line_end":157,"column_start":1,"column_end":100}},{"value":"/ u16>` has a maximum capacity of 65535 elements.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":194290,"byte_end":194341,"line_start":158,"line_end":158,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":194342,"byte_end":194345,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ `spsc::Queue` also comes in a single core variant. This variant can be created using the","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":194346,"byte_end":194438,"line_start":160,"line_end":160,"column_start":1,"column_end":93}},{"value":"/ following constructors: `u8_sc`, `u16_sc`, `usize_sc` and `new_sc`. This variant is `unsafe` to","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":194439,"byte_end":194538,"line_start":161,"line_end":161,"column_start":1,"column_end":100}},{"value":"/ create because the programmer must make sure that the queue's consumer and producer endpoints","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":194539,"byte_end":194636,"line_start":162,"line_end":162,"column_start":1,"column_end":98}},{"value":"/ (if split) are kept on a single core for their entire lifetime.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":194637,"byte_end":194704,"line_start":163,"line_end":163,"column_start":1,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":1818},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":194774,"byte_end":194819,"line_start":165,"line_end":165,"column_start":20,"column_end":65},"name":"0","qualname":"::spsc::Queue::0","value":"i::Queue<generic_array::GenericArray<T, N>, U, C>","parent":{"krate":0,"index":1812},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1824},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":195080,"byte_end":195088,"line_start":179,"line_end":179,"column_start":12,"column_end":20},"name":"capacity","qualname":"<Queue<T, N, U, C>>::capacity","value":"pub fn capacity(&Self) -> U","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum number of elements the queue can hold\n","sig":null,"attributes":[{"value":"/ Returns the maximum number of elements the queue can hold","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":195007,"byte_end":195068,"line_start":178,"line_end":178,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1825},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":195210,"byte_end":195218,"line_start":184,"line_end":184,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Queue<T, N, U, C>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the queue has a length of 0\n","sig":null,"attributes":[{"value":"/ Returns `true` if the queue has a length of 0","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":195149,"byte_end":195198,"line_start":183,"line_end":183,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1826},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":195341,"byte_end":195345,"line_start":189,"line_end":189,"column_start":12,"column_end":16},"name":"iter","qualname":"<Queue<T, N, U, C>>::iter","value":"pub fn iter(&Self) -> Iter<, T, N, U, C>","parent":null,"children":[],"decl_id":null,"docs":" Iterates from the front of the queue to the back\n","sig":null,"attributes":[{"value":"/ Iterates from the front of the queue to the back","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":195277,"byte_end":195329,"line_start":188,"line_end":188,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1827},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":195563,"byte_end":195571,"line_start":198,"line_end":198,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<Queue<T, N, U, C>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, T, N, U, C>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that allows modifying each value.\n","sig":null,"attributes":[{"value":"/ Returns an iterator that allows modifying each value.","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":195494,"byte_end":195551,"line_start":197,"line_end":197,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1876},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":204034,"byte_end":204037,"line_start":475,"line_end":475,"column_start":18,"column_end":21},"name":"new","qualname":"<crate::i::Queue<A, usize, MultiCore>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" `spsc::Queue` `const` constructor; wrap the returned value in\n [`spsc::Queue`](struct.Queue.html)\n","sig":null,"attributes":[{"value":"/ `spsc::Queue` `const` constructor; wrap the returned value in","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":203908,"byte_end":203973,"line_start":473,"line_end":473,"column_start":5,"column_end":70}},{"value":"/ [`spsc::Queue`](struct.Queue.html)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":203978,"byte_end":204016,"line_start":474,"line_end":474,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1880},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":204248,"byte_end":204251,"line_start":485,"line_end":485,"column_start":12,"column_end":15},"name":"new","qualname":"<Queue<T, N, usize, MultiCore>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Alias for [`spsc::Queue::usize`](struct.Queue.html#method.usize)\n","sig":null,"attributes":[{"value":"/ Alias for [`spsc::Queue::usize`](struct.Queue.html#method.usize)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":204168,"byte_end":204236,"line_start":484,"line_end":484,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1883},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":204496,"byte_end":204502,"line_start":493,"line_end":493,"column_start":25,"column_end":31},"name":"new_sc","qualname":"<crate::i::Queue<A, usize, SingleCore>>::new_sc","value":"pub const unsafe fn new_sc() -> Self","parent":null,"children":[],"decl_id":null,"docs":" `spsc::Queue` `const` constructor; wrap the returned value in\n [`spsc::Queue`](struct.Queue.html)\n","sig":null,"attributes":[{"value":"/ `spsc::Queue` `const` constructor; wrap the returned value in","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":204363,"byte_end":204428,"line_start":491,"line_end":491,"column_start":5,"column_end":70}},{"value":"/ [`spsc::Queue`](struct.Queue.html)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":204433,"byte_end":204471,"line_start":492,"line_end":492,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1887},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":204730,"byte_end":204736,"line_start":503,"line_end":503,"column_start":19,"column_end":25},"name":"new_sc","qualname":"<Queue<T, N, usize, SingleCore>>::new_sc","value":"pub unsafe fn new_sc() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Alias for [`spsc::Queue::usize_sc`](struct.Queue.html#method.usize_sc)\n","sig":null,"attributes":[{"value":"/ Alias for [`spsc::Queue::usize_sc`](struct.Queue.html#method.usize_sc)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":204637,"byte_end":204711,"line_start":502,"line_end":502,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":2778},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":204806,"byte_end":204808,"line_start":508,"line_end":508,"column_start":8,"column_end":10},"name":"u8","qualname":"<Queue<T, N, u8, MultiCore>>::u8","value":"pub fn u8() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue with a fixed capacity of `N`\n","sig":null,"attributes":[{"value":"/ Creates an empty queue with a fixed capacity of `N`","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":197865,"byte_end":197920,"line_start":306,"line_end":306,"column_start":13,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2781},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":204806,"byte_end":204808,"line_start":508,"line_end":508,"column_start":8,"column_end":10},"name":"u8","qualname":"<crate::i::Queue<A, u8, MultiCore>>::u8","value":"pub const fn u8() -> Self","parent":null,"children":[],"decl_id":null,"docs":" `spsc::Queue` `const` constructor; wrap the returned value in\n [`spsc::Queue`](struct.Queue.html)\n","sig":null,"attributes":[{"value":"/ `spsc::Queue` `const` constructor; wrap the returned value in","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":198095,"byte_end":198160,"line_start":313,"line_end":313,"column_start":13,"column_end":78}},{"value":"/ [`spsc::Queue`](struct.Queue.html)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":198173,"byte_end":198211,"line_start":314,"line_end":314,"column_start":13,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2785},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":204810,"byte_end":204815,"line_start":508,"line_end":508,"column_start":12,"column_end":17},"name":"u8_sc","qualname":"<Queue<T, N, u8, SingleCore>>::u8_sc","value":"pub unsafe fn u8_sc() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue with a fixed capacity of `N` (single core variant)\n","sig":null,"attributes":[{"value":"/ Creates an empty queue with a fixed capacity of `N` (single core variant)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":198582,"byte_end":198659,"line_start":328,"line_end":328,"column_start":13,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":2788},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":204810,"byte_end":204815,"line_start":508,"line_end":508,"column_start":12,"column_end":17},"name":"u8_sc","qualname":"<crate::i::Queue<A, u8, SingleCore>>::u8_sc","value":"pub const unsafe fn u8_sc() -> Self","parent":null,"children":[],"decl_id":null,"docs":" `spsc::Queue` `const` constructor; wrap the returned value in\n [`spsc::Queue`](struct.Queue.html)\n","sig":null,"attributes":[{"value":"/ `spsc::Queue` `const` constructor; wrap the returned value in","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":198848,"byte_end":198913,"line_start":335,"line_end":335,"column_start":13,"column_end":78}},{"value":"/ [`spsc::Queue`](struct.Queue.html)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":198926,"byte_end":198964,"line_start":336,"line_end":336,"column_start":13,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2806},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":204825,"byte_end":204828,"line_start":509,"line_end":509,"column_start":8,"column_end":11},"name":"u16","qualname":"<Queue<T, N, u16, MultiCore>>::u16","value":"pub fn u16() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue with a fixed capacity of `N`\n","sig":null,"attributes":[{"value":"/ Creates an empty queue with a fixed capacity of `N`","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":197865,"byte_end":197920,"line_start":306,"line_end":306,"column_start":13,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2809},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":204825,"byte_end":204828,"line_start":509,"line_end":509,"column_start":8,"column_end":11},"name":"u16","qualname":"<crate::i::Queue<A, u16, MultiCore>>::u16","value":"pub const fn u16() -> Self","parent":null,"children":[],"decl_id":null,"docs":" `spsc::Queue` `const` constructor; wrap the returned value in\n [`spsc::Queue`](struct.Queue.html)\n","sig":null,"attributes":[{"value":"/ `spsc::Queue` `const` constructor; wrap the returned value in","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":198095,"byte_end":198160,"line_start":313,"line_end":313,"column_start":13,"column_end":78}},{"value":"/ [`spsc::Queue`](struct.Queue.html)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":198173,"byte_end":198211,"line_start":314,"line_end":314,"column_start":13,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2813},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":204830,"byte_end":204836,"line_start":509,"line_end":509,"column_start":13,"column_end":19},"name":"u16_sc","qualname":"<Queue<T, N, u16, SingleCore>>::u16_sc","value":"pub unsafe fn u16_sc() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue with a fixed capacity of `N` (single core variant)\n","sig":null,"attributes":[{"value":"/ Creates an empty queue with a fixed capacity of `N` (single core variant)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":198582,"byte_end":198659,"line_start":328,"line_end":328,"column_start":13,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":2816},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":204830,"byte_end":204836,"line_start":509,"line_end":509,"column_start":13,"column_end":19},"name":"u16_sc","qualname":"<crate::i::Queue<A, u16, SingleCore>>::u16_sc","value":"pub const unsafe fn u16_sc() -> Self","parent":null,"children":[],"decl_id":null,"docs":" `spsc::Queue` `const` constructor; wrap the returned value in\n [`spsc::Queue`](struct.Queue.html)\n","sig":null,"attributes":[{"value":"/ `spsc::Queue` `const` constructor; wrap the returned value in","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":198848,"byte_end":198913,"line_start":335,"line_end":335,"column_start":13,"column_end":78}},{"value":"/ [`spsc::Queue`](struct.Queue.html)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":198926,"byte_end":198964,"line_start":336,"line_end":336,"column_start":13,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2834},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":204846,"byte_end":204851,"line_start":510,"line_end":510,"column_start":8,"column_end":13},"name":"usize","qualname":"<Queue<T, N, usize, MultiCore>>::usize","value":"pub fn usize() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue with a fixed capacity of `N`\n","sig":null,"attributes":[{"value":"/ Creates an empty queue with a fixed capacity of `N`","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":197865,"byte_end":197920,"line_start":306,"line_end":306,"column_start":13,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2837},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":204846,"byte_end":204851,"line_start":510,"line_end":510,"column_start":8,"column_end":13},"name":"usize","qualname":"<crate::i::Queue<A, usize, MultiCore>>::usize","value":"pub const fn usize() -> Self","parent":null,"children":[],"decl_id":null,"docs":" `spsc::Queue` `const` constructor; wrap the returned value in\n [`spsc::Queue`](struct.Queue.html)\n","sig":null,"attributes":[{"value":"/ `spsc::Queue` `const` constructor; wrap the returned value in","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":198095,"byte_end":198160,"line_start":313,"line_end":313,"column_start":13,"column_end":78}},{"value":"/ [`spsc::Queue`](struct.Queue.html)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":198173,"byte_end":198211,"line_start":314,"line_end":314,"column_start":13,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2841},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":204853,"byte_end":204861,"line_start":510,"line_end":510,"column_start":15,"column_end":23},"name":"usize_sc","qualname":"<Queue<T, N, usize, SingleCore>>::usize_sc","value":"pub unsafe fn usize_sc() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue with a fixed capacity of `N` (single core variant)\n","sig":null,"attributes":[{"value":"/ Creates an empty queue with a fixed capacity of `N` (single core variant)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":198582,"byte_end":198659,"line_start":328,"line_end":328,"column_start":13,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":2844},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":204853,"byte_end":204861,"line_start":510,"line_end":510,"column_start":15,"column_end":23},"name":"usize_sc","qualname":"<crate::i::Queue<A, usize, SingleCore>>::usize_sc","value":"pub const unsafe fn usize_sc() -> Self","parent":null,"children":[],"decl_id":null,"docs":" `spsc::Queue` `const` constructor; wrap the returned value in\n [`spsc::Queue`](struct.Queue.html)\n","sig":null,"attributes":[{"value":"/ `spsc::Queue` `const` constructor; wrap the returned value in","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":198848,"byte_end":198913,"line_start":335,"line_end":335,"column_start":13,"column_end":78}},{"value":"/ [`spsc::Queue`](struct.Queue.html)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":198926,"byte_end":198964,"line_start":336,"line_end":336,"column_start":13,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":1903},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":205471,"byte_end":205475,"line_start":538,"line_end":538,"column_start":12,"column_end":16},"name":"Iter","qualname":"::spsc::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":1909},{"krate":0,"index":1910},{"krate":0,"index":1911}],"decl_id":null,"docs":" An iterator over the items of a queue\n","sig":null,"attributes":[{"value":"/ An iterator over the items of a queue","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":205418,"byte_end":205459,"line_start":537,"line_end":537,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":1919},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":205965,"byte_end":205972,"line_start":565,"line_end":565,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::spsc::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":1925},{"krate":0,"index":1926},{"krate":0,"index":1927}],"decl_id":null,"docs":" A mutable iterator over the items of a queue\n","sig":null,"attributes":[{"value":"/ A mutable iterator over the items of a queue","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":205905,"byte_end":205953,"line_start":564,"line_end":564,"column_start":1,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":1956},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/sealed.rs","byte_start":224484,"byte_end":224489,"line_start":9,"line_end":9,"column_start":22,"column_end":27},"name":"XCore","qualname":"::sealed::spsc::XCore","value":"XCore","parent":null,"children":[{"krate":0,"index":1957}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1957},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/sealed.rs","byte_start":224503,"byte_end":224516,"line_start":10,"line_end":10,"column_start":12,"column_end":25},"name":"is_multi_core","qualname":"::sealed::spsc::XCore::is_multi_core","value":"pub fn is_multi_core() -> bool","parent":{"krate":0,"index":1956},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1962},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/sealed.rs","byte_start":224824,"byte_end":224827,"line_start":27,"line_end":27,"column_start":22,"column_end":25},"name":"Uxx","qualname":"::sealed::spsc::Uxx","value":"Uxx: Into<usize> + Send","parent":null,"children":[{"krate":0,"index":1963},{"krate":0,"index":1964},{"krate":0,"index":1965},{"krate":0,"index":1967},{"krate":0,"index":1968}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1963},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/sealed.rs","byte_start":224884,"byte_end":224892,"line_start":29,"line_end":29,"column_start":12,"column_end":20},"name":"saturate","qualname":"::sealed::spsc::Uxx::saturate","value":"pub fn saturate(usize) -> Self","parent":{"krate":0,"index":1962},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1964},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/sealed.rs","byte_start":224947,"byte_end":224955,"line_start":32,"line_end":32,"column_start":12,"column_end":20},"name":"truncate","qualname":"::sealed::spsc::Uxx::truncate","value":"pub fn truncate(usize) -> Self","parent":{"krate":0,"index":1962},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1965},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/sealed.rs","byte_start":225045,"byte_end":225057,"line_start":36,"line_end":36,"column_start":19,"column_end":31},"name":"load_acquire","qualname":"::sealed::spsc::Uxx::load_acquire","value":"pub unsafe fn load_acquire<C>(*const Self) -> Self where C: XCore","parent":{"krate":0,"index":1962},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(has_atomics)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/sealed.rs","byte_start":224984,"byte_end":225003,"line_start":34,"line_end":34,"column_start":9,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1967},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/sealed.rs","byte_start":225184,"byte_end":225196,"line_start":42,"line_end":42,"column_start":12,"column_end":24},"name":"load_relaxed","qualname":"::sealed::spsc::Uxx::load_relaxed","value":"pub fn load_relaxed(*const Self) -> Self","parent":{"krate":0,"index":1962},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(has_atomics)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/sealed.rs","byte_start":225130,"byte_end":225149,"line_start":40,"line_end":40,"column_start":9,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1968},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/sealed.rs","byte_start":225292,"byte_end":225305,"line_start":46,"line_end":46,"column_start":19,"column_end":32},"name":"store_release","qualname":"::sealed::spsc::Uxx::store_release","value":"pub unsafe fn store_release<C>(*const Self, Self) where C: XCore","parent":{"krate":0,"index":1962},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(has_atomics)","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/sealed.rs","byte_start":225231,"byte_end":225250,"line_start":44,"line_end":44,"column_start":9,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":2005},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/sealed.rs","byte_start":229603,"byte_end":229607,"line_start":194,"line_end":194,"column_start":22,"column_end":26},"name":"Kind","qualname":"::sealed::binary_heap::Kind","value":"Kind","parent":null,"children":[{"krate":0,"index":2006}],"decl_id":null,"docs":" The binary heap kind: min-heap or max-heap\n","sig":null,"attributes":[{"value":"/ The binary heap kind: min-heap or max-heap","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/sealed.rs","byte_start":229535,"byte_end":229581,"line_start":193,"line_end":193,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2006},"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/sealed.rs","byte_start":229644,"byte_end":229652,"line_start":196,"line_end":196,"column_start":12,"column_end":20},"name":"ordering","qualname":"::sealed::binary_heap::Kind::ordering","value":"pub fn ordering() -> Ordering","parent":{"krate":0,"index":2005},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":4764,"byte_end":4773,"line_start":21,"line_end":21,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":5543,"byte_end":5546,"line_start":49,"line_end":49,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":6607,"byte_end":6614,"line_start":97,"line_end":97,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":12833,"byte_end":12840,"line_start":273,"line_end":273,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":14910,"byte_end":14918,"line_start":338,"line_end":338,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":15442,"byte_end":15450,"line_start":356,"line_end":356,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":172},{"krate":0,"index":175},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":197},{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":26047,"byte_end":26055,"line_start":718,"line_end":718,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":207},{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":26377,"byte_end":26385,"line_start":732,"line_end":732,"column_start":50,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":26679,"byte_end":26687,"line_start":744,"line_end":744,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":27009,"byte_end":27017,"line_start":759,"line_end":759,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":27322,"byte_end":27330,"line_start":771,"line_end":771,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":27664,"byte_end":27672,"line_start":785,"line_end":785,"column_start":64,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":28140,"byte_end":28148,"line_start":802,"line_end":802,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":28318,"byte_end":28326,"line_start":811,"line_end":811,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":255}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":28688,"byte_end":28696,"line_start":827,"line_end":827,"column_start":49,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":263}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":29069,"byte_end":29077,"line_start":842,"line_end":842,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":30135,"byte_end":30139,"line_start":890,"line_end":890,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":300},{"krate":0,"index":301}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":30334,"byte_end":30338,"line_start":898,"line_end":898,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":30558,"byte_end":30565,"line_start":910,"line_end":910,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":317},{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":33825,"byte_end":33833,"line_start":52,"line_end":52,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":34138,"byte_end":34146,"line_start":66,"line_end":66,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":393},{"krate":0,"index":398},{"krate":0,"index":402},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":412},{"krate":0,"index":416},{"krate":0,"index":420},{"krate":0,"index":423},{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":45505,"byte_end":45513,"line_start":454,"line_end":454,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":432}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":45761,"byte_end":45769,"line_start":467,"line_end":467,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":437}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":46050,"byte_end":46058,"line_start":478,"line_end":478,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":46343,"byte_end":46351,"line_start":491,"line_end":491,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":46709,"byte_end":46717,"line_start":504,"line_end":504,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":454}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":47035,"byte_end":47043,"line_start":518,"line_end":518,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":47363,"byte_end":47371,"line_start":532,"line_end":532,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":468}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":48061,"byte_end":48065,"line_start":566,"line_end":566,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":485},{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":48218,"byte_end":48222,"line_start":574,"line_end":574,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":491}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":48567,"byte_end":48577,"line_start":592,"line_end":592,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":504},{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":49172,"byte_end":49184,"line_start":620,"line_end":620,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":518},{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":50063,"byte_end":50072,"line_start":21,"line_end":21,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":565}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":50317,"byte_end":50326,"line_start":31,"line_end":31,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":578},{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":591},{"krate":0,"index":596},{"krate":0,"index":599}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":59494,"byte_end":59503,"line_start":381,"line_end":381,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":59761,"byte_end":59770,"line_start":394,"line_end":394,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":616}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":60002,"byte_end":60011,"line_start":405,"line_end":405,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":621}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":60148,"byte_end":60157,"line_start":415,"line_end":415,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":626}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":60393,"byte_end":60402,"line_start":428,"line_end":428,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":631}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":60654,"byte_end":60663,"line_start":439,"line_end":439,"column_start":40,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":61065,"byte_end":61073,"line_start":462,"line_end":462,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":647},{"krate":0,"index":648}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":61267,"byte_end":61276,"line_start":473,"line_end":473,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":62058,"byte_end":62062,"line_start":509,"line_end":509,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":673},{"krate":0,"index":674}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":62244,"byte_end":62248,"line_start":517,"line_end":517,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":680}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":62385,"byte_end":62394,"line_start":525,"line_end":525,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":685}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":62653,"byte_end":62660,"line_start":539,"line_end":539,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":695},{"krate":0,"index":696}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":62882,"byte_end":62891,"line_start":547,"line_end":547,"column_start":54,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":703}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":63243,"byte_end":63252,"line_start":562,"line_end":562,"column_start":22,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":64678,"byte_end":64684,"line_start":23,"line_end":23,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":761}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":64903,"byte_end":64909,"line_start":32,"line_end":32,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":776},{"krate":0,"index":777},{"krate":0,"index":778}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":74139,"byte_end":74145,"line_start":381,"line_end":381,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":781}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":74267,"byte_end":74273,"line_start":390,"line_end":390,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":785}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":74460,"byte_end":74466,"line_start":401,"line_end":401,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":788},{"krate":0,"index":789}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":74682,"byte_end":74688,"line_start":414,"line_end":414,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":792}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":74866,"byte_end":74872,"line_start":425,"line_end":425,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":795}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":75047,"byte_end":75053,"line_start":434,"line_end":434,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":798}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":75228,"byte_end":75234,"line_start":443,"line_end":443,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":801}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":75420,"byte_end":75426,"line_start":453,"line_end":453,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":805}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":75614,"byte_end":75620,"line_start":463,"line_end":463,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":809},{"krate":0,"index":811}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":75920,"byte_end":75926,"line_start":476,"line_end":476,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":815},{"krate":0,"index":816}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":76073,"byte_end":76079,"line_start":487,"line_end":487,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":819}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":76215,"byte_end":76221,"line_start":496,"line_end":496,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":822}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":76348,"byte_end":76354,"line_start":506,"line_end":506,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":825}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":76508,"byte_end":76514,"line_start":516,"line_end":516,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":829},{"krate":0,"index":830}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":77645,"byte_end":77651,"line_start":565,"line_end":565,"column_start":16,"column_end":22},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":83977,"byte_end":83980,"line_start":6,"line_end":6,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":870}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":84227,"byte_end":84230,"line_start":16,"line_end":16,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":874},{"krate":0,"index":875},{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":879},{"krate":0,"index":881},{"krate":0,"index":882},{"krate":0,"index":883},{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":888}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88426,"byte_end":88429,"line_start":169,"line_end":169,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":897}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88559,"byte_end":88562,"line_start":179,"line_end":179,"column_start":12,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":901},{"krate":0,"index":902},{"krate":0,"index":903},{"krate":0,"index":904},{"krate":0,"index":905},{"krate":0,"index":906},{"krate":0,"index":907},{"krate":0,"index":908},{"krate":0,"index":909},{"krate":0,"index":910},{"krate":0,"index":911},{"krate":0,"index":912},{"krate":0,"index":913},{"krate":0,"index":914},{"krate":0,"index":915},{"krate":0,"index":916},{"krate":0,"index":917}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":98954,"byte_end":98957,"line_start":518,"line_end":518,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":921}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":99077,"byte_end":99080,"line_start":527,"line_end":527,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":925}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":99274,"byte_end":99277,"line_start":537,"line_end":537,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":928}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":99532,"byte_end":99535,"line_start":549,"line_end":549,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":932}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":99685,"byte_end":99688,"line_start":558,"line_end":558,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":936}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":99884,"byte_end":99887,"line_start":570,"line_end":570,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":942}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":100117,"byte_end":100120,"line_start":583,"line_end":583,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":947}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":100320,"byte_end":100323,"line_start":593,"line_end":593,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":952}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":100967,"byte_end":100970,"line_start":627,"line_end":627,"column_start":32,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":971}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":101580,"byte_end":101588,"line_start":657,"line_end":657,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":981},{"krate":0,"index":982}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":102025,"byte_end":102033,"line_start":677,"line_end":677,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":986}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":102233,"byte_end":102241,"line_start":690,"line_end":690,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":990}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":102583,"byte_end":102586,"line_start":704,"line_end":704,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":994},{"krate":0,"index":995},{"krate":0,"index":996}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":102817,"byte_end":102820,"line_start":716,"line_end":716,"column_start":46,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1002}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":103696,"byte_end":103699,"line_start":759,"line_end":759,"column_start":19,"column_end":22},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":103777,"byte_end":103780,"line_start":766,"line_end":766,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1011},{"krate":0,"index":1012}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":103936,"byte_end":103939,"line_start":777,"line_end":777,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1016}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":104090,"byte_end":104093,"line_start":786,"line_end":786,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1020}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":104231,"byte_end":104234,"line_start":796,"line_end":796,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1024}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":104374,"byte_end":104377,"line_start":806,"line_end":806,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1028}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":104508,"byte_end":104511,"line_start":816,"line_end":816,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1032}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":114408,"byte_end":114421,"line_start":46,"line_end":46,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1047},{"krate":0,"index":1048}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":115306,"byte_end":115319,"line_start":81,"line_end":81,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1052},{"krate":0,"index":1054}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":116109,"byte_end":116122,"line_start":112,"line_end":112,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1062}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":117716,"byte_end":117729,"line_start":172,"line_end":172,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1066}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":117976,"byte_end":117989,"line_start":186,"line_end":186,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1072}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":120479,"byte_end":120489,"line_start":29,"line_end":29,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1117}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":122486,"byte_end":122496,"line_start":95,"line_end":95,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1128},{"krate":0,"index":1129},{"krate":0,"index":1130},{"krate":0,"index":1131},{"krate":0,"index":1132},{"krate":0,"index":1133},{"krate":0,"index":1134},{"krate":0,"index":1135},{"krate":0,"index":1136},{"krate":0,"index":1137},{"krate":0,"index":1138},{"krate":0,"index":1139},{"krate":0,"index":1140},{"krate":0,"index":1141},{"krate":0,"index":1142}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":130852,"byte_end":130856,"line_start":382,"line_end":382,"column_start":13,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1152},{"krate":0,"index":1153},{"krate":0,"index":1154},{"krate":0,"index":1155},{"krate":0,"index":1156}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":132751,"byte_end":132758,"line_start":450,"line_end":450,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1168}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":132965,"byte_end":132972,"line_start":463,"line_end":463,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1173},{"krate":0,"index":1174}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":133303,"byte_end":133310,"line_start":477,"line_end":477,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1179}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":133631,"byte_end":133638,"line_start":490,"line_end":490,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1185}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":133942,"byte_end":133946,"line_start":504,"line_end":504,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1189}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":134201,"byte_end":134211,"line_start":515,"line_end":515,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1194}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":134357,"byte_end":134367,"line_start":526,"line_end":526,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1199}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":134628,"byte_end":134638,"line_start":540,"line_end":540,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1204}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":134833,"byte_end":134843,"line_start":551,"line_end":551,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1209}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":142877,"byte_end":142879,"line_start":98,"line_end":98,"column_start":9,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1278},{"krate":0,"index":1279},{"krate":0,"index":1280},{"krate":0,"index":1281}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":143769,"byte_end":143771,"line_start":130,"line_end":130,"column_start":25,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":143961,"byte_end":143963,"line_start":139,"line_end":139,"column_start":9,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1292},{"krate":0,"index":1293},{"krate":0,"index":1294},{"krate":0,"index":1295}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":144881,"byte_end":144883,"line_start":171,"line_end":171,"column_start":25,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":145073,"byte_end":145075,"line_start":180,"line_end":180,"column_start":9,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1306},{"krate":0,"index":1307},{"krate":0,"index":1308},{"krate":0,"index":1309}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":146192,"byte_end":146194,"line_start":221,"line_end":221,"column_start":25,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":146387,"byte_end":146390,"line_start":230,"line_end":230,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1320},{"krate":0,"index":1321},{"krate":0,"index":1322},{"krate":0,"index":1323}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":147754,"byte_end":147757,"line_start":279,"line_end":279,"column_start":25,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":147950,"byte_end":147953,"line_start":288,"line_end":288,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1334},{"krate":0,"index":1335},{"krate":0,"index":1336},{"krate":0,"index":1337}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":149813,"byte_end":149816,"line_start":353,"line_end":353,"column_start":25,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":150009,"byte_end":150012,"line_start":362,"line_end":362,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":1350},{"krate":0,"index":1351}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":152864,"byte_end":152867,"line_start":459,"line_end":459,"column_start":25,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":152967,"byte_end":152971,"line_start":466,"line_end":466,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1360}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":179333,"byte_end":179336,"line_start":97,"line_end":97,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1490}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":179788,"byte_end":179791,"line_start":121,"line_end":121,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1493}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":180588,"byte_end":180591,"line_start":149,"line_end":149,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1496},{"krate":0,"index":1497}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":180735,"byte_end":180738,"line_start":160,"line_end":160,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1500}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":180906,"byte_end":180909,"line_start":169,"line_end":169,"column_start":58,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":180940,"byte_end":180943,"line_start":171,"line_end":171,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1505}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":181136,"byte_end":181139,"line_start":181,"line_end":181,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1508}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":181331,"byte_end":181334,"line_start":191,"line_end":191,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1512}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":181716,"byte_end":181719,"line_start":209,"line_end":209,"column_start":28,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":181796,"byte_end":181799,"line_start":216,"line_end":216,"column_start":28,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":181872,"byte_end":181875,"line_start":223,"line_end":223,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1522},{"krate":0,"index":1523}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":182058,"byte_end":182061,"line_start":235,"line_end":235,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1527}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":182240,"byte_end":182243,"line_start":245,"line_end":245,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1530}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":182403,"byte_end":182406,"line_start":255,"line_end":255,"column_start":16,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":182474,"byte_end":182477,"line_start":262,"line_end":262,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1535}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":182675,"byte_end":182678,"line_start":272,"line_end":272,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1538}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":182839,"byte_end":182842,"line_start":282,"line_end":282,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1541}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/cas.rs","byte_start":185130,"byte_end":185134,"line_start":23,"line_end":23,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1576}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/cas.rs","byte_start":185269,"byte_end":185274,"line_start":33,"line_end":33,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1582},{"krate":0,"index":1583},{"krate":0,"index":1584}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/cas.rs","byte_start":187117,"byte_end":187120,"line_start":102,"line_end":102,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1594}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/cas.rs","byte_start":187196,"byte_end":187199,"line_start":108,"line_end":108,"column_start":18,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/cas.rs","byte_start":187215,"byte_end":187218,"line_start":110,"line_end":110,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1599},{"krate":0,"index":1601},{"krate":0,"index":1602},{"krate":0,"index":1604},{"krate":0,"index":1605},{"krate":0,"index":1606},{"krate":0,"index":1607},{"krate":0,"index":1608},{"krate":0,"index":1609},{"krate":0,"index":1610}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/cas.rs","byte_start":188660,"byte_end":188666,"line_start":172,"line_end":172,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1617},{"krate":0,"index":1618},{"krate":0,"index":1621},{"krate":0,"index":1623}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":168265,"byte_end":168269,"line_start":269,"line_end":269,"column_start":25,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":168285,"byte_end":168289,"line_start":271,"line_end":271,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1633},{"krate":0,"index":1634},{"krate":0,"index":1635},{"krate":0,"index":1637},{"krate":0,"index":1638}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":172262,"byte_end":172265,"line_start":418,"line_end":418,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1647}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":172669,"byte_end":172672,"line_start":438,"line_end":438,"column_start":28,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":172724,"byte_end":172727,"line_start":440,"line_end":440,"column_start":28,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":172803,"byte_end":172806,"line_start":442,"line_end":442,"column_start":52,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":172834,"byte_end":172837,"line_start":444,"line_end":444,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1660},{"krate":0,"index":1661}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":173003,"byte_end":173006,"line_start":455,"line_end":455,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1664}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":173158,"byte_end":173161,"line_start":464,"line_end":464,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1667},{"krate":0,"index":1668}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":173298,"byte_end":173301,"line_start":472,"line_end":472,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1671}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":173434,"byte_end":173437,"line_start":478,"line_end":478,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1674}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":173605,"byte_end":173608,"line_start":487,"line_end":487,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1677}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":173777,"byte_end":173780,"line_start":496,"line_end":496,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1680}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":173915,"byte_end":173918,"line_start":505,"line_end":505,"column_start":16,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":173961,"byte_end":173964,"line_start":507,"line_end":507,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1685}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":174137,"byte_end":174140,"line_start":516,"line_end":516,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1688}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":174276,"byte_end":174279,"line_start":525,"line_end":525,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1691}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/split.rs","byte_start":215482,"byte_end":215487,"line_start":10,"line_end":10,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1760}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/split.rs","byte_start":216425,"byte_end":216433,"line_start":43,"line_end":43,"column_start":38,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/split.rs","byte_start":216909,"byte_end":216917,"line_start":64,"line_end":64,"column_start":38,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":192841,"byte_end":192847,"line_start":109,"line_end":109,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1803}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":193010,"byte_end":193016,"line_start":118,"line_end":118,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1807},{"krate":0,"index":1808},{"krate":0,"index":1809},{"krate":0,"index":1810},{"krate":0,"index":1811}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":194912,"byte_end":194917,"line_start":172,"line_end":172,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1824},{"krate":0,"index":1825},{"krate":0,"index":1826},{"krate":0,"index":1827},{"krate":0,"index":1828}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":195975,"byte_end":195980,"line_start":215,"line_end":215,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1834}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":196246,"byte_end":196251,"line_start":230,"line_end":230,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1840}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":196513,"byte_end":196518,"line_start":242,"line_end":242,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1846}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":196838,"byte_end":196843,"line_start":257,"line_end":257,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1853}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":203875,"byte_end":203880,"line_start":472,"line_end":472,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1876}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":204103,"byte_end":204108,"line_start":480,"line_end":480,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1880}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":204329,"byte_end":204334,"line_start":490,"line_end":490,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1883}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Inherent","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":204571,"byte_end":204576,"line_start":498,"line_end":498,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1887}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":204930,"byte_end":204935,"line_start":512,"line_end":512,"column_start":66,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":1896}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":205313,"byte_end":205318,"line_start":528,"line_end":528,"column_start":25,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":205664,"byte_end":205668,"line_start":549,"line_end":549,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1918}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/sealed.rs","byte_start":224585,"byte_end":224595,"line_start":14,"line_end":14,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1959}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/sealed.rs","byte_start":224720,"byte_end":224729,"line_start":21,"line_end":21,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1961}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/sealed.rs","byte_start":229700,"byte_end":229703,"line_start":199,"line_end":199,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2008}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/sealed.rs","byte_start":229811,"byte_end":229814,"line_start":205,"line_end":205,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2010}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":4055,"byte_end":4066,"line_start":101,"line_end":101,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":1074}},{"kind":"Mod","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":4076,"byte_end":4077,"line_start":102,"line_end":102,"column_start":9,"column_end":10},"ref_id":{"krate":0,"index":1218}},{"kind":"Mod","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":4125,"byte_end":4129,"line_start":104,"line_end":104,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1255}},{"kind":"Mod","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":4177,"byte_end":4181,"line_start":106,"line_end":106,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1365}},{"kind":"Mod","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":167580,"byte_end":167589,"line_start":244,"line_end":244,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1420}},{"kind":"Mod","span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/lib.rs","byte_start":4211,"byte_end":4215,"line_start":108,"line_end":108,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1693}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":4764,"byte_end":4773,"line_start":21,"line_end":21,"column_start":6,"column_end":15},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":2011},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":5543,"byte_end":5546,"line_start":49,"line_end":49,"column_start":6,"column_end":9},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":2034},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":6607,"byte_end":6614,"line_start":97,"line_end":97,"column_start":15,"column_end":22},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":126},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":12833,"byte_end":12840,"line_start":273,"line_end":273,"column_start":25,"column_end":32},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":126},"to":{"krate":1,"index":2637}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":14910,"byte_end":14918,"line_start":338,"line_end":338,"column_start":18,"column_end":26},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":150},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":15442,"byte_end":15450,"line_start":356,"line_end":356,"column_start":18,"column_end":26},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":150},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":26047,"byte_end":26055,"line_start":718,"line_end":718,"column_start":47,"column_end":55},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":150},"to":{"krate":1,"index":3312}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":26377,"byte_end":26385,"line_start":732,"line_end":732,"column_start":50,"column_end":58},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":150},"to":{"krate":1,"index":3316}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":26679,"byte_end":26687,"line_start":744,"line_end":744,"column_start":28,"column_end":36},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":150},"to":{"krate":1,"index":2637}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":27009,"byte_end":27017,"line_start":759,"line_end":759,"column_start":33,"column_end":41},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":150},"to":{"krate":1,"index":9394}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":27322,"byte_end":27330,"line_start":771,"line_end":771,"column_start":30,"column_end":38},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":150},"to":{"krate":1,"index":2994}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":27664,"byte_end":27672,"line_start":785,"line_end":785,"column_start":64,"column_end":72},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":150},"to":{"krate":1,"index":2667}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":28140,"byte_end":28148,"line_start":802,"line_end":802,"column_start":25,"column_end":33},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":150},"to":{"krate":1,"index":2672}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":28318,"byte_end":28326,"line_start":811,"line_end":811,"column_start":37,"column_end":45},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":150},"to":{"krate":1,"index":7475}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":28688,"byte_end":28696,"line_start":827,"line_end":827,"column_start":49,"column_end":57},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":150},"to":{"krate":1,"index":7475}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":29069,"byte_end":29077,"line_start":842,"line_end":842,"column_start":43,"column_end":51},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":150},"to":{"krate":1,"index":7462}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":30135,"byte_end":30139,"line_start":890,"line_end":890,"column_start":29,"column_end":33},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":291},"to":{"krate":1,"index":7646}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":30334,"byte_end":30338,"line_start":898,"line_end":898,"column_start":26,"column_end":30},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":291},"to":{"krate":1,"index":2637}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexmap.rs","byte_start":30558,"byte_end":30565,"line_start":910,"line_end":910,"column_start":29,"column_end":36},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":308},"to":{"krate":1,"index":7646}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":33825,"byte_end":33833,"line_start":52,"line_end":52,"column_start":15,"column_end":23},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":373},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":34138,"byte_end":34146,"line_start":66,"line_end":66,"column_start":15,"column_end":23},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":373},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":45505,"byte_end":45513,"line_start":454,"line_end":454,"column_start":25,"column_end":33},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":373},"to":{"krate":1,"index":2637}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":45761,"byte_end":45769,"line_start":467,"line_end":467,"column_start":30,"column_end":38},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":373},"to":{"krate":1,"index":9394}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":46050,"byte_end":46058,"line_start":478,"line_end":478,"column_start":27,"column_end":35},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":373},"to":{"krate":1,"index":2994}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":46343,"byte_end":46351,"line_start":491,"line_end":491,"column_start":60,"column_end":68},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":373},"to":{"krate":1,"index":2667}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":46709,"byte_end":46717,"line_start":504,"line_end":504,"column_start":29,"column_end":37},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":373},"to":{"krate":1,"index":7475}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":47035,"byte_end":47043,"line_start":518,"line_end":518,"column_start":37,"column_end":45},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":373},"to":{"krate":1,"index":7475}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":47363,"byte_end":47371,"line_start":532,"line_end":532,"column_start":35,"column_end":43},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":373},"to":{"krate":1,"index":7462}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":48061,"byte_end":48065,"line_start":566,"line_end":566,"column_start":26,"column_end":30},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":478},"to":{"krate":1,"index":7646}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":48218,"byte_end":48222,"line_start":574,"line_end":574,"column_start":23,"column_end":27},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":478},"to":{"krate":1,"index":2637}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":48567,"byte_end":48577,"line_start":592,"line_end":592,"column_start":32,"column_end":42},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":492},"to":{"krate":1,"index":7646}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/indexset.rs","byte_start":49172,"byte_end":49184,"line_start":620,"line_end":620,"column_start":32,"column_end":44},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":506},"to":{"krate":1,"index":7646}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":50063,"byte_end":50072,"line_start":21,"line_end":21,"column_start":19,"column_end":28},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1238},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":50317,"byte_end":50326,"line_start":31,"line_end":31,"column_start":15,"column_end":24},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":557},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":59494,"byte_end":59503,"line_start":381,"line_end":381,"column_start":44,"column_end":53},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":557},"to":{"krate":1,"index":3312}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":59761,"byte_end":59770,"line_start":394,"line_end":394,"column_start":47,"column_end":56},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":557},"to":{"krate":1,"index":3316}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":60002,"byte_end":60011,"line_start":405,"line_end":405,"column_start":27,"column_end":36},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":557},"to":{"krate":1,"index":2994}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":60148,"byte_end":60157,"line_start":415,"line_end":415,"column_start":25,"column_end":34},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":557},"to":{"krate":1,"index":2637}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":60393,"byte_end":60402,"line_start":428,"line_end":428,"column_start":30,"column_end":39},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":557},"to":{"krate":1,"index":9394}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":60654,"byte_end":60663,"line_start":439,"line_end":439,"column_start":40,"column_end":49},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":557},"to":{"krate":1,"index":7462}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":61065,"byte_end":61073,"line_start":462,"line_end":462,"column_start":28,"column_end":36},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":638},"to":{"krate":1,"index":7646}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":61267,"byte_end":61276,"line_start":473,"line_end":473,"column_start":32,"column_end":41},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":557},"to":{"krate":1,"index":7466}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":62058,"byte_end":62062,"line_start":509,"line_end":509,"column_start":29,"column_end":33},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":664},"to":{"krate":1,"index":7646}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":62244,"byte_end":62248,"line_start":517,"line_end":517,"column_start":26,"column_end":30},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":664},"to":{"krate":1,"index":2637}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":62385,"byte_end":62394,"line_start":525,"line_end":525,"column_start":24,"column_end":33},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":557},"to":{"krate":1,"index":3251}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":62653,"byte_end":62660,"line_start":539,"line_end":539,"column_start":29,"column_end":36},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":686},"to":{"krate":1,"index":7646}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":62882,"byte_end":62891,"line_start":547,"line_end":547,"column_start":54,"column_end":63},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":557},"to":{"krate":1,"index":2667}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/linear_map.rs","byte_start":63243,"byte_end":63252,"line_start":562,"line_end":562,"column_start":22,"column_end":31},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":557},"to":{"krate":1,"index":2672}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":64678,"byte_end":64684,"line_start":23,"line_end":23,"column_start":19,"column_end":25},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1248},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":64903,"byte_end":64909,"line_start":32,"line_end":32,"column_start":9,"column_end":15},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":755},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":74139,"byte_end":74145,"line_start":381,"line_end":381,"column_start":21,"column_end":27},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":755},"to":{"krate":1,"index":2994}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":74267,"byte_end":74273,"line_start":390,"line_end":390,"column_start":31,"column_end":37},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":755},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":74460,"byte_end":74466,"line_start":401,"line_end":401,"column_start":26,"column_end":32},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":755},"to":{"krate":1,"index":11935}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":74682,"byte_end":74688,"line_start":414,"line_end":414,"column_start":19,"column_end":25},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":755},"to":{"krate":1,"index":2637}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":74866,"byte_end":74872,"line_start":425,"line_end":425,"column_start":24,"column_end":30},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":755},"to":{"krate":1,"index":9394}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":75047,"byte_end":75053,"line_start":434,"line_end":434,"column_start":26,"column_end":32},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":755},"to":{"krate":1,"index":9401}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":75228,"byte_end":75234,"line_start":443,"line_end":443,"column_start":24,"column_end":30},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":755},"to":{"krate":1,"index":9600}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":75420,"byte_end":75426,"line_start":453,"line_end":453,"column_start":26,"column_end":32},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":755},"to":{"krate":6,"index":90}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":75614,"byte_end":75620,"line_start":463,"line_end":463,"column_start":24,"column_end":30},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":755},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":75920,"byte_end":75926,"line_start":476,"line_end":476,"column_start":24,"column_end":30},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":755},"to":{"krate":1,"index":3227}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":76073,"byte_end":76079,"line_start":487,"line_end":487,"column_start":27,"column_end":33},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":755},"to":{"krate":1,"index":3240}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":76215,"byte_end":76221,"line_start":496,"line_end":496,"column_start":24,"column_end":30},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":755},"to":{"krate":1,"index":2913}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":76348,"byte_end":76354,"line_start":506,"line_end":506,"column_start":25,"column_end":31},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":755},"to":{"krate":1,"index":2913}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":76508,"byte_end":76514,"line_start":516,"line_end":516,"column_start":40,"column_end":46},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":755},"to":{"krate":1,"index":2667}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/string.rs","byte_start":77645,"byte_end":77651,"line_start":565,"line_end":565,"column_start":16,"column_end":22},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":755},"to":{"krate":1,"index":2672}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":83977,"byte_end":83980,"line_start":6,"line_end":6,"column_start":19,"column_end":22},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1251},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":84227,"byte_end":84230,"line_start":16,"line_end":16,"column_start":22,"column_end":25},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1251},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88426,"byte_end":88429,"line_start":169,"line_end":169,"column_start":22,"column_end":25},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":889},"to":{"krate":1,"index":2637}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":88559,"byte_end":88562,"line_start":179,"line_end":179,"column_start":12,"column_end":15},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":889},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":98954,"byte_end":98957,"line_start":518,"line_end":518,"column_start":24,"column_end":27},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":889},"to":{"krate":1,"index":2994}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":99077,"byte_end":99080,"line_start":527,"line_end":527,"column_start":27,"column_end":30},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":889},"to":{"krate":1,"index":9394}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":99274,"byte_end":99277,"line_start":537,"line_end":537,"column_start":24,"column_end":27},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":889},"to":{"krate":1,"index":9345}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":99532,"byte_end":99535,"line_start":549,"line_end":549,"column_start":21,"column_end":24},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":889},"to":{"krate":1,"index":3251}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":99685,"byte_end":99688,"line_start":558,"line_end":558,"column_start":26,"column_end":29},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":889},"to":{"krate":1,"index":7475}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":99884,"byte_end":99887,"line_start":570,"line_end":570,"column_start":34,"column_end":37},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":889},"to":{"krate":1,"index":7475}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":100117,"byte_end":100120,"line_start":583,"line_end":583,"column_start":27,"column_end":30},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":889},"to":{"krate":1,"index":9600}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":100320,"byte_end":100323,"line_start":593,"line_end":593,"column_start":29,"column_end":32},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":889},"to":{"krate":6,"index":90}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":100967,"byte_end":100970,"line_start":627,"line_end":627,"column_start":32,"column_end":35},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":889},"to":{"krate":1,"index":7462}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":101580,"byte_end":101588,"line_start":657,"line_end":657,"column_start":25,"column_end":33},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":973},"to":{"krate":1,"index":7646}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":102025,"byte_end":102033,"line_start":677,"line_end":677,"column_start":22,"column_end":30},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":973},"to":{"krate":1,"index":2637}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":102233,"byte_end":102241,"line_start":690,"line_end":690,"column_start":21,"column_end":29},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":973},"to":{"krate":1,"index":3251}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":102583,"byte_end":102586,"line_start":704,"line_end":704,"column_start":29,"column_end":32},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":889},"to":{"krate":1,"index":7466}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":102817,"byte_end":102820,"line_start":716,"line_end":716,"column_start":46,"column_end":49},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":889},"to":{"krate":1,"index":2667}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":103696,"byte_end":103699,"line_start":759,"line_end":759,"column_start":19,"column_end":22},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":889},"to":{"krate":1,"index":2672}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":103777,"byte_end":103780,"line_start":766,"line_end":766,"column_start":27,"column_end":30},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":889},"to":{"krate":1,"index":3227}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":103936,"byte_end":103939,"line_start":777,"line_end":777,"column_start":30,"column_end":33},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":889},"to":{"krate":1,"index":3240}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":104090,"byte_end":104093,"line_start":786,"line_end":786,"column_start":33,"column_end":36},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":889},"to":{"krate":1,"index":2913}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":104231,"byte_end":104234,"line_start":796,"line_end":796,"column_start":33,"column_end":36},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":889},"to":{"krate":1,"index":2916}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":104374,"byte_end":104377,"line_start":806,"line_end":806,"column_start":27,"column_end":30},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":889},"to":{"krate":1,"index":2913}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/vec.rs","byte_start":104508,"byte_end":104511,"line_start":816,"line_end":816,"column_start":27,"column_end":30},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":889},"to":{"krate":1,"index":2916}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":114408,"byte_end":114421,"line_start":46,"line_end":46,"column_start":12,"column_end":25},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":2706},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":115306,"byte_end":115319,"line_start":81,"line_end":81,"column_start":12,"column_end":25},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":2706},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":116109,"byte_end":116122,"line_start":112,"line_end":112,"column_start":12,"column_end":25},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":2706},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":117716,"byte_end":117729,"line_start":172,"line_end":172,"column_start":26,"column_end":39},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":2706},"to":{"krate":1,"index":7475}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/histbuf.rs","byte_start":117976,"byte_end":117989,"line_start":186,"line_end":186,"column_start":34,"column_end":47},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":2706},"to":{"krate":1,"index":7475}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":120479,"byte_end":120489,"line_start":29,"line_end":29,"column_start":22,"column_end":32},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1233},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":122486,"byte_end":122496,"line_start":95,"line_end":95,"column_start":15,"column_end":25},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1118},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":130852,"byte_end":130856,"line_start":382,"line_end":382,"column_start":13,"column_end":17},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1143},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":132751,"byte_end":132758,"line_start":450,"line_end":450,"column_start":24,"column_end":31},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1157},"to":{"krate":1,"index":3251}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":132965,"byte_end":132972,"line_start":463,"line_end":463,"column_start":25,"column_end":32},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1157},"to":{"krate":1,"index":3227}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":133303,"byte_end":133310,"line_start":477,"line_end":477,"column_start":28,"column_end":35},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1157},"to":{"krate":1,"index":3240}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":133631,"byte_end":133638,"line_start":490,"line_end":490,"column_start":19,"column_end":26},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":133942,"byte_end":133946,"line_start":504,"line_end":504,"column_start":22,"column_end":26},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1143},"to":{"krate":1,"index":3251}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":134201,"byte_end":134211,"line_start":515,"line_end":515,"column_start":27,"column_end":37},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1118},"to":{"krate":1,"index":2994}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":134357,"byte_end":134367,"line_start":526,"line_end":526,"column_start":25,"column_end":35},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1118},"to":{"krate":1,"index":2637}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":134628,"byte_end":134638,"line_start":540,"line_end":540,"column_start":24,"column_end":34},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1118},"to":{"krate":1,"index":3251}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/binary_heap.rs","byte_start":134833,"byte_end":134843,"line_start":551,"line_end":551,"column_start":30,"column_end":40},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1118},"to":{"krate":1,"index":9394}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":142877,"byte_end":142879,"line_start":98,"line_end":98,"column_start":9,"column_end":11},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1270},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":143769,"byte_end":143771,"line_start":130,"line_end":130,"column_start":25,"column_end":27},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1270},"to":{"krate":1,"index":3028}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":143961,"byte_end":143963,"line_start":139,"line_end":139,"column_start":9,"column_end":11},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1284},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":144881,"byte_end":144883,"line_start":171,"line_end":171,"column_start":25,"column_end":27},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1284},"to":{"krate":1,"index":3028}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":145073,"byte_end":145075,"line_start":180,"line_end":180,"column_start":9,"column_end":11},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1298},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":146192,"byte_end":146194,"line_start":221,"line_end":221,"column_start":25,"column_end":27},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1298},"to":{"krate":1,"index":3028}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":146387,"byte_end":146390,"line_start":230,"line_end":230,"column_start":9,"column_end":12},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1312},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":147754,"byte_end":147757,"line_start":279,"line_end":279,"column_start":25,"column_end":28},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1312},"to":{"krate":1,"index":3028}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":147950,"byte_end":147953,"line_start":288,"line_end":288,"column_start":9,"column_end":12},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1326},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":149813,"byte_end":149816,"line_start":353,"line_end":353,"column_start":25,"column_end":28},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1326},"to":{"krate":1,"index":3028}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":150009,"byte_end":150012,"line_start":362,"line_end":362,"column_start":9,"column_end":12},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1340},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":152864,"byte_end":152867,"line_start":459,"line_end":459,"column_start":25,"column_end":28},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1340},"to":{"krate":1,"index":3028}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/mpmc.rs","byte_start":152967,"byte_end":152971,"line_start":466,"line_end":466,"column_start":9,"column_end":13},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1354},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":179333,"byte_end":179336,"line_start":97,"line_end":97,"column_start":9,"column_end":12},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1483},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":179788,"byte_end":179791,"line_start":121,"line_end":121,"column_start":9,"column_end":12},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1483},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":180588,"byte_end":180591,"line_start":149,"line_end":149,"column_start":19,"column_end":22},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1483},"to":{"krate":1,"index":3227}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":180735,"byte_end":180738,"line_start":160,"line_end":160,"column_start":22,"column_end":25},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1483},"to":{"krate":1,"index":3240}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":180906,"byte_end":180909,"line_start":169,"line_end":169,"column_start":58,"column_end":61},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1483},"to":{"krate":11,"index":7}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":180940,"byte_end":180943,"line_start":171,"line_end":171,"column_start":24,"column_end":27},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1483},"to":{"krate":1,"index":9394}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":181136,"byte_end":181139,"line_start":181,"line_end":181,"column_start":26,"column_end":29},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1483},"to":{"krate":1,"index":9401}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":181331,"byte_end":181334,"line_start":191,"line_end":191,"column_start":21,"column_end":24},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1483},"to":{"krate":1,"index":3251}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":181716,"byte_end":181719,"line_start":209,"line_end":209,"column_start":28,"column_end":31},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1483},"to":{"krate":1,"index":3016}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":181796,"byte_end":181799,"line_start":216,"line_end":216,"column_start":28,"column_end":31},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1483},"to":{"krate":1,"index":3028}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":181872,"byte_end":181875,"line_start":223,"line_end":223,"column_start":24,"column_end":27},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1483},"to":{"krate":8,"index":8}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":182058,"byte_end":182061,"line_start":235,"line_end":235,"column_start":27,"column_end":30},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1483},"to":{"krate":8,"index":11}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":182240,"byte_end":182243,"line_start":245,"line_end":245,"column_start":23,"column_end":26},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1483},"to":{"krate":1,"index":2667}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":182403,"byte_end":182406,"line_start":255,"line_end":255,"column_start":16,"column_end":19},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1483},"to":{"krate":1,"index":2672}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":182474,"byte_end":182477,"line_start":262,"line_end":262,"column_start":24,"column_end":27},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1483},"to":{"krate":1,"index":2714}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":182675,"byte_end":182678,"line_start":272,"line_end":272,"column_start":17,"column_end":20},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1483},"to":{"krate":1,"index":2703}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/singleton.rs","byte_start":182839,"byte_end":182842,"line_start":282,"line_end":282,"column_start":18,"column_end":21},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1483},"to":{"krate":1,"index":9600}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/cas.rs","byte_start":185130,"byte_end":185134,"line_start":23,"line_end":23,"column_start":9,"column_end":13},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1570},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/cas.rs","byte_start":185269,"byte_end":185274,"line_start":33,"line_end":33,"column_start":9,"column_end":14},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1577},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/cas.rs","byte_start":187117,"byte_end":187120,"line_start":102,"line_end":102,"column_start":19,"column_end":22},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1588},"to":{"krate":1,"index":2637}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/cas.rs","byte_start":187196,"byte_end":187199,"line_start":108,"line_end":108,"column_start":18,"column_end":21},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1588},"to":{"krate":1,"index":3026}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/cas.rs","byte_start":187215,"byte_end":187218,"line_start":110,"line_end":110,"column_start":9,"column_end":12},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1588},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/cas.rs","byte_start":188660,"byte_end":188666,"line_start":172,"line_end":172,"column_start":9,"column_end":15},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":1611},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":168265,"byte_end":168269,"line_start":269,"line_end":269,"column_start":25,"column_end":29},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1625},"to":{"krate":1,"index":3016}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":168285,"byte_end":168289,"line_start":271,"line_end":271,"column_start":9,"column_end":13},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":1625},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":172262,"byte_end":172265,"line_start":418,"line_end":418,"column_start":9,"column_end":12},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":1640},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":172669,"byte_end":172672,"line_start":438,"line_end":438,"column_start":28,"column_end":31},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1640},"to":{"krate":1,"index":3016}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":172724,"byte_end":172727,"line_start":440,"line_end":440,"column_start":28,"column_end":31},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":1640},"to":{"krate":1,"index":3028}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":172803,"byte_end":172806,"line_start":442,"line_end":442,"column_start":52,"column_end":55},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1640},"to":{"krate":11,"index":7}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":172834,"byte_end":172837,"line_start":444,"line_end":444,"column_start":21,"column_end":24},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1640},"to":{"krate":8,"index":8}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":173003,"byte_end":173006,"line_start":455,"line_end":455,"column_start":24,"column_end":27},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1640},"to":{"krate":8,"index":11}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":173158,"byte_end":173161,"line_start":464,"line_end":464,"column_start":19,"column_end":22},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1640},"to":{"krate":1,"index":3227}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":173298,"byte_end":173301,"line_start":472,"line_end":472,"column_start":22,"column_end":25},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":1640},"to":{"krate":1,"index":3240}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":173434,"byte_end":173437,"line_start":478,"line_end":478,"column_start":24,"column_end":27},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":1640},"to":{"krate":1,"index":9394}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":173605,"byte_end":173608,"line_start":487,"line_end":487,"column_start":26,"column_end":29},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":1640},"to":{"krate":1,"index":9401}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":173777,"byte_end":173780,"line_start":496,"line_end":496,"column_start":23,"column_end":26},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":1640},"to":{"krate":1,"index":2667}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":173915,"byte_end":173918,"line_start":505,"line_end":505,"column_start":16,"column_end":19},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":1640},"to":{"krate":1,"index":2672}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":173961,"byte_end":173964,"line_start":507,"line_end":507,"column_start":24,"column_end":27},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1640},"to":{"krate":1,"index":2714}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":174137,"byte_end":174140,"line_start":516,"line_end":516,"column_start":17,"column_end":20},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":1640},"to":{"krate":1,"index":2703}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/pool/mod.rs","byte_start":174276,"byte_end":174279,"line_start":525,"line_end":525,"column_start":18,"column_end":21},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":1640},"to":{"krate":1,"index":9600}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/split.rs","byte_start":215482,"byte_end":215487,"line_start":10,"line_end":10,"column_start":18,"column_end":23},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":1812},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/split.rs","byte_start":216425,"byte_end":216433,"line_start":43,"line_end":43,"column_start":38,"column_end":46},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":1762},"to":{"krate":1,"index":3016}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/split.rs","byte_start":216909,"byte_end":216917,"line_start":64,"line_end":64,"column_start":38,"column_end":46},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":1776},"to":{"krate":1,"index":3016}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":192841,"byte_end":192847,"line_start":109,"line_end":109,"column_start":12,"column_end":18},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":1795},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":193010,"byte_end":193016,"line_start":118,"line_end":118,"column_start":12,"column_end":18},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":1795},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":194912,"byte_end":194917,"line_start":172,"line_end":172,"column_start":18,"column_end":23},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":1812},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":195975,"byte_end":195980,"line_start":215,"line_end":215,"column_start":27,"column_end":32},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":1812},"to":{"krate":1,"index":3251}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":196246,"byte_end":196251,"line_start":230,"line_end":230,"column_start":33,"column_end":38},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":1812},"to":{"krate":1,"index":9394}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":196513,"byte_end":196518,"line_start":242,"line_end":242,"column_start":33,"column_end":38},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":1812},"to":{"krate":1,"index":9600}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":196838,"byte_end":196843,"line_start":257,"line_end":257,"column_start":35,"column_end":40},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":1812},"to":{"krate":6,"index":90}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":203875,"byte_end":203880,"line_start":472,"line_end":472,"column_start":19,"column_end":24},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":1241},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":204103,"byte_end":204108,"line_start":480,"line_end":480,"column_start":12,"column_end":17},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":1812},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":204329,"byte_end":204334,"line_start":490,"line_end":490,"column_start":19,"column_end":24},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":1241},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":204571,"byte_end":204576,"line_start":498,"line_end":498,"column_start":12,"column_end":17},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":1812},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":204930,"byte_end":204935,"line_start":512,"line_end":512,"column_start":66,"column_end":71},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":1812},"to":{"krate":1,"index":2667}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":205313,"byte_end":205318,"line_start":528,"line_end":528,"column_start":25,"column_end":30},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":1812},"to":{"krate":1,"index":2672}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/spsc/mod.rs","byte_start":205664,"byte_end":205668,"line_start":549,"line_end":549,"column_start":32,"column_end":36},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":1903},"to":{"krate":1,"index":2637}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/sealed.rs","byte_start":224585,"byte_end":224595,"line_start":14,"line_end":14,"column_start":27,"column_end":37},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":1793},"to":{"krate":0,"index":1956}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/sealed.rs","byte_start":224720,"byte_end":224729,"line_start":21,"line_end":21,"column_start":27,"column_end":36},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":1791},"to":{"krate":0,"index":1956}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/sealed.rs","byte_start":224829,"byte_end":224833,"line_start":27,"line_end":27,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":2919},"to":{"krate":0,"index":1962}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/sealed.rs","byte_start":224843,"byte_end":224847,"line_start":27,"line_end":27,"column_start":41,"column_end":45},"kind":"SuperTrait","from":{"krate":1,"index":3016},"to":{"krate":0,"index":1962}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/sealed.rs","byte_start":229700,"byte_end":229703,"line_start":199,"line_end":199,"column_start":26,"column_end":29},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":1112},"to":{"krate":0,"index":2005}},{"span":{"file_name":"/home/carl/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.5.6/src/sealed.rs","byte_start":229811,"byte_end":229814,"line_start":205,"line_end":205,"column_start":26,"column_end":29},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":1113},"to":{"krate":0,"index":2005}}]}